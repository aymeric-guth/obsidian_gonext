/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// constants.ts
var Paths = {
  Tasks: "813 Tasks",
  Components: "Components",
  Goals: "Goals",
  Slipbox: "803 Slipbox",
  Inbox: "800 Inbox",
  Refs: "802 Refs",
  Archives: "400 Archives",
  Logs: "600 Log",
  Attachments: "000 Attachments",
  Journal: "Journal",
  Resources: "Resources",
  Projects: "100 Projects",
  Domains: "Domains",
  Names: "Names"
};
var Status = {
  Todo: "todo",
  Doing: "doing",
  Done: "done",
  Maybe: "maybe",
  Standby: "standby",
  Trash: "trash"
};
var GoalStatus = {
  Reframe: "reframe",
  Research: "research",
  Operationalize: "operationalize",
  Planify: "planify",
  Dependant: "dependant",
  Active: "active",
  Failed: "failed",
  Success: "success"
};
var Types = {
  Fleeting: 13,
  Literature: 1,
  Permanent: 2,
  Task: 3,
  Praxis: 4,
  Provision: 5,
  Log: 6,
  Resource: 7,
  Media: 8,
  Project: 12,
  Org: 9,
  Domain: 10,
  Component: 11
};
var Namespace = {
  Area: "area",
  Context: "context",
  Layer: "layer",
  Org: "org",
  Project: "project"
};
var Default = {
  Area: "none",
  Context: "any",
  Layer: "none",
  Org: "none",
  Project: "none"
};

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
var i;
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// api.ts
var FrontmatterJS = class {
  singular(values, field) {
    if (!Helper.nilCheck(this.fm[field])) {
      const value = this.fm[field];
      if (typeof value === "string") {
        if (!values.contains(value)) {
          values.push(value);
        }
      } else {
        console.warn(
          `'${field}' is ignored, invalid data-type: '${typeof this.fm[field]}'`
        );
      }
    }
  }
  plural(values, field) {
    if (!Helper.nilCheck(this.fm[field])) {
      if (!Array.isArray(this.fm[field])) {
        console.warn(
          `'${field}' is ignored, invalid data-type: '${field}'`
        );
      } else {
        for (const value of this.fm[field]) {
          if (typeof value === "string") {
            if (!values.contains(value)) {
              values.push(value);
            }
          } else {
            console.warn(
              `'${value}s.${value}' is ignored, invalid data-type: '${typeof value}'`
            );
          }
        }
      }
    }
  }
  constructor(page) {
    Assert.True(page !== void 0, "'page' is undefined");
    this.f = page.file;
    const f = this.f;
    Assert.True(f !== void 0, "'f' is undefined");
    this.fm = f.frontmatter;
    Assert.True(this.fm !== void 0, "'fm' is undefined");
    Assert.True(
      this.fm.uuid !== void 0,
      `'uuid' is undefined for '${this.f.path}'`
    );
    this.uuid = this.fm.uuid;
    this.version = this.fm.version;
    this.type = this.fm.type;
    this.createdAt = new Date(this.fm.created_at);
    this.at = this.fm.at !== void 0 ? new Date(this.fm.at) : new Date();
    this.before = this.fm.before !== void 0 ? new Date(this.fm.before) : new Date();
    this.after = this.fm.after !== void 0 ? new Date(this.fm.after) : new Date();
    this.components = [];
    this.domains = [];
    this.projects = [];
    this.contexts = [];
    this.traits = [];
    this.energy = this.fm.energy !== void 0 ? this.fm.energy : 9;
    const domains = [];
    const components = [];
    const projects = [];
    const names = [];
    const contexts = [];
    const contents = [];
    const traits = [];
    if (!Helper.nilCheck(this.fm.tags)) {
      if (!Array.isArray(this.fm.tags)) {
        console.warn("'tags' is ignored, invalid data-type");
        this.fm.tags = [];
      }
      for (const tag of this.fm.tags) {
        if (tag.slice(0, 7) === "domain/") {
          domains.push(tag.slice(7));
        } else if (tag.slice(0, 10) === "component/") {
          components.push(tag.slice(10));
        } else if (tag.slice(0, 8) === "project/") {
          projects.push(tag.slice(8));
        } else if (tag.slice(0, 5) === "name/") {
          names.push(tag.slice(5));
        } else if (tag.slice(0, 8) == "context/") {
          contexts.push(tag.slice(8));
        } else if (tag.slice(0, 8) == "content/") {
          contents.push(tag.slice(8));
        } else if (tag.slice(0, 6) == "trait/") {
          traits.push(tag.slice(6));
        }
      }
    }
    this.singular(domains, "domain");
    this.plural(domains, "domains");
    this.singular(components, "components");
    this.plural(components, "components");
    this.singular(projects, "project");
    this.plural(projects, "projects");
    this.singular(contents, "contents");
    this.plural(contents, "contents");
    this.singular(names, "name");
    this.plural(names, "names");
    this.plural(names, "alias");
    this.singular(traits, "trait");
    this.plural(traits, "traits");
    this.domains = domains;
    this.components = components;
    this.projects = projects;
    this.names = names;
    this.contexts = contexts;
    this.contents = contents;
    this.traits = traits;
  }
  getDomain(emptyDefault = true) {
    if (emptyDefault) {
      return this.domains[0];
    } else {
      return this.domains[0] === void 0 ? "unknown" : this.domains[0];
    }
  }
  getDomains() {
    return this.domains;
  }
  getTraits() {
    return this.traits;
  }
  getComponents() {
    return this.components;
  }
  getProject(emptyDefault = true) {
    if (emptyDefault) {
      return this.projects[0];
    } else {
      return this.projects[0] === void 0 ? "" : this.projects[0];
    }
  }
  getProjects() {
    return this.projects;
  }
  getName(emptyDefault = true) {
    if (emptyDefault) {
      return this.names[0];
    } else {
      return this.names[0] === void 0 ? "" : this.names[0];
    }
  }
  getContent(emptyDefault = true) {
    if (emptyDefault) {
      return this.contents[0];
    } else {
      return this.contents[0] === void 0 ? "" : this.contents[0];
    }
  }
  getNames() {
    return this.names;
  }
  getContext(emptyDefault = true) {
    if (emptyDefault) {
      return this.contexts[0];
    } else {
      return this.contexts[0] === void 0 ? "" : this.contexts[0];
    }
  }
  resolve(dv) {
    const domains = [];
    for (const domain of this.domains) {
      if (Helper.isUUID(domain)) {
        const pages = dv.pages(`"${Paths.Domains}"`).where((page) => page.file.frontmatter.uuid === domain);
        if (pages.length > 1) {
          throw new Error();
        } else if (pages.length === 1) {
          const page = pages[0];
          domains.push(page.file.frontmatter.name);
        }
      } else {
        const pages = dv.pages(`"${Paths.Domains}"`).where((page) => page.file.frontmatter.name === domain);
        if (pages.length > 1) {
          throw new Error();
        } else if (pages.length === 1) {
          const page = pages[0];
          domains.push(page.file.frontmatter.name);
        }
      }
    }
    if (domains.length !== this.domains.length) {
      console.warn(`Domain resolution failed for: ${this.domains}`);
    }
    this.domains = domains;
  }
};
var ValidationError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "ValidationError";
  }
};
var Assert = {
  True(predicate, message, strict = true) {
    if (!predicate) {
      if (strict) {
        throw new ValidationError(message);
      } else {
        console.error(message);
      }
    }
  },
  False(predicate, message, strict = false) {
    if (predicate) {
      if (strict) {
        throw new ValidationError(message);
      } else {
        console.error(message);
      }
    }
  }
};
var Helper = {
  nilCheck(val) {
    return val === void 0 || val === null;
  },
  getKeyFuck(groupBy) {
    switch (groupBy) {
      default:
      case "doneAt":
        return (entry) => entry.file.frontmatter.doneAt.toISOString().slice(0, 10);
        break;
      case "createdAt":
        return (entry) => entry.file.frontmatter.createdAt.toISOString().slice(0, 10);
        break;
      case "project":
        return (entry) => entry.file.frontmatter.project;
        break;
      case "area":
        return (entry) => entry.file.frontmatter.area;
        break;
    }
  },
  getKey(groupBy) {
    switch (groupBy) {
      default:
      case "doneAt":
        return (entry) => entry.doneAt.toISOString().slice(0, 10);
        break;
      case "createdAt":
        return (entry) => entry.createdAt.toISOString().slice(0, 10);
        break;
      case "project":
        return (entry) => entry.project;
        break;
      case "area":
        return (entry) => entry.area;
        break;
    }
  },
  numberTypeToString(val) {
    switch (val.type) {
      case Types.Fleeting:
        return "fleeting";
      case Types.Log:
        return "log";
      case Types.Project:
        return "project";
      case Types.Org:
        return "org";
      case Types.Domain:
        return "domain";
      case Types.Component:
        return "component";
      default:
        throw new Error(
          `numberTypeToString: type: "${val.type}" not implemented "${val.uuid}"`
        );
    }
  },
  roundToOneDecimal(val) {
    return Math.round(val * 10) / 10;
  },
  isChildTag(parent, child) {
    if (child.length <= parent.length + 1) {
      return false;
    } else if (child.slice(0, parent.length + 1) != `${parent}/`) {
      return false;
    }
    return true;
  },
  getField(field, defaultValue) {
    if (field === void 0 || field === null) {
      return defaultValue;
    } else {
      return field;
    }
  },
  getDate(dt) {
    if (dt === "" || dt === null) {
      return void 0;
    } else if (dt !== void 0) {
      dt = new Date(dt);
      if (isNaN(dt)) {
        return void 0;
      } else {
        return dt;
      }
    } else {
      return void 0;
    }
  },
  getTag(fm, type, emptyDefault = void 0) {
    let name2 = "";
    let defaultValue = "";
    if (type === "area") {
      name2 = Namespace.Area;
      defaultValue = Default.Area;
    } else if (type === "context") {
      name2 = Namespace.Context;
      defaultValue = Default.Context;
    } else if (type === "layer") {
      name2 = Namespace.Layer;
      defaultValue = Default.Layer;
    } else if (type === "org") {
      name2 = Namespace.Org;
      defaultValue = Default.Org;
    } else if (type === "project") {
      name2 = Namespace.Project;
      defaultValue = Default.Project;
    } else if (type == "domain") {
      name2 = "domain";
      defaultValue = "none";
    } else {
      throw new Error(`getTag got unsuported type: '${type}'`);
    }
    const len = name2.length + 1;
    const defaultTag = `${name2}/${defaultValue}`;
    let defaultRetVal = defaultTag;
    if (emptyDefault) {
      defaultRetVal = void 0;
    }
    if (fm === void 0) {
      return defaultRetVal;
    }
    const tags = fm.tags;
    if (tags === void 0 || tags.length === 0) {
      return defaultRetVal;
    }
    for (const tag of tags) {
      if (tag == defaultTag) {
        return defaultRetVal;
      }
      if (tag.length > len && tag.slice(0, len) == `${name2}/`) {
        return tag;
      }
    }
    return defaultRetVal;
  },
  getName(fm) {
    const components = Helper.getComponents(fm);
    if (components.length < 1) {
      throw new Error(`Helper.getName() ${fm}`);
    }
    let name2 = void 0;
    let occurences = 0;
    for (const component of components) {
      if (component.slice(0, 15) === "component/name/") {
        name2 = component.slice(15);
        occurences += 1;
      }
    }
    if (occurences > 1) {
      throw new Error(
        `Helper.getName() ${fm} multiple occurences of 'component/name'`
      );
    }
    if (name2 === void 0) {
      throw new Error(
        `Helper.getName() ${fm} 'component/name' undefined`
      );
    }
    return name2;
  },
  getComponents(fm) {
    const components = [];
    if (Helper.nilCheck(fm.tags)) {
      return [];
    }
    for (const tag of fm.tags) {
      if (tag.length > 10 && tag.slice(0, 10) === "component/") {
        components.push(tag);
      }
    }
    return components;
  },
  getArea(fm, emptyDefault = false) {
    return Helper.getTag(fm, "area", emptyDefault);
  },
  getContext(fm, emptyDefault = false) {
    return Helper.getTag(fm, "context", emptyDefault);
  },
  getDomain(fm, emptyDefault = false) {
    return Helper.getTag(fm, "domain", emptyDefault);
  },
  getLayer(fm, emptyDefault = false) {
    return Helper.getTag(fm, "layer", emptyDefault);
  },
  getOrg(fm, emptyDefault = false) {
    return Helper.getTag(fm, "org", emptyDefault);
  },
  getProject(fm, emptyDefault = false) {
    return Helper.getTag(fm, "project", emptyDefault);
  },
  durationStringToSec(val) {
    if (val === void 0 || val.length === 0) {
      return 0;
    }
    const mult = val.slice(-1);
    let m = 0;
    if (mult === "h") {
      m = 60 * 60;
    } else if (mult === "m") {
      m = 60;
    } else if (mult === "d") {
      m = 24 * 60 * 60;
    } else if (mult == "w") {
      m = 24 * 60 * 60 * 7;
    } else {
      console.warn(`Unhandled case val: ${val}`);
      return void 0;
    }
    return m * parseInt(val.slice(0, -1));
  },
  msecToStringDuration(val) {
    const oneHourInMsec = 36e5;
    const oneDayInMsec = 864e5;
    if (val >= 24 * oneHourInMsec) {
      return String(Helper.roundToOneDecimal(val / oneDayInMsec)).padStart(
        2,
        "0"
      ) + " d";
    } else {
      return String(Helper.roundToOneDecimal(val / oneHourInMsec)).padStart(
        2,
        "0"
      ) + " h";
    }
  },
  isUUID(val) {
    if (typeof val !== "string") {
      return false;
    }
    return val.length === 36;
  },
  sortByAge(a, b) {
    const fmA = new FrontmatterJS(a);
    const fmB = new FrontmatterJS(b);
    return fmA.createdAt.getTime() - fmB.createdAt.getTime();
  },
  sortByPriority(a, b) {
    const fmA = new FrontmatterJS(a);
    const fmB = new FrontmatterJS(b);
    return fmB.fm.priority - fmA.fm.priority;
  },
  sortByPriorityAndAge(a, b) {
    const fmA = new FrontmatterJS(a);
    const fmB = new FrontmatterJS(b);
    if (fmA.fm.priority !== fmB.fm.priority.priority) {
      return Helper.sortByPriority(a, b);
    } else {
      return Helper.sortByAge(a, b);
    }
  },
  sortByDuration(a, b) {
    const fmA = new FrontmatterJS(a);
    const fmB = new FrontmatterJS(b);
    return Helper.durationStringToSec(fmA.fm.time_estimate) - Helper.durationStringToSec(fmB.fm.time_estimate);
  },
  sortByPriorityAndDuration(a, b) {
    const fmA = new FrontmatterJS(a);
    const fmB = new FrontmatterJS(b);
    if (fmA.fm.priority !== fmB.fm.priority) {
      return Helper.sortByPriority(a, b);
    } else {
      return Helper.sortByDuration(a, b);
    }
  },
  sortByPriorityAndDurationAndAge(a, b) {
    const fmA = new FrontmatterJS(a);
    const fmB = new FrontmatterJS(b);
    if (fmA.fm.priority !== fmB.fm.priority) {
      return Helper.sortByPriority(a, b);
    } else if (fmA.fm.time_estimate !== fmB.fm.time_estimate) {
      return Helper.sortByDuration(a, b);
    } else {
      return Helper.sortByAge(a, b);
    }
  }
};
var AutoField = {
  tags(dv, fm, level = 2) {
    const tags = fm.tags;
    if (tags == void 0 || tags.length === 0) {
      return;
    }
    tags.sort();
    dv.header(level, "Tags");
    let s = "";
    for (const tag of tags) {
      s += ` #${tag}`;
    }
    dv.paragraph(s);
  },
  healmon(dv) {
    const fm = new FrontmatterJS(dv.current());
    const current = fm.createdAt.toISOString().slice(0, 10);
    const pages = dv.pages(`"${Paths.Journal}"`).where((page) => {
      const jFm = new FrontmatterJS(page);
      if (jFm.getProject() !== "homecook") {
        return false;
      }
      let jCurrent = null;
      const currentMinusOne = new Date(
        fm.createdAt.getTime() - 24 * 60 * 60 * 1e3
      );
      try {
        jCurrent = jFm.createdAt.toISOString().slice(0, 10);
      } catch (e) {
        dv.paragraph(
          `Invalid date: ${Renderer.makeLinkShortUUID(dv, page.file)}`
        );
        console.error(jFm);
      }
      if (currentMinusOne.toISOString().slice(0, 10) !== jCurrent) {
        return false;
      }
      return true;
    });
    dv.header(4, "repas (veille)");
    if (pages.length) {
      for (const page of pages) {
        dv.paragraph(Renderer.makeLinkShortUUID(dv, page.file));
      }
    }
  },
  authors(dv, fm) {
    const authors = fm.authors;
    if (authors === void 0 || authors.length === 0) {
      return;
    }
    dv.header(3, "Authors");
    dv.list(authors);
  },
  title(dv, fm) {
    const title = fm.alias;
    if (title === void 0 || title.length === 0) {
      return;
    }
    dv.header(3, title);
  },
  logs(dv, entries) {
    console.log("coucou, tu veux voir ma bite?");
    const buff = [];
    let totalTime = 0;
    for (const entry of entries) {
      const fme = entry.file.frontmatter;
      const e = [];
      let start = 0;
      let stop = 0;
      if (fme === void 0 || fme.created_at === void 0) {
        throw new Error(`Invalid frontmatter: ${fme.uuid}`);
      }
      start = new Date(fme.created_at);
      e.push(start.toISOString().slice(0, 10));
      if (fme.done_at === void 0) {
        stop = Date.now();
      } else {
        stop = new Date(fme.done_at);
      }
      totalTime += stop - start;
      e.push(
        dv.sectionLink(
          fme.uuid,
          "## Content",
          false,
          fme.uuid.slice(0, 8)
        )
      );
      e.push(Math.round((stop - start) / (1e3 * 60 * 60) * 10) / 10);
      if (fme.reviewed === void 0 || fme.reviewed === 0) {
        e.push(0);
      } else {
        e.push(fme.reviewed);
      }
      buff.push(e);
    }
    if (buff.length > 0) {
      dv.header(2, "Logs");
      dv.table(["created_at", "uuid", "session", "reviewed"], buff);
      if (totalTime > 0) {
        dv.paragraph(
          `_totalTime (h):_ ${Math.round(totalTime / (1e3 * 60 * 60) * 10) / 10}`
        );
      }
    }
  },
  media(dv) {
    const current = dv.current();
    const fm = current.file.frontmatter;
    const pages = dv.pages(`"${Paths.Refs}/${fm.ref_id}"`).array();
    if (pages.length !== 1) {
      return;
    }
    const media = pages[0];
    const mediaFm = media.file.frontmatter;
    AutoField.title(dv, mediaFm);
    dv.paragraph(Renderer.makeLinkAlias(dv, media.file));
    AutoField.authors(dv, mediaFm);
    AutoField.tags(dv, mediaFm, 3);
    const logEntries = dv.pages(`"${Paths.Logs}/${fm.uuid}"`).where((p) => p.type === 6).sort((k) => k.created_at, "desc");
    AutoField.logs(dv, logEntries);
  },
  autoFieldTitle(dv, fm) {
    const title = fm.alias;
    if (title == void 0) {
      return;
    }
    dv.header(1, title);
  },
  autoFieldAuthors(dv, fm) {
    const authors = fm.authors;
    if (authors === void 0 || authors.length === 0) {
      return;
    }
    dv.header(2, "Authors");
    dv.list(authors);
  },
  autoFieldTags(dv, fm) {
    const tags = fm.tags;
    if (tags == void 0 || tags.length === 0) {
      return;
    }
    tags.sort();
    dv.header(2, "Tags");
    let s = "";
    for (const tag of tags) {
      s += ` #${tag}`;
    }
    dv.paragraph(s);
  },
  literature(dv) {
    const current = dv.current();
    const fm = current.file.frontmatter;
    if (fm === void 0) {
      return;
    }
    if (Helper.nilCheck(fm.authors)) {
    } else {
      this.autoFieldTitle(dv, fm);
      this.autoFieldAuthors(dv, fm);
      this.autoFieldTags(dv, fm);
    }
  },
  goal(dv) {
    const current = dv.current();
    const fm = current.file.frontmatter;
    if (fm === void 0) {
      console.warn("fm is required");
      return;
    }
    const created_at = new Date(fm.created_at);
    const logEntries = dv.pages(`"${Paths.Logs}/${fm.uuid}"`).where((p) => p.type === 6).sort((k) => k.created_at, "desc");
    const buff = [];
    for (const entry of logEntries) {
      const fme = entry.file.frontmatter;
      const e = [];
      if (fme === void 0 || fme.created_at === void 0) {
        throw new Error(`Invalid frontmatter: ${fme.uuid}`);
      }
      const start = new Date(fme.created_at);
      e.push(start.toISOString().slice(0, 10));
      e.push(
        dv.sectionLink(
          fme.uuid,
          "## Content",
          false,
          fme.uuid.slice(0, 8)
        )
      );
      buff.push(e);
    }
    const before = new Date(fm.before);
    const timeframe = (before.getTime() - created_at.getTime()) / (1e3 * 3600 * 24);
    let timeframeText = "";
    dv.header(3, "Timeframe");
    if (timeframe > 0 && timeframe < 30) {
      timeframeText = "runaway";
    } else if (timeframe < 60) {
      timeframeText = "10,000 feet";
    } else if (timeframe < 360) {
      timeframeText = "20,000 feet";
    } else if (timeframe < 720) {
      timeframeText = "30,000 feet";
    } else if (timeframe < 1080) {
      timeframeText = "40,000 feet";
    } else {
      timeframeText = "50,000 feet";
    }
    dv.paragraph(timeframeText);
    if (buff.length > 0) {
      dv.header(2, "Reviews");
      dv.table(["reviewed_at", "uuid"], buff);
    }
  },
  daily(dv) {
    const current = dv.current().file.frontmatter;
    const currentAt = new Date(current.at);
    const currentAtShort = currentAt.toISOString().slice(0, 7);
    const gonext = app.plugins.plugins.obsidian_gonext;
    const noteHelper = new NoteHelper(gonext, dv, new Frontmatter(gonext));
    const pages = dv.pages(`"${Paths.Tasks}"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (current.uuid === fm.uuid) {
        return false;
      }
      if (fm.fm.status !== "todo" || fm.getProject() === "daily") {
        return false;
      }
      const now = currentAt;
      let fmAtShort = void 0;
      try {
        fmAtShort = fm.at.toISOString().slice(0, 10);
      } catch (e) {
        throw new Error(`${fm.uuid}`);
      }
      if (!noteHelper.isDoable(page, currentAt)) {
        return false;
      }
      if (page.file.frontmatter.at !== void 0 && fmAtShort === currentAtShort) {
        return true;
      }
      if (page.file.frontmatter.at !== void 0 && fm.at.getTime() < now.getTime()) {
        return true;
      }
      if (page.file.frontmatter.before !== void 0 && fm.before.getTime() > now.getTime()) {
        return true;
      }
      if (page.file.frontmatter.after !== void 0 && fm.after.getTime() < now.getTime()) {
        return true;
      }
      return false;
    }).sort((k) => k.at, "asc");
    if (pages.length > 0) {
      const buff = [];
      for (const page of pages) {
        const fm = new FrontmatterJS(page);
        const h = String(fm.at.getHours()).padStart(2, "0");
        const m = String(fm.at.getMinutes()).padStart(2, "0");
        if (page.file.frontmatter.status === "done") {
          buff.push([
            `~~${Renderer.makeLinkShortUUID(dv, page.file, "Task")}~~`,
            `~~${h}:${m}~~`
          ]);
        } else {
          buff.push([
            `${Renderer.makeLinkShortUUID(dv, page.file, "Task")}`,
            `${h}:${m}`
          ]);
        }
      }
      dv.table(["uuid", "at"], buff);
    }
    AutoField.dailyJoural(dv);
  },
  monthlyJoural(dv) {
    const current = new FrontmatterJS(dv.current());
    const currentAtShort = current.at.toISOString().slice(0, 7);
    const pages = dv.pages(`"Journal"`).where((page) => {
      const fm = new FrontmatterJS(page);
      const atShort = fm.createdAt.toISOString().slice(0, 7);
      if (atShort === currentAtShort && fm.getProject() === "monthly") {
        return true;
      }
      return false;
    }).sort((k) => k.created_at, "asc");
    dv.header(2, "Journal");
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      if (page.file.frontmatter.alias !== void 0) {
        page.file.frontmatter.name = page.file.frontmatter.alias;
      } else if (fm.getProject() !== void 0) {
        page.file.frontmatter.name = fm.getProject();
      } else if (fm.getDomain() !== void 0) {
        page.file.frontmatter.name = fm.getDomain();
      }
      dv.paragraph(Renderer.makeLinkName(dv, page.file));
    }
  },
  dailyJoural(dv) {
    const current = new FrontmatterJS(dv.current());
    const currentAtShort = current.at.toISOString().slice(0, 10);
    console.log(currentAtShort);
    const pages = dv.pages(`"Journal"`).where((page) => {
      const fm = new FrontmatterJS(page);
      const atShort = fm.createdAt.toISOString().slice(0, 10);
      if (atShort === currentAtShort) {
        return true;
      }
      return false;
    }).sort((k) => k.created_at, "asc");
    dv.header(2, "Journal");
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      if (page.file.frontmatter.alias !== void 0) {
        page.file.frontmatter.name = page.file.frontmatter.alias;
      } else if (fm.getProject() !== void 0) {
        page.file.frontmatter.name = fm.getProject();
      } else if (fm.getDomain() !== void 0) {
        page.file.frontmatter.name = fm.getDomain();
      }
      dv.paragraph(Renderer.makeLinkName(dv, page.file));
    }
  },
  dailyGoals(dv) {
    const current = dv.current().file.frontmatter;
    const currentAt = new Date(current.at);
    const pages = dv.pages(`"${Paths.Goals}"`).where((page) => {
      if (page.file.frontmatter.status !== "active") {
        return false;
      } else {
        return true;
      }
    }).sort((k) => k.at, "asc");
    if (pages.length === 0) {
      return;
    }
    for (const page of pages) {
      dv.paragraph(Renderer.makeLinkShortUUID(dv, page.file));
    }
  },
  task(dv) {
    const dvLib = new DvLib();
    dvLib.autoFieldTask(dv);
  },
  log(dv) {
    const current = dv.current();
    const curFm = new FrontmatterJS(current);
    const currentId = curFm.uuid;
    const currentParentId = current.file.path.split("/")[1];
    Assert.True(
      currentParentId !== void 0,
      `currentParentId undefined for ${curFm.uuid}`
    );
    const pages = dv.pages(`"${Paths.Logs}"`).where((page) => {
      const fm = new FrontmatterJS(page);
      const parentId = page.file.path.split("/")[1];
      Assert.True(
        parentId !== void 0,
        `parentId undefined for ${fm.uuid}`
      );
      if (parentId !== currentParentId) {
        return false;
      }
      return true;
    }).sort((k) => k.created_at, "asc");
    for (let i = 0; i < pages.length; i++) {
      const page = pages[i];
      Assert.True(page !== void 0, "ass ert failed");
      const fm = new FrontmatterJS(page);
      if (fm.uuid === currentId) {
        if (i === 0) {
          const dvLib = new DvLib();
          dvLib.autoFieldLog(dv);
        } else {
          dv.paragraph(Renderer.makeLinkShortUUID(dv, pages[i - 1].file));
        }
      }
    }
  }
};
var Renderer = {
  makeLinkName(dv, f, anchor = "Content") {
    if (Helper.nilCheck(f.frontmatter.name)) {
      return Renderer.makeLinkShortUUID(dv, f, anchor);
    }
    return dv.sectionLink(f.path, anchor, false, `${f.frontmatter.name}`);
  },
  makeLinkAlias(dv, f, anchor = "Content") {
    if (Helper.nilCheck(f.frontmatter.alias)) {
      return Renderer.makeLinkShortUUID(dv, f, anchor);
    }
    return dv.sectionLink(f.path, anchor, false, `${f.frontmatter.alias}`);
  },
  makeLinkShortUUID(dv, f, anchor = "Content") {
    return dv.sectionLink(
      f.path,
      anchor,
      false,
      `${f.frontmatter.uuid.slice(0, 8)}`
    );
  },
  makeLink(dv, f, name2 = void 0, anchor = "Content") {
    return dv.sectionLink(f.path, anchor, false, name2);
  },
  projectLogs(dv, data) {
    const cols = ["type", "task_id", "log_id", "took", "reviewed"];
    const buff = [];
    let totalTime = 0;
    for (const d of data) {
      const f = d.file;
      const fm = d.file.frontmatter;
      Assert.True(
        !Helper.nilCheck(fm.uuid),
        `"uuid" id not defined for: ${f.path}`
      );
      Assert.True(
        !Helper.nilCheck(fm.type),
        `"type" id not defined for: ${f.path}`
      );
      const createdAt = new Date(fm.created_at);
      const doneAt = new Date(fm.done_at);
      const delta = doneAt.getTime() - createdAt.getTime();
      totalTime += delta;
      const record = {
        taskId: "",
        logId: Renderer.makeLinkAlias(dv, f),
        took: Math.round(delta / (1e3 * 60 * 60) * 10) / 10,
        reviewed: Helper.nilCheck(fm.reviewed) ? 0 : fm.reviewed,
        type: void 0
      };
      const pages = dv.pages(`"${Paths.Tasks}/${fm.parent_id}"`).array();
      if (pages.length !== 1) {
        throw new Error(
          `parent task with id: "${fm.parent_id}" does not exists`
        );
      }
      const parent = pages[0];
      switch (parent.file.frontmatter.type) {
        case Types.Task:
          record.type = `<font color=8B0000>task</font>`;
          record.taskId = Renderer.makeLinkShortUUID(
            dv,
            parent.file,
            "Task"
          );
          break;
        case Types.Media:
          record.type = `<font color=00008B>media</font>`;
          record.taskId = Renderer.makeLinkShortUUID(
            dv,
            parent.file,
            "Content"
          );
          break;
        case Types.Praxis:
          record.type = `<font color=FF8C00>praxis</font>`;
          record.taskId = Renderer.makeLinkShortUUID(
            dv,
            parent.file,
            "Content"
          );
          break;
        case Types.Provision:
          record.type = `<font color=DC143C>provision</font>`;
          record.taskId = Renderer.makeLinkShortUUID(
            dv,
            parent.file,
            "Content"
          );
          break;
        default:
          throw new Error(
            `Renderer.projectLogs: type "${parent.file.frontmatter.type}" not implemented`
          );
      }
      buff.push([
        record.type,
        record.taskId,
        record.logId,
        record.took,
        record.reviewed
      ]);
    }
    dv.table(cols, buff);
  },
  goal(dv, data) {
    const buff = [];
    for (const fm of data) {
      const created_at = fm.createdAt;
      const logEntries = dv.pages(`"${Paths.Logs}/${fm.uuid}"`).where((p) => p.type === 6).sort((k) => k.created_at, "desc");
      const before = new Date(fm.fm.before);
      const timeframe = (before.getTime() - created_at.getTime()) / (1e3 * 3600 * 24);
      let timeframeText = "";
      if (timeframe > 0 && timeframe < 30) {
        timeframeText = "runaway";
      } else if (timeframe < 60) {
        timeframeText = "10,000 feet";
      } else if (timeframe < 360) {
        timeframeText = "20,000 feet";
      } else if (timeframe < 720) {
        timeframeText = "30,000 feet";
      } else if (timeframe < 1080) {
        timeframeText = "40,000 feet";
      } else {
        timeframeText = "50,000 feet";
      }
      buff.push([
        before.toISOString().slice(0, 10),
        dv.sectionLink(
          fm.uuid,
          "## Content",
          false,
          fm.uuid.slice(0, 8)
        ),
        fm.getDomain(),
        timeframeText
      ]);
    }
    dv.table(["deadline", "uuid", "domain", "timeframe"], buff);
  },
  inboxEntry(dv, data) {
    const cols = [
      "uuid",
      // "type",
      // "age",
      // "size",
      "name"
      // "project",
      // "domain",
      // "components",
    ];
    const buff = [];
    for (const d of data) {
      const f = d.file;
      const fm = d.file.frontmatter;
      Assert.True(
        !Helper.nilCheck(fm.uuid),
        `"uuid" id not defined for: ${f.path}`
      );
      Assert.True(
        !Helper.nilCheck(fm.type),
        `"type" id not defined for: ${f.path}`
      );
      const now = new Date();
      const delta = now.getTime() - fm.createdAt.getTime();
      const since = Helper.msecToStringDuration(delta);
      let name2 = "";
      if (fm.domain !== "domain/undefined") {
        name2 = fm.domain;
      } else if (fm.project !== void 0) {
        name2 = fm.project;
      } else {
        name2 = "\\-";
      }
      const record = {
        uuid: Helper.numberTypeToString(fm) === "fleeting" ? `&#128196 ${Renderer.makeLinkAlias(dv, f)}` : Renderer.makeLinkAlias(dv, f),
        // uuid: `&#9728 ${Renderer.makeLinkAlias(dv, f)}`,
        type: Helper.numberTypeToString(fm),
        since: `${since}`,
        size: f.size,
        project: fm.project === void 0 ? "\\-" : fm.project.slice(8),
        domain: fm.domain === void 0 ? "\\-" : fm.domain.slice(7),
        //Renderer.domainBase(dv, fm.domain),
        name: name2
      };
      if (record.type === "log") {
        const pages = dv.pages(`"${Paths.Tasks}/${fm.parent_id}"`).array();
        if (pages.length !== 1) {
          throw new Error(`${fm.parent_id} ${fm.id}`);
        }
        const parent = pages[0];
        switch (parent.type) {
          case Types.Task:
            record.uuid = `&#128211 ${record.uuid}`;
            record.type = `<font color=8B0000>task</font>`;
            break;
          case Types.Praxis:
            record.uuid = `&#128188 ${record.uuid}`;
            record.type = `<font color=FF8C00>praxis</font>`;
            break;
          case Types.Media:
            record.uuid = `&#128191 ${record.uuid}`;
            record.type = `<font color=00008B>media</font>`;
            break;
          case Types.Provision:
            record.type = `<font color=DC143C>provision</font>`;
            break;
          default:
            break;
        }
      }
      buff.push([
        record.uuid,
        // record.type,
        // record.since,
        // record.size,
        record.name
        // record.project,
        // record.domain,
      ]);
    }
    dv.table(cols, buff);
  },
  resourceBase(dv, data) {
    const cols = ["uuid"];
    const buff = [];
    for (const d of data) {
      const f = d.file;
      const fm = d.file.frontmatter;
      Assert.True(
        !Helper.nilCheck(fm.uuid),
        `"uuid" id not defined for: ${f.path}`
      );
      buff.push([Renderer.makeLinkAlias(dv, f)]);
    }
    dv.table(cols, buff);
  },
  basicRelation(dv, data) {
    const cols = ["uuid", "name"];
    const buff = [];
    for (const d of data) {
      const f = d.file;
      const fm = d.file.frontmatter;
      Assert.True(
        !Helper.nilCheck(fm.uuid),
        `"uuid" id not defined for: ${f.path}`
      );
      buff.push([Renderer.makeLinkAlias(dv, f), fm.name]);
    }
    dv.table(cols, buff);
  },
  praxisBase(dv, data) {
    const buff = [];
    const cols = ["tasks", "uuid", "estimate"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      buff.push([
        dv.markdownTaskList(f.tasks),
        dv.fileLink(f.path, false, f.name.slice(0, 8)),
        fm.time_estimate
      ]);
    }
    dv.table(cols, buff);
  },
  waitingTask(dv, data) {
    const buff = [];
    const cols = ["tasks", "uuid", "estimate", "cause"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      buff.push([
        dv.markdownTaskList(f.tasks),
        dv.fileLink(f.path, false, f.name.slice(0, 8)),
        fm.time_estimate,
        fm.cause
      ]);
    }
    dv.table(cols, buff);
  },
  readyTask(dv, data) {
    const buff = [];
    const cols = ["uuid", "task", "estimate", "area"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      buff.push([
        Renderer.makeLinkAlias(dv, f, "Task"),
        dv.markdownTaskList(f.tasks),
        fm.time_estimate,
        Helper.getField(Helper.getArea(fm, true), "\\-")
      ]);
    }
    dv.table(cols, buff);
  },
  provisionBase(dv, data) {
    const buff = [];
    const cols = ["uuid", "supplier", "content", "estimate"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      buff.push([
        dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
        fm.supplier,
        dv.markdownTaskList(f.tasks),
        fm.time_estimate
      ]);
    }
    dv.table(cols, buff);
  },
  basicTaskJournalNextAction(dv, data) {
    const buff = [];
    const cols = ["uuid", "priority", "estimate", "tasks"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      const domain = Helper.getDomain(fm, true) === void 0 ? "\\-" : Helper.getDomain(fm);
      if (fm.ref_id === void 0) {
        buff.push([
          // journal.contains(fm.uuid) ? "->" : "\\-",
          dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
          fm.priority,
          fm.time_estimate,
          dv.markdownTaskList(f.tasks)
        ]);
      } else {
        const ref = dv.pages(`"${Paths.Refs}/${fm.ref_id}"`).array();
        if (ref.length === 0) {
          throw new Error(
            `task: '${fm.uuid}' has an undefined ref_id: '${fm.ref_id}'`
          );
        } else {
          buff.push([
            dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
            Renderer.makeLinkAlias(dv, ref[0].file),
            fm.time_estimate,
            domain
          ]);
        }
      }
    }
    dv.table(cols, buff);
  },
  basicTaskJournalWaiting(dv, data) {
    const buff = [];
    const cols = ["uuid", "cause", "tasks"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      const domain = Helper.getDomain(fm, true) === void 0 ? "\\-" : Helper.getDomain(fm);
      if (fm.ref_id === void 0) {
        buff.push([
          // journal.contains(fm.uuid) ? "->" : "\\-",
          dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
          d.cause,
          dv.markdownTaskList(f.tasks)
        ]);
      } else {
        const ref = dv.pages(`"${Paths.Refs}/${fm.ref_id}"`).array();
        if (ref.length === 0) {
          throw new Error(
            `task: '${fm.uuid}' has an undefined ref_id: '${fm.ref_id}'`
          );
        } else {
          buff.push([
            dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
            Renderer.makeLinkAlias(dv, ref[0].file),
            fm.time_estimate,
            domain
          ]);
        }
      }
    }
    dv.table(cols, buff);
  },
  basicTaskJournal(dv, data) {
    const buff = [];
    const cols = ["uuid", "tasks", "estimate"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      const domain = Helper.getDomain(fm, true) === void 0 ? "\\-" : Helper.getDomain(fm);
      if (fm.ref_id === void 0) {
        buff.push([
          // journal.contains(fm.uuid) ? "->" : "\\-",
          dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
          dv.markdownTaskList(f.tasks),
          fm.time_estimate
        ]);
      } else {
        const ref = dv.pages(`"${Paths.Refs}/${fm.ref_id}"`).array();
        if (ref.length === 0) {
          throw new Error(
            `task: '${fm.uuid}' has an undefined ref_id: '${fm.ref_id}'`
          );
        } else {
          buff.push([
            dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
            Renderer.makeLinkAlias(dv, ref[0].file),
            fm.time_estimate,
            domain
          ]);
        }
      }
    }
    dv.table(cols, buff);
  },
  activeTask(dv, data) {
    const buff = [];
    const cols = ["uuid", "tasks", "session"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      const logs = dv.pages(`"${Paths.Logs}/${fm.uuid}"`).where((p) => p.type === 6).sort((k) => k.created_at, "desc");
      const last = logs[0];
      const createdAt = new Date(last.created_at);
      const now = new Date();
      buff.push([
        dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
        dv.markdownTaskList(f.tasks),
        ((t) => {
          return Math.round(t / (3600 * 1e3) * 10) / 10;
        })(now.getTime() - createdAt.getTime())
      ]);
    }
    dv.table(cols, buff);
  },
  basicTask(dv, data) {
    const buff = [];
    const cols = ["uuid", "tasks", "estimate", "domain"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      const domain = Helper.getDomain(fm, true) === void 0 ? "\\-" : Helper.getDomain(fm);
      if (fm.ref_id === void 0) {
        buff.push([
          dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
          dv.markdownTaskList(f.tasks),
          fm.time_estimate,
          domain
        ]);
      } else {
        const ref = dv.pages(`"${Paths.Refs}/${fm.ref_id}"`).array();
        if (ref.length === 0) {
          throw new Error(
            `task: '${fm.uuid}' has an undefined ref_id: '${fm.ref_id}'`
          );
        } else {
          buff.push([
            dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
            Renderer.makeLinkAlias(dv, ref[0].file),
            fm.time_estimate,
            domain
          ]);
        }
      }
    }
    dv.table(cols, buff);
  },
  logs(dv, entries) {
    const buff = [];
    let totalTime = 0;
    for (const entry of entries) {
      const fme = entry.file.frontmatter;
      const e = [];
      let start = 0;
      let stop = 0;
      if (fme === void 0 || fme.created_at === void 0) {
        throw new Error(`Invalid frontmatter: ${fme.uuid}`);
      }
      start = new Date(fme.created_at);
      e.push(start.toISOString().slice(0, 10));
      if (fme.done_at === void 0) {
        stop = Date.now();
      } else {
        stop = new Date(fme.done_at);
      }
      totalTime += stop - start;
      e.push(
        dv.sectionLink(
          fme.uuid,
          "## Content",
          false,
          fme.uuid.slice(0, 8)
        )
      );
      e.push(Math.round((stop - start) / (1e3 * 60 * 60) * 10) / 10);
      if (fme.reviewed === void 0 || fme.reviewed === 0) {
        e.push(0);
      } else {
        e.push(fme.reviewed);
      }
      buff.push(e);
    }
    if (buff.length > 0) {
      dv.header(2, "Logs");
      dv.table(["created_at", "uuid", "session", "reviewed"], buff);
      if (totalTime > 0) {
        dv.paragraph(
          `_totalTime (h):_ ${Math.round(totalTime / (1e3 * 60 * 60) * 10) / 10}`
        );
      }
    }
  },
  mediaWithLogs(dv, data) {
    const buff = [];
    const cols = ["uuid", "tasks", "estimate", "current", "domain"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      const ref = dv.pages(`"${Paths.Refs}/${fm.ref_id}"`).array();
      if (ref.length === 0) {
        throw new Error(
          `task: '${fm.uuid}' has an undefined ref_id: '${fm.ref_id}'`
        );
      }
      const domain = Helper.getDomain(fm, true) === void 0 ? "\\-" : Helper.getDomain(fm);
      const logEntries = dv.pages(`"${Paths.Logs}/${fm.uuid}"`).where((p) => p.type === Types.Log).sort((k) => k.created_at, "desc");
      let totalTime = 0;
      for (const entry of logEntries) {
        const fme = entry.file.frontmatter;
        const e = [];
        let start = 0;
        let stop = 0;
        if (fme === void 0 || fme.created_at === void 0) {
          throw new Error(`Invalid frontmatter: ${fme.uuid}`);
        }
        start = new Date(fme.created_at);
        try {
          e.push(start.toISOString().slice(0, 10));
        } catch (e2) {
          console.error(entry.uuid);
        }
        if (fme.done_at === void 0) {
          stop = Date.now();
        } else {
          stop = new Date(fme.done_at);
        }
        totalTime += stop - start;
      }
      buff.push([
        dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
        Renderer.makeLinkAlias(dv, ref[0].file),
        fm.time_estimate,
        `${Math.round(totalTime / (1e3 * 60 * 60) * 10) / 10}h`,
        domain
      ]);
    }
    dv.table(cols, buff);
  },
  taskDoneWithLogs(dv, data) {
    const buff = [];
    const cols = [
      "taskId",
      "logId",
      "createdAt",
      "doneAt",
      "timeEstimate",
      "took",
      "project"
    ];
    for (const d of data) {
      const f = d.file;
      const fm = d.file.frontmatter;
      const createdAt = new Date(fm.created_at);
      const doneAt = new Date(fm.done_at);
      const timeEstimate = "";
      const took = (doneAt - createdAt) / (1e3 * 3600);
      const pages = dv.pages(`"${Paths.Tasks}"`).where((page) => page.file.frontmatter.uuid === fm.parent_id);
      if (pages.length !== 1) {
        throw new Error();
      }
      const parent = pages[0];
      const parentFm = parent.file.frontmatter;
      const parentF = parent.file;
      buff.push([
        Renderer.makeLinkShortUUID(dv, parent.file, "Task"),
        Renderer.makeLinkShortUUID(dv, f),
        createdAt.toISOString().slice(0, 10),
        doneAt.toISOString().slice(0, 10),
        timeEstimate,
        ((t) => {
          return Math.round(t * 10) / 10;
        })(took),
        Helper.getProject(parentFm)
      ]);
    }
    dv.table(cols, buff);
  },
  projects(dv, pages) {
    const cols = ["name"];
    const buff = [];
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      buff.push([Renderer.makeLink(dv, page.file, fm.getName())]);
    }
    dv.table(cols, buff);
  },
  basicDoneTaskWithLogs(dv, data) {
    const cols = [
      "uuid",
      "createdAt",
      "doneAt",
      "timeEstimate",
      "took",
      "delta",
      "project",
      "area"
    ];
    dv.table(cols, data);
  },
  basicDoneTaskWithoutLogs(dv, data) {
    const cols = ["taskId", "createdAt", "project", "area"];
    dv.table(cols, data);
  },
  basicProgressedTaskWithLog(dv, data) {
    const cols = [
      "taskId",
      "logId",
      // "createdAt",
      // "doneAt",
      "took",
      // "tookAcc",
      "project"
      // "domain",
    ];
    dv.table(cols, data);
  },
  // dailyTask(dv, data) {
  // 	Renderer.makeLinkShortUUID(this.dv, page.file),
  // 	dv.
  // 				rs.push([
  // 					"paragraph",
  // 					Renderer.makeLinkShortUUID(this.dv, page.file),
  // 				]);
  // }
  do(dv, rs) {
    for (const row of rs) {
      switch (row[0]) {
        case "header":
          const [, level, heading] = row;
          dv.header(level, heading);
          break;
        case "paragraph":
          const [, text] = row;
          dv.paragraph(text);
          break;
        case "array":
          const [, renderer, data] = row;
          renderer(dv, data);
          break;
        case "stats":
          const [, name2, unit, value] = row;
          dv.paragraph(`${name2} (${unit}): ${value}`);
          break;
        default:
          throw new Error(`Unsuported opcode: "fuckoff"`);
      }
    }
  }
};
var Frontmatter = class {
  constructor(gonext) {
    this.gonext = gonext;
  }
  projectParseMeta(dv) {
    const current = dv.current();
    const projectName = current.file.folder.slice(
      Paths.Projects.length + 1
    );
    const projectDir = current.file.folder;
    if (projectName.contains("/")) {
      throw new Error(
        `projectDir: ${projectDir} folder: ${current.file.folder}`
      );
    }
    const pages = dv.pages(`"${projectDir}/meta"`).array();
    if (pages.length !== 1) {
      throw new Error(`len: ${pages.length}`);
    }
    const fm = pages[0].file.frontmatter;
    const uuid = fm.uuid;
    if (Helper.nilCheck(uuid)) {
      throw new Error(`project 'uuid' is not defined`);
    }
    const name2 = fm.name;
    if (Helper.nilCheck(name2)) {
      throw new Error(`'name' is not defined`);
    }
    const domains = fm.domains;
    if (!Array.isArray(domains)) {
      throw new Error(`'domains' must be of array type`);
    }
    return {
      uuid,
      name: name2,
      domains
    };
  }
  getCreatedAt(f) {
    return Helper.nilCheck(f.frontmatter.created_at) ? new Date(f.ctime.ts) : new Date(f.frontmatter.created_at);
  }
  getCurrentFrontmatter() {
    const file = this.gonext.workspace.getActiveFile();
    const fileContent = this.gonext.metadataCache.getFileCache(file);
    if (fileContent === void 0) {
      return void 0;
    }
    const fm = fileContent.frontmatter;
    if (fm === void 0) {
      return void 0;
    }
    return fm;
  }
  parseListByNamespace(fm) {
    const byAreas = fm.by_areas === void 0 ? [] : fm.by_areas;
    const byContexts = fm.by_contexts === void 0 ? [] : fm.by_contexts;
    const byLayers = fm.by_layers === void 0 ? [] : fm.by_layers;
    const byOrgs = fm.by_orgs === void 0 ? [] : fm.by_orgs;
    const byProjects = fm.by_projects === void 0 ? [] : fm.by_projects;
    return [byAreas, byContexts, byLayers, byOrgs, byProjects];
  }
  parseListBeforeAfter(fm) {
    const before = Helper.getDate(fm.before);
    const after = Helper.getDate(fm.after);
    return [before, after];
  }
  parseListFilterBy(fm) {
    if (fm === void 0) {
      return [];
    }
    const filterBy = fm.filter_by;
    if (!Array.isArray(filterBy)) {
      return [];
    }
    return filterBy;
  }
  parseListGroupBy(fm) {
    if (fm === void 0) {
      return "";
    }
    const groupBy = fm.group_by;
    if (!(typeof groupBy === "undefined") && !(typeof groupBy === "string")) {
      return "";
    }
    return groupBy;
  }
  parseAllProgressedTasks() {
    const fm = this.getCurrentFrontmatter();
    if (fm === void 0) {
      throw new Error(`Invalid frontmatter, cannot proceed`);
    }
    const groupBy = this.parseListGroupBy(fm);
    const filterBy = this.parseListFilterBy(fm);
    const [before, after] = this.parseListBeforeAfter(fm);
    return [groupBy, filterBy, before, after];
  }
  parseAllDoneTasks() {
    return this.parseAllProgressedTasks();
  }
  parseAllDoneTaskWithoutLog() {
    return this.parseAllProgressedTasks();
  }
  parseAllTodoAdHoc() {
    const fm = this.getCurrentFrontmatter();
    if (fm === void 0) {
      throw new Error(`Invalid frontmatter, cannot proceed`);
    }
    const groupBy = this.parseListGroupBy(fm);
    const filterBy = this.parseListFilterBy(fm);
    const [before, after] = this.parseListBeforeAfter(fm);
    const minPriority = Helper.getField(fm.min_priority, 0);
    return [groupBy, filterBy, before, after, minPriority];
  }
  parseInbox() {
    const fm = this.getCurrentFrontmatter();
    if (fm === void 0) {
      return [[], [], 0, 4294967295];
    }
    const source = Helper.nilCheck(fm.source) ? ["logs", "fleeting"] : fm.source;
    const groupBy = Helper.nilCheck(fm.group_by) ? "none" : fm.group_by;
    const filterBy = this.parseListFilterBy(fm);
    const minSize = Helper.nilCheck(fm.min_size) ? 0 : fm.min_size;
    const maxSize = Helper.nilCheck(fm.max_size) ? 4294967295 : fm.max_size;
    return [source, groupBy, filterBy, minSize, maxSize];
  }
  parseTodoList() {
    const fm = this.getCurrentFrontmatter();
    if (fm === void 0) {
      return [[], [], [], [], [], 0];
    }
    const [byAreas, byContexts, byLayers, byOrgs, byProjects] = this.parseListByNamespace(fm);
    const minPriority = Helper.getField(fm.min_priority, 0);
    return [byAreas, byContexts, byLayers, byOrgs, byProjects, minPriority];
  }
  parseDoneList() {
    const fm = this.getCurrentFrontmatter();
    if (fm === void 0) {
      return [[], [], [], [], [], [], []];
    }
    const [byAreas, byContexts, byLayers, byOrgs, byProjects] = this.parseListByNamespace(fm);
    const [before, after] = this.parseListBeforeAfter(fm);
    const fields = Helper.getField(fm.fields, []);
    const stats = Helper.getField(fm.stats, []);
    return [
      byAreas,
      byContexts,
      byLayers,
      byOrgs,
      byProjects,
      fields,
      stats,
      before,
      after
    ];
  }
};
var NoteHelper = class {
  constructor(gonext, dv, frontmatter) {
    this.gonext = gonext;
    this.dv = dv;
    this.frontmatter = frontmatter;
  }
  isDoable(task, at = void 0) {
    const fm = task.file.frontmatter;
    if (fm.status !== Status.Todo) {
      return false;
    }
    if (fm.after !== void 0) {
      const after = new Date(fm.after);
      if (Date.now() <= after.getTime()) {
        return false;
      }
    }
    if (at !== void 0) {
      const fmAt = new Date(fm.at);
      fmAt.setHours(0);
      fmAt.setMinutes(0);
      fmAt.setSeconds(0);
      if (at.getTime() < fmAt.getTime()) {
        return false;
      }
    } else {
      if (fm.at !== void 0) {
        const at2 = new Date(fm.at);
        if (Date.now() <= at2.getTime()) {
          return false;
        }
      }
    }
    const deps = fm.needs;
    if (deps === void 0 || deps.length === 0) {
      return true;
    }
    if (this.hasPendingDependencies(deps)) {
      return false;
    }
    return true;
  }
  hasPendingDependencies(deps) {
    for (const dep of deps) {
      const task = this.dv.pages(`"${Paths.Tasks}/${dep}"`).array();
      if (task.length === 0) {
        console.warn(
          `hasPendingDependencies: "${Paths.Tasks}/${dep}" task does not exists`
        );
        continue;
      }
      const fm = task[0].file.frontmatter;
      if (fm.type !== Types.Task && fm.type !== Types.Provision && fm.type !== Types.Praxis) {
        continue;
      }
      if (fm.status === Status.Todo) {
        return true;
      }
    }
    return false;
  }
  isChildTag(parent, child) {
    if (child.length <= parent.length + 1) {
      return false;
    } else if (child.slice(0, parent.length + 1) != `${parent}/`) {
      return false;
    }
    return true;
  }
  getNamespaceContent(ns) {
    const children = [];
    const pages = this.dv.pages(`#${ns}`);
    for (const p of pages) {
      const tags = p.file.frontmatter.tags;
      if (tags === void 0 || tags.length === 0) {
        continue;
      }
      for (const tag of tags) {
        if (this.isChildTag(ns, tag)) {
          const t = tag.slice(ns.length + 1);
          if (!children.contains(t)) {
            children.push(t);
          }
        }
      }
    }
    return children;
  }
  isLastRevision(page) {
    const revisionList = (dv, root, current) => {
      let head = current;
      while (true) {
        const pages = dv.pages(`"${root}"`).where(
          (page2) => page2.file.frontmatter.next === head.file.frontmatter.uuid
        );
        if (pages.length > 1) {
          throw new Error();
        } else if (pages.length === 0) {
          break;
        }
        head = pages[0];
      }
      const buff = [];
      let cur = head;
      while (true) {
        buff.push(cur);
        const fm2 = cur.file.frontmatter;
        if (fm2.next === void 0) {
          break;
        }
        const pages = dv.pages(`"${root}/${fm2.next}"`);
        if (pages.length === 0) {
          break;
        }
        cur = pages[0];
      }
      return buff;
    };
    const note = page;
    const fm = note.file.frontmatter;
    let revisions = [];
    switch (fm.type) {
      case Types.Permanent:
        revisions = revisionList(this.dv, Paths.Slipbox, note);
        break;
      case Types.Resource:
        revisions = revisionList(this.dv, Paths.Resources, note);
        break;
      default:
        throw new Error();
    }
    if (revisions.length <= 1) {
      return true;
    }
    return revisions[0].file.frontmatter.uuid === fm.uuid;
  }
};
var Generator = class {
  constructor(app2) {
    this.app = app2;
    this.dv = app2.dv;
    this.gonext = app2.gonext;
  }
  journalDaily() {
    const now = new Date();
    const nowDate = now.toISOString().slice(0, 10);
    const pages = this.dv.pages(`"${Paths.Journal}"`).where((page) => {
      const fmp = new FrontmatterJS(page);
      if (fmp.getProject() !== "daily") {
        return false;
      }
      if (fmp.createdAt.toISOString().slice(0, 10) !== nowDate) {
        return false;
      }
      return true;
    });
    for (const page of pages) {
      console.log(page);
    }
  }
  fleeting() {
    const dt = new Date();
    const note = {
      uuid: v4_default(),
      type: 13,
      version: "0.0.4",
      created_at: dt.toISOString(),
      path: "",
      data: ""
    };
    note.path = `800 Inbox/${note.uuid}.md`;
    note.data = `---
type: 13
uuid: "${note.uuid}"
created_at: "${note.created_at}"
version: "0.0.4"
---
## Content
`;
    const f = this.app.vault.create(note.path, note.data).then((f2) => {
      return f2;
    });
    const active = this.app.workspace.activeLeaf;
    const root = active.parent;
    this.app.workspace.createLeafInParent(root, root.children.length + 1);
    const leaf = root.children[root.children.length - 1];
    f.then((file) => {
      leaf.openFile(file, { active: true });
    });
  }
  permanent(name2) {
    const dt = new Date();
    const note = {
      uuid: v4_default(),
      type: 2,
      version: "0.0.3",
      created_at: dt.toISOString(),
      path: "",
      data: ""
    };
    note.path = `${Paths.Slipbox}/${note.uuid}.md`;
    if (name2 === void 0) {
      note.data = `---
type: 2
uuid: "${note.uuid}"
created_at: "${note.created_at}"
version: "0.0.3"
---
## Content
`;
    } else {
      note.data = `---
type: 2
uuid: "${note.uuid}"
created_at: "${note.created_at}"
version: "0.0.3"
---
## Content
### ${name2}
`;
    }
    const f = this.app.vault.create(note.path, note.data).then((f2) => {
      return f2;
    });
    const active = this.app.workspace.activeLeaf;
    const root = active.parent;
    this.app.workspace.createLeafInParent(root, root.children.length + 1);
    const leaf = root.children[root.children.length - 1];
    f.then((file) => {
      leaf.openFile(file, { active: true });
    });
  }
  // @ts-ignore
  journalEntry(dt) {
    if (dt === void 0) {
      dt = new Date();
    }
    const note = {
      uuid: v4_default(),
      type: 20,
      version: "0.0.4",
      created_at: dt.toISOString(),
      path: "",
      data: ""
    };
    note.path = `Journal/${note.uuid}.md`;
    note.data = `---
type: 20
uuid: "${note.uuid}"
created_at: "${note.created_at}"
version: "0.0.4"
tags:
    - project/daily
---
## Content
### entry
`;
    return this.app.vault.create(note.path, note.data).then((f) => {
      return f;
    });
  }
};
var ListMaker = class {
  constructor(gonext, dv, frontmatter) {
    this.gonext = gonext;
    this.dv = dv;
    this.frontmatter = frontmatter;
    this.noteHelper = new NoteHelper(gonext, dv, frontmatter);
  }
  nameInNamespace(fm, ns) {
    let found = false;
    if (ns.length === 0) {
      return true;
    }
    for (const a of ns) {
      const root = a.split("/");
      Assert.True(root.length === 2, `Invalid tag: '${a}'`);
      const parent = root[0].slice(0, 1) === "!" ? root[0].slice(1) : root[0];
      const name2 = Helper.getTag(fm, parent);
      if (a.slice(0, 1) === "!") {
        if (name2 === a.slice(1)) {
          return false;
        } else {
          found = true;
        }
      } else {
        if (name2 === a) {
          found = true;
        } else {
          found = false;
        }
      }
    }
    return found;
  }
  myNameInNamespace(name2, ns) {
    let found = false;
    if (ns.length === 0) {
      return true;
    }
    for (const a of ns) {
      if (a.slice(0, 1) === "!") {
        if (name2 === a.slice(1)) {
          return false;
        } else {
          found = true;
        }
      } else {
        if (name2 === a) {
          found = true;
        } else {
          found = false;
        }
      }
    }
    return found;
  }
  filterByNamespace(fm, byAreas, byContexts, byLayers, byOrgs, byProjects) {
    if (!this.myNameInNamespace(Helper.getArea(fm), byAreas)) {
      return false;
    }
    if (!this.myNameInNamespace(Helper.getContext(fm), byContexts)) {
      return false;
    }
    if (!this.myNameInNamespace(Helper.getLayer(fm), byLayers)) {
      return false;
    }
    if (!this.myNameInNamespace(Helper.getOrg(fm), byOrgs)) {
      return false;
    }
    if (!this.myNameInNamespace(Helper.getProject(fm), byProjects)) {
      return false;
    }
    return true;
  }
  filterByDate(dt, before, after) {
    if (before !== void 0 && dt.getTime() > before.getTime()) {
      return false;
    }
    if (after !== void 0 && dt.getTime() < after.getTime()) {
      return false;
    }
    return true;
  }
  goals() {
    const rs = [];
    const bins = {};
    bins[GoalStatus.Reframe] = [];
    bins[GoalStatus.Research] = [];
    bins[GoalStatus.Operationalize] = [];
    bins[GoalStatus.Planify] = [];
    bins[GoalStatus.Dependant] = [];
    bins[GoalStatus.Active] = [];
    bins[GoalStatus.Success] = [];
    bins[GoalStatus.Failed] = [];
    const pages = this.dv.pages(`"${Paths.Goals}"`).where((page) => {
      const fmp = page.file.frontmatter;
      if (bins[fmp.status] === void 0) {
        return true;
      } else {
        const fm = new FrontmatterJS(page);
        bins[fmp.status].push(fm);
        return false;
      }
    });
    const keys = Object.keys(bins);
    keys.sort();
    for (const k of keys) {
      const buff = bins[k];
      buff.sort((a, b) => {
        const dta = new Date(a.fm.before);
        const dtb = new Date(b.fm.before);
        return dta.getTime() - dtb.getTime();
      });
    }
    const displayGoals = (k, rs2) => {
      rs2.push(["header", 3, k]);
      const buff = bins[k];
      rs2.push(["array", Renderer.goal, buff]);
    };
    rs.push(["header", 2, "operational"]);
    displayGoals("active", rs);
    displayGoals("planify", rs);
    rs.push(["header", 2, "non-operational"]);
    displayGoals("reframe", rs);
    displayGoals("research", rs);
    displayGoals("operationalize", rs);
    rs.push(["header", 2, "done"]);
    displayGoals("success", rs);
    displayGoals("failed", rs);
    return rs;
  }
  projectTasksSheetRelationFrontmatter(dv) {
    const current = dv.current();
    const fm = new FrontmatterJS(current);
    return {
      name: fm.getName(),
      uuid: fm.uuid,
      active: fm.fm.active === void 0 || fm.fm.active === true ? true : false
    };
  }
  projectTasksSheetRelation(dv) {
    const project = this.projectTasksSheetRelationFrontmatter(dv);
    const rs = [];
    const bins = {
      nextAction: [],
      waitingFor: [],
      somedayMaybe: []
    };
    {
      const pages2 = dv.pages(`"Journal"`).where((page) => {
        const fm = new FrontmatterJS(page);
        return fm.getProject() === project.name;
      }).sort((k) => k.created_at, "desc");
      if (pages2.length > 0) {
        rs.push(["header", 2, `Journal (${pages2.length})`]);
        for (const page of pages2) {
          const fm = new FrontmatterJS(page);
          const text = Renderer.makeLink(
            dv,
            fm.f,
            `${fm.createdAt.toISOString().slice(0, 10)}`,
            "entry"
          );
          rs.push(["paragraph", text]);
        }
      }
    }
    const pages = dv.pages(`"${Paths.Tasks}"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (fm.fm.status === "done") {
        return false;
      }
      if (["daily", "weekly", "monthly"].contains(project.name)) {
        return false;
      } else if (project.name === "adhoc" && fm.getProject() === void 0) {
        page.file.frontmatter.project = "adhoc";
        return true;
      } else if (project.name === fm.getProject()) {
        return true;
      } else {
        return false;
      }
    });
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      if (this.noteHelper.isDoable(page)) {
        if (fm.fm.priority > 0) {
          bins.nextAction.push(page);
        } else {
          bins.somedayMaybe.push(page);
        }
      } else {
        if (fm.fm.needs !== void 0 && this.noteHelper.hasPendingDependencies(fm.fm.needs)) {
          page.cause = "dependencies";
        } else {
          const fmAt = fm.at;
          const currentAt = new Date();
          const fmAfter = fm.after;
          if (fm.fm.at !== void 0) {
            fmAt.setHours(0);
            fmAt.setMinutes(0);
            fmAt.setSeconds(0);
            fmAt.setMilliseconds(0);
            currentAt.setHours(0);
            currentAt.setMinutes(0);
            currentAt.setSeconds(0);
            currentAt.setMilliseconds(0);
          }
          if (fm.after !== void 0) {
            fmAfter.setHours(0);
            fmAfter.setMinutes(0);
            fmAfter.setSeconds(0);
            fmAfter.setMilliseconds(0);
          }
          console.log(`current: ${currentAt.getTime()}`);
          console.log(`at: ${fm.at.getTime()}`);
          console.log(`after: ${fm.after.getTime()}`);
          if (fm.fm.at !== void 0 && fmAt.getTime() > currentAt.getTime()) {
            page.cause = "at";
          } else if (fm.fm.after !== void 0 && fmAfter.getTime() < currentAt.getTime()) {
            page.cause = "after";
          } else {
            page.cause = "unknown";
          }
        }
        bins.waitingFor.push(page);
      }
    }
    if (bins.nextAction.length > 0) {
      rs.push(["header", 2, `Next Actions (${bins.nextAction.length})`]);
      bins.nextAction.sort(Helper.sortByPriorityAndDurationAndAge);
      rs.push([
        "array",
        Renderer.basicTaskJournalNextAction,
        bins.nextAction
      ]);
    }
    if (bins.waitingFor.length > 0) {
      rs.push(["header", 2, `Waiting (${bins.waitingFor.length})`]);
      bins.waitingFor.sort(Helper.sortByPriorityAndDurationAndAge);
      rs.push([
        "array",
        Renderer.basicTaskJournalWaiting,
        bins.waitingFor
      ]);
    }
    if (bins.somedayMaybe.length > 0) {
      rs.push(["header", 2, `Maybe (${bins.somedayMaybe.length})`]);
      bins.somedayMaybe.sort(Helper.sortByPriorityAndDurationAndAge);
      rs.push(["array", Renderer.basicTaskJournal, bins.somedayMaybe]);
    }
    return rs;
  }
  projectLogsSheetRelation(dv) {
    const project = this.projectTasksSheetRelationFrontmatter(dv);
    const filterBy = [];
    const rs = [];
    rs.push(["header", 2, "Logs"]);
    const logs = this.dv.pages(`"${Paths.Logs}"`).where((page) => {
      if (page.type !== Types.Log) {
        return false;
      }
      if (page.file.frontmatter.reviewed > 0) {
        return false;
      }
      return true;
    });
    const buff = {};
    for (const e of logs) {
      const fm = e.file.frontmatter;
      if (filterBy.length > 0 && !this.nameInNamespace(fm, filterBy)) {
        continue;
      }
      fm.createdAt = this.frontmatter.getCreatedAt(e.file);
      Assert.True(
        !Helper.nilCheck(fm.parent_id),
        `Missing field "parent_id" from log: "${fm.uuid}"`
      );
      const parent = this.dv.pages(`"${Paths.Tasks}/${fm.parent_id}"`).array();
      if (parent.length !== 1) {
        continue;
      }
      Assert.True(
        parent.length === 1,
        `Parent: ${fm.parent_id} not found for log: "${fm.uuid}"`
      );
      fm.project = Helper.getProject(parent[0].file.frontmatter);
      fm.area = Helper.getArea(parent[0].file.frontmatter, true);
      if (fm.project !== `project/${project.name === "adhoc" ? "none" : project.name}`) {
        continue;
      }
      if (Helper.nilCheck(fm.done_at)) {
        continue;
      }
      const date = fm.done_at.slice(0, 10);
      if (buff[date] === void 0) {
        buff[date] = [e];
      } else {
        buff[date].push(e);
      }
    }
    const keys = Object.keys(buff);
    keys.sort();
    for (const date of keys) {
      buff[date].sort(
        (a, b) => b.file.frontmatter.createdAt.getTime() - a.file.frontmatter.createdAt.getTime()
      );
    }
    for (const date of keys.reverse()) {
      rs.push(["header", 3, date]);
      rs.push(["array", Renderer.projectLogs, buff[date]]);
    }
    return rs;
  }
  getProjectLogs(dv, project) {
    const logs = this.dv.pages(`"${Paths.Logs}"`).where((page) => {
      if (page.type !== Types.Log) {
        return false;
      }
      return true;
    });
    const buff = [];
    for (const e of logs) {
      const fm = e.file.frontmatter;
      Assert.True(
        !Helper.nilCheck(fm.parent_id),
        `Missing field "parent_id" from log: "${fm.uuid}"`
      );
      const parent = this.dv.pages(`"${Paths.Tasks}/${fm.parent_id}"`).array();
      if (parent.length !== 1) {
        continue;
      }
      fm.project = Helper.getProject(parent[0].file.frontmatter);
      fm.area = Helper.getArea(parent[0].file.frontmatter, true);
      if (fm.project !== `project/${project.name === "adhoc" ? "none" : project.name}`) {
        continue;
      }
      if (Helper.nilCheck(fm.done_at)) {
        continue;
      }
      buff.push(e);
    }
    return buff;
  }
  projectLogsSheet(dv) {
    const project = this.frontmatter.projectParseMeta(dv);
    const fml = this.frontmatter.getCurrentFrontmatter();
    if (fml === void 0) {
      throw new Error(`Invalid frontmatter, cannot proceed`);
    }
    const before = Helper.nilCheck(fml.before) ? new Date(0) : new Date(fml.before);
    const after = Helper.nilCheck(fml.after) ? new Date() : new Date(fml.after);
    const filterBy = this.frontmatter.parseListFilterBy(fml);
    const rs = [];
    let totalTime = 0;
    rs.push(["header", 1, project.name]);
    const logs = this.dv.pages(`"${Paths.Logs}"`).where((page) => {
      if (page.type !== Types.Log) {
        return false;
      }
      return true;
    });
    const buff = {};
    for (const e of logs) {
      const fm = e.file.frontmatter;
      if (filterBy.length > 0 && !this.nameInNamespace(fm, filterBy)) {
        continue;
      }
      fm.createdAt = this.frontmatter.getCreatedAt(e.file);
      Assert.True(
        !Helper.nilCheck(fm.parent_id),
        `Missing field "parent_id" from log: "${fm.uuid}"`
      );
      const parent = this.dv.pages(`"${Paths.Tasks}/${fm.parent_id}"`).array();
      if (parent.length !== 1) {
        continue;
      }
      fm.project = Helper.getProject(parent[0].file.frontmatter);
      fm.area = Helper.getArea(parent[0].file.frontmatter, true);
      if (fm.project !== `project/${project.name === "adhoc" ? "none" : project.name}`) {
        continue;
      }
      if (Helper.nilCheck(fm.done_at)) {
        continue;
      }
      const date = fm.done_at.slice(0, 10);
      const createdAt = new Date(fm.created_at);
      const doneAt = new Date(fm.done_at);
      if (createdAt > before) {
        continue;
      }
      if (createdAt < after) {
        continue;
      }
      if (buff[date] === void 0) {
        buff[date] = [e];
      } else {
        buff[date].push(e);
      }
      const delta = doneAt.getTime() - createdAt.getTime();
      totalTime += delta;
    }
    dv.paragraph(
      `_totalTime (h):_ ${Math.round(totalTime / (1e3 * 60 * 60) * 10) / 10}`
    );
    const keys = Object.keys(buff);
    keys.sort();
    for (const date of keys) {
      buff[date].sort(
        (a, b) => b.file.frontmatter.createdAt.getTime() - a.file.frontmatter.createdAt.getTime()
      );
    }
    for (const date of keys.reverse()) {
      rs.push(["header", 3, date]);
      rs.push(["array", Renderer.projectLogs, buff[date]]);
    }
    return rs;
  }
  logs() {
    const [groupBy, filterBy, before, after] = this.frontmatter.parseAllProgressedTasks();
    const tasks = this.dv.pages(`"${Paths.Tasks}"`).where((page) => page.file.frontmatter.status !== "doing");
    const buff = [];
    for (const task of tasks) {
      const fm = task.file.frontmatter;
      if (filterBy.length > 0 && !this.nameInNamespace(fm, filterBy)) {
        continue;
      }
      const timeEstimate = Helper.durationStringToSec(fm.time_estimate);
      if (timeEstimate === void 0 && fm.time_estimate !== void 0) {
        throw new Error(
          `Invalid value: "${fm.time_estimate}" for entry: "${fm.uuid}"`
        );
      } else {
        fm.timeEstimate = timeEstimate;
      }
      const logs = this.dv.pages(`"${Paths.Logs}/${fm.uuid}"`).where((page) => page.type === Types.Log).sort((k) => k.created_at, "asc");
      if (logs.length < 1) {
        continue;
      }
      fm.took = 0;
      const project = Helper.getField(Helper.getProject(fm, true), "");
      const area = Helper.getField(Helper.getArea(fm, true), "");
      for (const log of logs) {
        const fml = log.file.frontmatter;
        const entry = {
          alias: fm.alias,
          uuid: fm.uuid,
          logId: fml.uuid,
          estimate: fm.timeEstimate,
          project,
          area,
          domain: Helper.getField(Helper.getDomain(fm, true), ""),
          path: task.file.path,
          logPath: log.file.path,
          createdAt: void 0,
          doneAt: void 0,
          took: void 0,
          tookAcc: void 0,
          deltaAcc: void 0
        };
        if (fml.created_at === void 0) {
          console.error(log);
          throw new Error(
            `task: ${fm.uuid} last entry is missing 'created_at' field`
          );
        }
        if (fml.done_at === void 0) {
          console.error(log);
          throw new Error(
            `task: ${fm.uuid} last entry is missing 'done_at' field`
          );
        }
        entry.createdAt = new Date(fml.created_at);
        entry.doneAt = new Date(fml.done_at);
        if (!this.filterByDate(entry.doneAt, before, after)) {
          continue;
        }
        const took = (entry.doneAt.getTime() - entry.createdAt.getTime()) / 1e3;
        fm.took += took;
        entry.took = took;
        entry.tookAcc = fm.took;
        entry.deltaAcc = timeEstimate - fm.took;
        buff.push(entry);
      }
    }
    const keyGetter = Helper.getKey(groupBy);
    const bins = {};
    for (const entry of buff) {
      let d = void 0;
      try {
        d = keyGetter(entry);
      } catch (e) {
        throw new Error(entry);
      }
      if (bins[d] === void 0) {
        bins[d] = [entry];
      } else {
        bins[d].push(entry);
      }
    }
    const keys = Object.keys(bins);
    keys.sort();
    const rs = [];
    for (const key of keys.reverse()) {
      rs.push(["header", 2, key]);
      const arr = [];
      let totalTime = 0;
      for (const e of bins[key]) {
        const buff2 = [];
        buff2.push(
          Renderer.makeLinkShortUUID(
            this.dv,
            { path: e.path, frontmatter: { uuid: e.uuid } },
            "Task"
          )
        );
        buff2.push(
          Renderer.makeLinkShortUUID(
            this.dv,
            { path: e.logPath, frontmatter: { uuid: e.logId } },
            "Content"
          )
        );
        const convertSecondsToHours = (t) => {
          return Math.round(t / 3600 * 10) / 10;
        };
        buff2.push(`${convertSecondsToHours(e.took)}`);
        buff2.push(`${e.project}`);
        arr.push(buff2);
        totalTime += e.took;
      }
      totalTime = Math.round(totalTime / 3600 * 10) / 10;
      rs.push(["stats", "totalTime", "h", totalTime]);
      rs.push(["array", Renderer.basicProgressedTaskWithLog, arr]);
    }
    return rs;
  }
  inbox(dv) {
    const rs = [];
    const buff = [];
    const filterBy = [];
    const minSize = 0;
    const maxSize = 4294967295;
    const fleetings = this.dv.pages(`"${Paths.Inbox}"`).array();
    for (const e of fleetings) {
      const fm = e.file.frontmatter;
      e.file.frontmatter.createdAt = this.frontmatter.getCreatedAt(
        e.file
      );
      let fmjs = null;
      try {
        fmjs = new FrontmatterJS(e);
      } catch (ValidationError2) {
        console.log(e);
        dv.paragraph(Renderer.makeLink(dv, e.file));
        break;
      }
      fm.project = Helper.getProject(fm, true);
      fm.domain = `domain/${fmjs.getDomain()}`;
      fm.components = Helper.getComponents(fm);
      if (e.file.size < minSize) {
        continue;
      }
      if (e.file.size > maxSize) {
        continue;
      }
      buff.push(e);
    }
    const logs = [];
    for (const e of logs) {
      const fm = e.file.frontmatter;
      fm.createdAt = this.frontmatter.getCreatedAt(e.file);
      Assert.True(
        !Helper.nilCheck(fm.parent_id),
        `Missing field "parent_id" from log: "${fm.uuid}"`
      );
      const parent = this.dv.pages(`"${Paths.Tasks}/${fm.parent_id}"`).array();
      Assert.True(
        parent.length === 1,
        `Parent: ${fm.parent_id} not found for log: "${fm.uuid}"`
      );
      fm.project = Helper.getProject(parent[0].file.frontmatter, true);
      fm.domain = void 0;
      fm.components = [];
      if (e.file.size < minSize) {
        continue;
      }
      if (e.file.size > maxSize) {
        continue;
      }
      buff.push(e);
    }
    const sortBySizeThenDate = function(a, b) {
      const fA = a.file;
      const fB = b.file;
      if (fA.size !== fB.size) {
        return fB.size - fA.size;
      } else {
        return fA.frontmatter.createdAt.getTime() - fB.frontmatter.createdAt.getTime();
      }
    };
    const sortByAge = (a, b) => a.file.frontmatter.createdAt.getTime() - b.file.frontmatter.createdAt.getTime();
    buff.sort(sortByAge);
    rs.push(["array", Renderer.inboxEntry, buff]);
    return rs;
  }
  projects() {
    const rs = [];
    const bins = {
      active: [],
      inactive: []
    };
    const pages = this.dv.pages(`"Projects"`).sort((k) => k.name, "asc");
    for (const project of pages) {
      const fmProject = new FrontmatterJS(project);
      if (fmProject.fm.active === false) {
        bins.inactive.push(project);
        continue;
      } else if (fmProject.getName() === "adhoc") {
        bins.active.push(project);
        continue;
      } else if (["yearly", "monthly", "weekly", "daily"].contains(
        fmProject.getName()
      )) {
        continue;
      }
      const tasks = this.dv.pages(`#project/${fmProject.getName()}`).where((page) => {
        if (page.file.folder !== `${Paths.Tasks}`) {
          return false;
        }
        const fmTask = new FrontmatterJS(page);
        if (fmTask.fm.priority === 0) {
          return false;
        }
        if (["todo", "doing", "waiting"].contains(fmTask.fm.status)) {
          return true;
        }
        return false;
      });
      if (tasks.length > 0) {
        bins.active.push(project);
      } else {
        bins.inactive.push(project);
      }
    }
    rs.push(["header", 2, "Active"]);
    rs.push(["array", Renderer.projects, bins.active]);
    rs.push(["header", 2, "Inactive"]);
    rs.push(["array", Renderer.projects, bins.inactive]);
    return rs;
  }
  praxis() {
    const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
      if (page.file.frontmatter.type !== Types.Praxis) {
        return false;
      }
      if (page.file.frontmatter.status !== Status.Todo) {
        return false;
      }
      return true;
    }).array();
    const rs = [];
    rs.push(["header", 1, "Praxis"]);
    rs.push(["array", Renderer.basicTask, pages]);
    return rs;
  }
  planning(lastWeek = 2) {
    const rs = [];
    const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (fm.at === void 0) {
        return false;
      }
      if (fm.getProject() !== "daily") {
        return false;
      }
      return true;
    }).sort((page) => page.file.frontmatter.at, "desc");
    const now = new Date();
    const bins = {};
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      let at = void 0;
      try {
        at = fm.at.toISOString().slice(0, 10);
      } catch (e) {
        throw new Error(`Invalid date: '${fm.fm.uuid}'`);
      }
      const weekNumber = this.getWeekNumber5(fm.at);
      if (fm.at.getFullYear() < now.getFullYear()) {
        if (weekNumber > 1) {
          continue;
        }
      }
      if (bins[weekNumber] === void 0) {
        bins[weekNumber] = [fm];
      } else {
        bins[weekNumber].push(fm);
      }
    }
    const currentWeekNumber = this.getWeekNumber5(now);
    for (const key of Object.keys(bins)) {
      const weekNumber = Number(key);
      if (weekNumber + lastWeek < currentWeekNumber) {
        continue;
      }
      if (weekNumber < currentWeekNumber) {
        rs.push(["header", 2, `~~week ${key}~~`]);
      } else if (weekNumber === currentWeekNumber) {
        rs.push(["header", 2, `*week ${key}*`]);
      } else {
        rs.push(["header", 2, `week ${key}`]);
      }
      bins[key].sort((a, b) => {
        return a.at.getTime() - b.at.getTime();
      });
      for (const task of bins[key]) {
        const day = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][task.at.getDay()];
        const text = Renderer.makeLink(
          this.dv,
          task.f,
          `${task.at.toISOString().slice(0, 10)}, ${day}`,
          "Task"
        );
        if (weekNumber < currentWeekNumber) {
          rs.push(["paragraph", `~~${text}~~`]);
        } else if (weekNumber === currentWeekNumber) {
          if (this.dayOfYear(task.at) < this.dayOfYear(now)) {
            rs.push(["paragraph", `~~${text}~~`]);
          } else {
            rs.push(["paragraph", `${text}`]);
          }
        } else {
          rs.push(["paragraph", `${text}`]);
        }
      }
    }
    return rs;
  }
  dayOfYear(dt) {
    const year = dt.getFullYear();
    const month = dt.getMonth() + 1;
    const day = dt.getDate();
    const N1 = Math.floor(275 * month / 9);
    const N2 = Math.floor((month + 9) / 12);
    const N3 = 1 + Math.floor((year - 4 * Math.floor(year / 4) + 2) / 3);
    return N1 - N2 * N3 + day - 30;
  }
  getWeekNumber(d) {
    d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
    d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));
    const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
    return Math.ceil(((d - yearStart) / 864e5 + 1) / 7);
  }
  // https://codepen.io/ldijkman/pen/LYdNJvM
  getWeekNumber5(dt) {
    const tdt = new Date(dt.valueOf());
    const dayn = dt.getDay();
    tdt.setDate(tdt.getDate() - dayn + 3);
    const firstThursday = tdt.valueOf();
    tdt.setMonth(0, 1);
    if (tdt.getDay() !== 4) {
      tdt.setMonth(0, 1 + (4 - tdt.getDay() + 7) % 7);
    }
    return 1 + Math.ceil((firstThursday - tdt) / 6048e5);
  }
  getWeekNumber4(d) {
    d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
    const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
    const firstSunday = yearStart.getUTCDay() === 0 ? yearStart : new Date(
      Date.UTC(
        d.getUTCFullYear(),
        0,
        1 + (7 - yearStart.getUTCDay())
      )
    );
    const daysSinceFirstSunday = (d - firstSunday + 864e5) / 864e5;
    return Math.ceil(daysSinceFirstSunday / 7);
  }
  getMonth(year, weekNumber) {
    const firstDayOfYear = new Date(year, 0, 1);
    const firstDayOfWeek = firstDayOfYear.getDay();
    const daysToAdd = (weekNumber - 1) * 7 - firstDayOfWeek + (firstDayOfWeek === 0 ? 1 : 0);
    const weekStartDate = new Date(
      firstDayOfYear.setDate(firstDayOfYear.getDate() + daysToAdd)
    );
    if (weekStartDate.getDate() > 24) {
      weekStartDate.setDate(weekStartDate.getDate() + 7);
    }
    const monthNumber = weekStartDate.getMonth();
    return monthNumber + 1;
  }
  getMonthName(monthNumber) {
    const date = new Date(2e3, monthNumber - 1);
    return date.toLocaleString("default", { month: "long" });
  }
  energy(dv) {
    const current = dv.current();
    if (current.energy === void 0) {
      current.energy = 0;
    }
    let comp = void 0;
    switch (current.op) {
      case ">":
        comp = (a, b) => a > b;
        break;
      case ">=":
        comp = (a, b) => a >= b;
        break;
      case "<":
        comp = (a, b) => a < b;
        break;
      case "<=":
        comp = (a, b) => a <= b;
        break;
      default:
        comp = (a, b) => a === b;
        break;
    }
    const rs = [];
    const pages = dv.pages(`"${Paths.Tasks}"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (fm.getProject() === "daily") {
        return false;
      }
      if (fm.fm.status !== "todo") {
        return false;
      }
      return comp(fm.energy, current.energy);
    });
    rs.push([
      "array",
      (dv2, data) => {
        for (const entry of data) {
          console.log(entry);
          dv2.paragraph(
            Renderer.makeLinkAlias(dv2, entry.file, "## Task")
          );
        }
      },
      pages
    ]);
    return rs;
  }
  mandala(dv) {
    let mandalaLo = -1;
    let mandalaHi = -1;
    const now = new Date();
    {
      const weekNumber = this.getWeekNumber4(now);
      mandalaLo = weekNumber - 6;
      mandalaHi = weekNumber - 5;
      if (mandalaLo < 0 || mandalaHi < 0) {
        dv.paragraph(`weekNumber: ${weekNumber}`);
        dv.paragraph(`mandalaLo: ${mandalaLo}`);
        dv.paragraph(`mandalaHi: ${mandalaHi}`);
        return;
      }
      dv.paragraph(`weekNumber: ${weekNumber}`);
      dv.paragraph(`mandalaLo: ${mandalaLo}`);
      dv.paragraph(`mandalaHi: ${mandalaHi}`);
    }
    const rs = [];
    const bins = {};
    const suiviWeekly = {};
    const suiviMonthly = {};
    const suiviYearly = {};
    const pages = this.dv.pages(`"Journal"`).where((page) => {
      const fm = new FrontmatterJS(page);
      const weekNumber = this.getWeekNumber4(fm.createdAt);
      console.log(weekNumber);
      if (weekNumber >= mandalaLo && weekNumber <= mandalaHi && fm.createdAt.getFullYear() === now.getFullYear()) {
        return true;
      }
      return false;
    }).sort((page) => page.file.frontmatter.created_at, "desc");
    console.log(pages.length);
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      const weekNumber = this.getWeekNumber4(fm.createdAt);
      const year = fm.createdAt.getFullYear();
      const month = fm.createdAt.getMonth() + 1;
      let msg = "";
      msg += `createdAt: ${fm.createdAt.toISOString().slice(0, 10)}
`;
      msg += `weekNumber: ${weekNumber}
`;
      msg += `year: ${year}
`;
      msg += `month: ${month}
`;
      msg += `day: ${fm.createdAt.getDay()}
`;
      const day = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][fm.createdAt.getDay()];
      msg += `day: ${day}
`;
      console.log(msg);
      if (bins[year] === void 0) {
        bins[year] = {};
      }
      if (bins[year][weekNumber.toString()] === void 0) {
        bins[year][weekNumber.toString()] = {};
      }
      if (suiviMonthly[year] === void 0) {
        suiviMonthly[year] = {};
      }
      if (suiviWeekly[year] === void 0) {
        suiviWeekly[year] = {};
      }
      let tag = "";
      if (fm.getDomain() !== void 0) {
        tag = fm.getDomain();
      } else if (fm.getProject() !== void 0) {
        tag = fm.getProject();
      } else {
        tag = "adhoc";
      }
      if (tag == "weekly") {
        if (suiviWeekly[year][weekNumber] === void 0) {
          suiviWeekly[year][weekNumber] = [page];
        } else {
          suiviWeekly[year][weekNumber].push(page);
        }
        continue;
      } else if (tag === "monthly") {
        if (suiviMonthly[year][month] === void 0) {
          suiviMonthly[year][month] = [page];
        } else {
          suiviMonthly[year][month].push(page);
        }
        continue;
      } else if (tag === "yearly") {
        if (suiviYearly[year] === void 0) {
          suiviYearly[year] = [page];
        } else {
          suiviYearly[year].push(page);
        }
        continue;
      }
      if (bins[year][weekNumber][tag] === void 0) {
        bins[year][weekNumber][tag] = [page];
      } else {
        bins[year][weekNumber][tag].push(page);
      }
    }
    {
      const years = Object.keys(bins);
      let lastYear = 9999;
      let lastMonth = 13;
      years.sort().reverse();
      for (const year of years) {
        rs.push(["header", 2, year]);
        if (parseInt(year, 10) < lastYear) {
          lastMonth = 13;
          lastYear = parseInt(year, 10);
          if (suiviYearly[year] !== void 0) {
            for (const page of suiviYearly[year]) {
              const fm = new FrontmatterJS(page);
              rs.push([
                "paragraph",
                Renderer.makeLinkAlias(this.dv, fm.f)
              ]);
            }
          }
        }
        for (let week = 52; week > 0; week--) {
          const thisMonth = this.getMonth(year, week);
          if (suiviMonthly[year][thisMonth] !== void 0) {
            if (lastMonth !== thisMonth) {
              lastMonth = thisMonth;
              rs.push([
                "header",
                3,
                this.getMonthName(lastMonth)
              ]);
              if (suiviMonthly[year][thisMonth] !== void 0) {
                for (const page of suiviMonthly[year][thisMonth]) {
                  const fm = new FrontmatterJS(page);
                  rs.push([
                    "paragraph",
                    Renderer.makeLinkAlias(this.dv, fm.f)
                  ]);
                }
              }
            }
          }
          if (suiviWeekly[year][week] === void 0 && bins[year][week] === void 0) {
            continue;
          }
          rs.push(["header", 4, `week ${week.toString()}`]);
          if (suiviWeekly[year][week] !== void 0) {
            for (const page of suiviWeekly[year][week]) {
              const fm = new FrontmatterJS(page);
              rs.push([
                "paragraph",
                Renderer.makeLinkAlias(this.dv, fm.f)
              ]);
            }
          }
          if (bins[year][week] === void 0) {
            continue;
          }
          const tags = Object.keys(bins[year][week]);
          tags.sort();
          for (const tag of tags) {
            rs.push(["header", 5, tag]);
            bins[year][week][tag].sort((a, b) => {
              const fmA = new FrontmatterJS(a);
              const fmB = new FrontmatterJS(b);
              return fmB.createdAt.getTime() - fmA.createdAt.getTime();
            });
            for (const page of bins[year][week][tag]) {
              const fm = new FrontmatterJS(page);
              if (fm.type === 6) {
              } else {
                const d = fm.createdAt.toISOString().slice(0, 10);
                const day = [
                  "Sun",
                  "Mon",
                  "Tue",
                  "Wed",
                  "Thu",
                  "Fri",
                  "Sat"
                ][fm.createdAt.getDay()];
                const text = `${d}, ${day}`;
                rs.push([
                  "paragraph",
                  Renderer.makeLink(this.dv, fm.f, text)
                ]);
              }
            }
          }
        }
      }
    }
    return rs;
  }
  journal() {
    const rs = [];
    const bins = {};
    const suiviWeekly = {};
    const suiviMonthly = {};
    const suiviYearly = {};
    const pages = this.dv.pages(`"Journal"`).sort((page) => page.file.frontmatter.created_at, "desc");
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      const weekNumber = this.getWeekNumber4(fm.createdAt);
      const year = fm.createdAt.getFullYear();
      const month = fm.createdAt.getMonth() + 1;
      let msg = "";
      msg += `createdAt: ${fm.createdAt.toISOString().slice(0, 10)}
`;
      msg += `weekNumber: ${weekNumber}
`;
      msg += `year: ${year}
`;
      msg += `month: ${month}
`;
      msg += `day: ${fm.createdAt.getDay()}
`;
      const day = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][fm.createdAt.getDay()];
      msg += `day: ${day}
`;
      if (bins[year] === void 0) {
        bins[year] = {};
      }
      if (bins[year][weekNumber.toString()] === void 0) {
        bins[year][weekNumber.toString()] = {};
      }
      if (suiviMonthly[year] === void 0) {
        suiviMonthly[year] = {};
      }
      if (suiviWeekly[year] === void 0) {
        suiviWeekly[year] = {};
      }
      let tag = "";
      if (fm.getDomain() !== void 0) {
        tag = fm.getDomain();
      } else if (fm.getProject() !== void 0) {
        tag = fm.getProject();
      } else {
        tag = "adhoc";
      }
      if (tag == "weekly") {
        if (suiviWeekly[year][weekNumber] === void 0) {
          suiviWeekly[year][weekNumber] = [page];
        } else {
          suiviWeekly[year][weekNumber].push(page);
        }
        continue;
      } else if (tag === "monthly") {
        if (suiviMonthly[year][month] === void 0) {
          suiviMonthly[year][month] = [page];
        } else {
          suiviMonthly[year][month].push(page);
        }
        continue;
      } else if (tag === "yearly") {
        if (suiviYearly[year] === void 0) {
          suiviYearly[year] = [page];
        } else {
          suiviYearly[year].push(page);
        }
        continue;
      }
      if (bins[year][weekNumber][tag] === void 0) {
        bins[year][weekNumber][tag] = [page];
      } else {
        bins[year][weekNumber][tag].push(page);
      }
    }
    {
      const years = Object.keys(bins);
      let lastYear = 9999;
      let lastMonth = 13;
      years.sort().reverse();
      for (const year of years) {
        rs.push(["header", 2, year]);
        if (parseInt(year, 10) < lastYear) {
          lastMonth = 13;
          lastYear = parseInt(year, 10);
          if (suiviYearly[year] !== void 0) {
            for (const page of suiviYearly[year]) {
              const fm = new FrontmatterJS(page);
              rs.push([
                "paragraph",
                Renderer.makeLinkAlias(this.dv, fm.f)
              ]);
            }
          }
        }
        for (let week = 52; week > 0; week--) {
          const thisMonth = this.getMonth(year, week);
          if (suiviMonthly[year][thisMonth] !== void 0) {
            if (lastMonth !== thisMonth) {
              lastMonth = thisMonth;
              rs.push([
                "header",
                3,
                this.getMonthName(lastMonth)
              ]);
              if (suiviMonthly[year][thisMonth] !== void 0) {
                for (const page of suiviMonthly[year][thisMonth]) {
                  const fm = new FrontmatterJS(page);
                  rs.push([
                    "paragraph",
                    Renderer.makeLinkAlias(this.dv, fm.f)
                  ]);
                }
              }
            }
          }
          if (suiviWeekly[year][week] === void 0 && bins[year][week] === void 0) {
            continue;
          }
          rs.push(["header", 4, `week ${week.toString()}`]);
          if (suiviWeekly[year][week] !== void 0) {
            for (const page of suiviWeekly[year][week]) {
              const fm = new FrontmatterJS(page);
              rs.push([
                "paragraph",
                Renderer.makeLinkAlias(this.dv, fm.f)
              ]);
            }
          }
          if (bins[year][week] === void 0) {
            continue;
          }
          const tags = Object.keys(bins[year][week]);
          tags.sort();
          for (const tag of tags) {
            rs.push(["header", 5, tag]);
            bins[year][week][tag].sort((a, b) => {
              const fmA = new FrontmatterJS(a);
              const fmB = new FrontmatterJS(b);
              return fmB.createdAt.getTime() - fmA.createdAt.getTime();
            });
            for (const page of bins[year][week][tag]) {
              const fm = new FrontmatterJS(page);
              if (fm.type === 6) {
              } else {
                const d = fm.createdAt.toISOString().slice(0, 10);
                const day = [
                  "Sun",
                  "Mon",
                  "Tue",
                  "Wed",
                  "Thu",
                  "Fri",
                  "Sat"
                ][fm.createdAt.getDay()];
                const text = `${d}, ${day}`;
                rs.push([
                  "paragraph",
                  Renderer.makeLink(this.dv, fm.f, text)
                ]);
              }
            }
          }
        }
      }
    }
    return rs;
  }
  calendar() {
    const rs = [];
    const bins = {};
    const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (fm.fm.at === void 0 && fm.fm.before === void 0 && fm.fm.after === void 0) {
        return false;
      }
      if (fm.fm.status !== "todo") {
        return false;
      }
      if (fm.getProject() === "daily") {
        return false;
      }
      return true;
    });
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      let year = 0;
      let month = 0;
      let day = 0;
      if (fm.fm.before !== void 0) {
        year = fm.before.getFullYear();
        month = fm.before.getMonth();
        day = fm.before.getUTCDate();
      } else if (fm.fm.at !== void 0) {
        year = fm.at.getFullYear();
        month = fm.at.getMonth();
        day = fm.at.getUTCDate();
      } else if (fm.after !== void 0) {
        year = fm.after.getFullYear();
        month = fm.after.getMonth();
        day = fm.after.getUTCDate();
      } else {
        throw new Error();
      }
      if (bins[year] === void 0) {
        bins[year] = {};
      }
      if (bins[year][month] === void 0) {
        bins[year][month] = {};
      }
      if (bins[year][month][day] === void 0) {
        bins[year][month][day] = {};
      }
      if (bins[year][month][day]["at"] === void 0) {
        bins[year][month][day]["at"] = [];
      }
      if (bins[year][month][day]["before"] === void 0) {
        bins[year][month][day]["before"] = [];
      }
      if (bins[year][month][day]["after"] === void 0) {
        bins[year][month][day]["after"] = [];
      }
      if (fm.fm.before !== void 0) {
        bins[year][month][day]["before"].push(page);
      } else if (fm.fm.at !== void 0) {
        bins[year][month][day]["at"].push(page);
      } else {
        bins[year][month][day]["after"].push(page);
      }
    }
    {
      const years = Object.keys(bins);
      years.sort((a, b) => parseInt(a) - parseInt(b));
      for (const year of years) {
        rs.push(["header", 2, year]);
        const months = Object.keys(bins[year]);
        months.sort((a, b) => parseInt(a) - parseInt(b));
        for (const month of months) {
          rs.push([
            "header",
            3,
            `${["January", "Febuary", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][month]}`
          ]);
          const days = Object.keys(bins[year][month]);
          days.sort((a, b) => parseInt(a) - parseInt(b));
          for (const day of days) {
            const weeks = [
              "Sun",
              "Mon",
              "Tue",
              "Wed",
              "Thu",
              "Fri",
              "Sat"
            ];
            const before = bins[year][month][day]["before"];
            const at = bins[year][month][day]["at"];
            const after = bins[year][month][day]["after"];
            console.log(
              `year: ${year}
month: ${month}
day: ${day}`
            );
            if (before.length > 0) {
              for (const page of before) {
                console.log("--- before ---");
                console.log(page);
                console.log("------");
                const fm = new FrontmatterJS(page);
                const text = `before: ${weeks[fm.before.getDay()]} ${day} ${fm.at.toISOString().slice(11, 16)} | ${fm.getProject()}`;
                rs.push([
                  "paragraph",
                  Renderer.makeLink(
                    this.dv,
                    fm.f,
                    text,
                    "Task"
                  )
                ]);
              }
            }
            if (at.length > 0) {
              at.sort((a, b) => {
                const fmA = new FrontmatterJS(a);
                const fmB = new FrontmatterJS(b);
                return fmB.at.getTime() - fmA.at.getTime();
              });
              for (const page of at) {
                console.log("--- at ---");
                console.log(page);
                console.log("------");
                const fm = new FrontmatterJS(page);
                const text = `at: ${weeks[fm.at.getDay()]} ${day} ${fm.at.toISOString().slice(11, 16)} | ${fm.getProject()}`;
                rs.push([
                  "paragraph",
                  Renderer.makeLink(
                    this.dv,
                    fm.f,
                    text,
                    "Task"
                  )
                ]);
              }
            }
            if (after.length > 0) {
              for (const page of after) {
                console.log("--- after ---");
                console.log(page);
                console.log("------");
                const fm = new FrontmatterJS(page);
                const text = ` after: ${weeks[fm.after.getDay()]} ${day} ${fm.at.toISOString().slice(11, 16)} | ${fm.getProject()}`;
                rs.push([
                  "paragraph",
                  Renderer.makeLink(
                    this.dv,
                    fm.f,
                    text,
                    "Task"
                  )
                ]);
              }
            }
          }
        }
      }
    }
    return rs;
  }
  globalTaskList(pages) {
    const rs = [];
    const bins = {};
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      if (fm.getProject() === void 0) {
        fm.projects = ["adhoc"];
      }
      if (bins[fm.getProject()] === void 0) {
        bins[fm.getProject()] = [page];
      } else {
        bins[fm.getProject()].push(page);
      }
    }
    const projects = Object.keys(bins);
    projects.sort();
    for (const project of projects) {
      const tasks = bins[project];
      tasks.sort(Helper.sortByPriorityAndDurationAndAge);
      rs.push(["header", 2, `${project}`]);
      rs.push(["array", Renderer.basicTaskJournal, tasks]);
    }
    return rs;
  }
  nextActions(dv) {
    const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (["daily", "weekly", "monthly", "yearly"].contains(
        fm.getProject()
      )) {
        return false;
      }
      if (!this.projectIsActive(fm.getProject())) {
        return false;
      }
      if (!this.noteHelper.isDoable(page)) {
        return false;
      }
      if (fm.fm.priority === 0) {
        return false;
      }
      return true;
    });
    return this.globalTaskList(pages);
  }
  waitingFor(dv) {
    const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (["daily", "weekly", "monthly", "yearly"].contains(
        fm.getProject()
      )) {
        return false;
      }
      if (!["todo", "waiting"].contains(fm.fm.status)) {
        return false;
      }
      if (!this.projectIsActive(fm.getProject())) {
        return false;
      }
      if (this.noteHelper.isDoable(page) || fm.fm.priority === 0) {
        return false;
      }
      return true;
    });
    return this.globalTaskList(pages);
  }
  projectIsActive(name2) {
    const project = this.dv.pages(`"Projects"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (fm.getName() !== name2) {
        return false;
      }
      if (fm.fm.active === false) {
        return false;
      }
      return true;
    });
    return project.length > 0;
  }
  somedayMaybe(dv) {
    const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (["daily", "weekly", "monthly", "yearly"].contains(
        fm.getProject()
      )) {
        return false;
      }
      if (!this.projectIsActive(fm.getProject())) {
        return false;
      }
      if (!this.noteHelper.isDoable(page) || fm.fm.priority > 0) {
        return false;
      }
      return true;
    });
    return this.globalTaskList(pages);
  }
};
var DvLib = class {
  constructor() {
    this.taskDir = "813 Tasks";
    this.inboxDir = "800 Inbox";
    this.refDir = "802 Refs";
    this.logDir = "600 Log";
    this.Task = {
      BASE: 3,
      DAILY: 4
    };
    this.Type = {
      TASK: 3,
      DAILY: 4,
      LOG: 6
    };
    this.Status = {
      TODO: "todo",
      DONE: "done",
      DOING: "doing",
      TRASH: "trash",
      MAYBE: "maybe",
      STANDBY: "standby"
    };
    this.Namespace = {
      AREA: "area",
      CONTEXT: "context",
      LAYER: "layer",
      ORG: "org",
      PROJECT: "project"
    };
    this.Default = {
      AREA: "none",
      CONTEXT: "any",
      LAYER: "none",
      ORG: "none",
      PROJECT: "none"
    };
    this._dv = "";
  }
  set dv(mod) {
    this._dv = mod;
  }
  get dv() {
    return this._dv;
  }
  isChildTag(parent, child) {
    if (child.length <= parent.length + 1) {
      return false;
    } else if (child.slice(0, parent.length + 1) != `${parent}/`) {
      return false;
    }
    return true;
  }
  stripTag(tag) {
    let t = "";
    if (tag.slice(-1) === "/") {
      t = tag.slice(0, -1);
    } else {
      t = tag;
    }
    if (t.slice(0, 1) === "#") {
      t = t.slice(1, t.length);
    }
    return t;
  }
  getTaskFromUUID(dv, uuid) {
    const n = dv.pages(`"${this.taskDir}/${uuid}"`);
    if (n.length === 0) {
      console.warn(`"${this.taskDir}/${uuid}" task does not exists`);
      return void 0;
    }
    return n[0];
  }
  hasValidFormat(task) {
    const fm = task.file.frontmatter;
    if (fm === void 0) {
      console.warn(
        `"${this.taskDir}/${task.uuid}" task does not have a frontmatter`
      );
      return false;
    }
    if (fm.type === void 0) {
      console.warn(
        `"${this.taskDir}/${task.uuid}" task does not have a \`type\` field`
      );
      return false;
    }
    if (fm.status === void 0) {
      console.warn(
        `"${this.taskDir}/${task.uuid}" task does not have a \`status\` field`
      );
      return false;
    }
    return true;
  }
  hasPendingDependencies(dv, deps) {
    for (const dep of deps) {
      const task = this.getTaskFromUUID(dv, dep);
      if (task === void 0) {
        continue;
      }
      if (!this.hasValidFormat(task)) {
        continue;
      }
      const fm = task.file.frontmatter;
      if (fm.type !== this.Task.BASE && fm.type !== this.Task.DAILY) {
        continue;
      }
      if (fm.status === this.Status.TODO) {
        return true;
      }
    }
    return false;
  }
  isDoable(dv, task) {
    const fm = task.file.frontmatter;
    if (fm.status !== this.Status.TODO) {
      return false;
    }
    if (fm.after !== void 0) {
      const after = new Date(fm.after);
      if (Date.now() <= after.getTime()) {
        return false;
      }
    }
    const deps = fm.needs;
    if (deps === void 0 || deps.length === 0) {
      return true;
    }
    if (this.hasPendingDependencies(dv, deps)) {
      return false;
    }
    return true;
  }
  getNamespaceContent(dv, ns) {
    const children = [];
    const resp = dv.pages(`#${ns}`);
    for (const f of resp) {
      const tags = f.tags;
      if (tags === void 0) {
        continue;
      }
      for (const tag of tags) {
        if (this.isChildTag(ns, tag)) {
          const t = tag.slice(ns.length + 1);
          if (!children.includes(t)) {
            children.push(t);
          }
        }
      }
    }
    return children;
  }
  isDone(dv, dep) {
    const task = this.getTaskFromUUID(dv, dep);
    if (task === void 0) {
      return false;
    }
    if (!this.hasValidFormat(task)) {
      return false;
    }
    const fm = task.file.frontmatter;
    if (fm.status === this.Status.DONE) {
      return true;
    }
    return false;
  }
  getTasks(dv, tag, taskType = [this.Task.BASE, this.Task.DAILY], status = this.Status.TODO) {
    const buff = [];
    const tasks = dv.pages(tag);
    for (const task of tasks) {
      const fm = task.file.frontmatter;
      if (fm === void 0) {
        continue;
      }
      if (fm.status === void 0 || fm.status !== status) {
        continue;
      }
      if (fm.type === void 0 || !taskType.contains(fm.type)) {
        continue;
      }
      buff.push(task);
    }
    return buff;
  }
  formatTask(dv, task) {
    return dv.fileLink(task.file.path);
  }
  formatTaskBis(dv, task) {
    const f = task.file;
    let ctx = "";
    for (const tag of f.tags) {
      if (tag.slice(0, 9) == "#context/") {
        ctx = tag.slice(9);
      }
    }
    return [
      dv.fileLink(f.path),
      dv.markdownTaskList(f.tasks),
      f.frontmatter.time_estimate,
      ctx
    ];
  }
  formatTaskBase(dv, task) {
    const f = task.file;
    const fm = f.frontmatter;
    const tags = fm.tags;
    const area = this.getArea(tags);
    return [
      dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
      dv.markdownTaskList(f.tasks),
      fm.time_estimate,
      area
    ];
  }
  formatTaskWaiting(dv, task) {
    const f = task.file;
    const fm = f.frontmatter;
    const deps = [];
    if (fm.needs !== void 0) {
      for (const dep of fm.needs) {
        deps.push(dv.fileLink(`${this.taskDir}/${dep}`));
      }
    }
  }
  formatTaskMaybe(dv, task) {
    const f = task.file;
    const fm = f.frontmatter;
    const deps = [];
    return [dv.fileLink(f.path)];
  }
  makeAsyncRequest(dv, uuid) {
    return dv.query(`LIST WHERE needs AND contains(needs, "${uuid}")`).then((value) => {
      return value;
    });
  }
  getDependantTasks(dv, task) {
    const buff = [];
    const uuid = task.file.name;
    if (task.file.frontmatter === void 0) {
      return buff;
    }
    const tasks = dv.pages(`"${this.taskDir}"`).where((p) => p.needs !== void 0 && p.needs.contains(uuid));
    for (const tk of tasks) {
      const t = dv.pages(`"${tk.file.path}"`);
      buff.push(t[0]);
    }
    return buff;
  }
  byDependencyAndPriorityAndCreatedAt(dv, a, b) {
    const ftA = a.file.frontmatter;
    const ftB = b.file.frontmatter;
    const prioA = ftA.priority;
    const prioB = ftB.priority;
    const depsA = this.getDependantTasks(dv, a);
    const depsB = this.getDependantTasks(dv, b);
    if (depsA.length - depsB.length !== 0) {
      return depsA.length - depsB.length;
    }
    if (prioA - prioB !== 0) {
      return prioA - prioB;
    }
    const dateA = new Date(ftA.created_at);
    const dateB = new Date(ftB.created_at);
    return (dateA.getTime() - dateB.getTime()) * -1;
  }
  formatTaskPlanningWaiting(dv, task) {
    const f = task.file;
    return [
      // ajouter alias sur le link
      dv.markdownTaskList(f.tasks),
      dv.fileLink(f.path, false, f.name.slice(0, 8)),
      f.frontmatter.time_estimate,
      f.frontmatter.cause
    ];
  }
  renderBaseAsArray(dv, tasks) {
    const arr = [];
    tasks.forEach((task) => {
      arr.push(this.formatTaskBase(dv, task));
    });
    dv.table(["uuid", "tasks", "estimate", "area"], arr);
  }
  renderPlanningWaiting(dv, tasks) {
    const arr = [];
    tasks.forEach((task) => {
      arr.push(this.formatTaskPlanningWaiting(dv, task));
    });
    dv.table(["tasks", "uuid", "estimate", "cause"], arr);
  }
  renderMaybeAsArray(dv, tasks) {
    const arr = [];
    tasks.forEach(({ ref, task }) => {
      if (task !== void 0) {
        arr.push(this.formatTaskMaybe(dv, task));
      }
    });
    dv.table(["uuid"], arr);
  }
  formatTaskDaily(dv, task) {
    const f = task.file;
    const fm = task.file.frontmatter;
    const tags = task.file.tags;
    const areas = [];
    for (const tag of tags) {
      if (tag.slice(0, 6) == "#area/") {
        areas.push(tag.slice(6));
      }
    }
    const links = [];
    for (const link of f.outlinks) {
      links.push(link);
    }
    const tasks = [];
    for (const t of f.tasks) {
      tasks.push(t);
    }
    return [
      dv.fileLink(f.path),
      links.length > 0 ? dv.markdownList(links) : dv.markdownTaskList(tasks),
      fm.time_allocated,
      areas.length > 0 ? dv.markdownList(areas) : ""
    ];
  }
  formatFleeting(dv, task) {
    const f = task.file;
    const fm = task.file.frontmatter;
    const tags = task.file.tags;
    const hours = 3600;
    const days = 86400;
    let dt = new Date();
    if (fm !== void 0 && fm.created_at !== void 0) {
      dt = new Date(fm.created_at);
    } else {
      dt = new Date(f.ctime.ts);
    }
    const now = new Date();
    const delta = (now.getTime() - dt.getTime()) / 1e3;
    let since = "";
    const toDt = (t) => {
      return String(Math.round(t * 10) / 10).padStart(2, "0");
    };
    if (delta >= days) {
      since = toDt(delta / days) + "d";
    } else {
      since = toDt(delta / hours) + "h";
    }
    if (fm.alias === void 0 || fm.alias === "") {
      return [dv.fileLink(`${f.path}`), since, f.size];
    } else {
      return [dv.fileLink(`${f.path}`, false, fm.alias), since, f.size];
    }
  }
  renderDailyAsArray(dv, tasks) {
    const arr = [];
    tasks.forEach((task) => {
      arr.push(this.formatTaskDaily(dv, task));
    });
    dv.table(["uuid", "content", "duration", "area"], arr);
  }
  renderFleetingAsArray(dv, tasks) {
    const arr = [];
    tasks.forEach((task) => {
      arr.push(this.formatFleeting(dv, task));
    });
    dv.table(["content", "age", "size"], arr);
  }
  autoFieldNeed(dv, fm) {
    if (fm.needs === void 0) {
      return;
    }
    const buff = [];
    for (const dep of fm.needs) {
      if (!this.isDone(dv, dep)) {
        buff.push(dv.fileLink(`${this.taskDir}/${dep}`));
      }
    }
    if (buff.length > 0) {
      dv.header(2, "Needs");
      dv.list(buff);
    }
  }
  autoFieldNeededBy(dv, current) {
    const tasks = this.getDependantTasks(dv, current);
    if (tasks.length === 0) {
      return;
    }
    const buff = [];
    for (const task of tasks) {
      if (!this.isDone(dv, task.uuid)) {
        buff.push(dv.fileLink(task.file.path));
      }
    }
    if (buff.length > 0) {
      dv.header(2, "NeededBy");
      dv.list(buff);
    }
  }
  autoFieldTags(dv, fm) {
    const tags = fm.tags;
    if (tags == void 0 || tags.length === 0) {
      return;
    }
    tags.sort();
    dv.header(2, "Tags");
    let s = "";
    for (const tag of tags) {
      s += ` #${tag}`;
    }
    dv.paragraph(s);
  }
  autoFieldTaskBase(dv) {
    const current = dv.current();
    const fm = current.file.frontmatter;
    if (fm === void 0) {
      console.warn("fm is required");
      return;
    }
    const projectName = Helper.getProject(fm);
    if (projectName !== void 0) {
      const projects = dv.pages(`"Projects"`).where((fmP) => {
        if (fmP.name === projectName.slice(8)) {
          return true;
        }
        return false;
      });
      if (projects.length) {
        dv.header(2, "Project");
        dv.paragraph(Renderer.makeLinkName(dv, projects[0].file));
      }
    }
    this.autoFieldNeed(dv, fm);
    this.autoFieldNeededBy(dv, current);
    const logEntries = dv.pages(`"${this.logDir}/${fm.uuid}"`).where((p) => p.type === 6).sort((k) => k.created_at, "desc");
    const buff = [];
    let totalTime = 0;
    for (const entry of logEntries) {
      const fme = entry.file.frontmatter;
      const e = [];
      let start = 0;
      let stop = 0;
      if (fme === void 0 || fme.created_at === void 0) {
        throw new Error(`Invalid frontmatter: ${fme.uuid}`);
      }
      start = new Date(fme.created_at);
      e.push(start.toISOString().slice(0, 10));
      if (fme.done_at === void 0) {
        stop = Date.now();
      } else {
        stop = new Date(fme.done_at);
      }
      totalTime += stop - start;
      e.push(
        dv.sectionLink(
          fme.uuid,
          "## Content",
          false,
          fme.uuid.slice(0, 8)
        )
      );
      e.push(Math.round((stop - start) / (1e3 * 60 * 60) * 10) / 10);
      if (fme.reviewed === void 0 || fme.reviewed === 0) {
        e.push(0);
      } else {
        e.push(fme.reviewed);
      }
      buff.push(e);
    }
    if (buff.length > 0) {
      dv.header(2, "Logs");
      dv.table(["created_at", "uuid", "session", "reviewed"], buff);
      if (totalTime > 0) {
        dv.paragraph(
          `_totalTime (h):_ ${Math.round(totalTime / (1e3 * 60 * 60) * 10) / 10}`
        );
      }
    }
  }
  autoFieldLog(dv) {
    const current = dv.current();
    const fm = current.file.frontmatter;
    if (fm === void 0) {
      return;
    }
    dv.header(2, "Parent");
    dv.paragraph(dv.fileLink(`${this.taskDir}/${fm.parent_id}`));
  }
  autoFieldAuthors(dv, fm) {
    const authors = fm.authors;
    if (authors === void 0 || authors.length === 0) {
      return;
    }
    dv.header(2, "Authors");
    dv.list(authors);
  }
  autoFieldTitle(dv, fm) {
    const title = fm.alias;
    if (title == void 0) {
      return;
    }
    dv.header(1, title);
  }
  autoFieldLiteratureNote(dv) {
    const current = dv.current();
    const fm = current.file.frontmatter;
    if (fm === void 0) {
      return;
    }
    this.autoFieldTitle(dv, fm);
    this.autoFieldAuthors(dv, fm);
    this.autoFieldTags(dv, fm);
  }
  autoFieldPermanent(dv) {
    const current = dv.current();
    const fm = current.file.frontmatter;
    if (fm === void 0) {
      return;
    }
    this.autoFieldTags(dv, fm);
  }
  autoFieldTask(dv) {
    return this.autoFieldTaskBase(dv);
  }
  autoFieldLiterature(dv) {
    return this.autoFieldLiteratureNote(dv);
  }
  autoFieldFleeting(dv) {
    return;
  }
  autoFieldSupply(dv) {
    return;
  }
  findTasksByProject(dv, name2) {
    const buff = [];
    if (name2 !== "" && name2 !== "none") {
      const tasks = this.getTasks(dv, `${this.Namespace.PROJECT}/none`, [
        this.Task.BASE
      ]);
      for (const task of tasks) {
        const fm = task.file.frontmatter;
        if (this.isDoable(dv, task)) {
          buff.push(task);
        }
      }
    } else {
      const tasks = this.getTasks(dv, "", [this.Task.BASE]);
      for (const task of tasks) {
        const fm = task.file.frontmatter;
        const tags = fm.tags;
        if (fm.tags === void 0 && (name2 === "" || name2 === "none") || fm.tags.contains(`${this.Namespace.PROJECT}/none`)) {
          if (this.isDoable(dv, task)) {
            buff.push(task);
          }
        }
      }
    }
    buff.sort();
    return buff;
  }
  getTag(tags, type) {
    let name2 = "";
    let defaultValue = "";
    if (type === "area") {
      name2 = this.Namespace.AREA;
      defaultValue = this.Default.AREA;
    } else if (type === "context") {
      name2 = this.Namespace.CONTEXT;
      defaultValue = this.Default.CONTEXT;
    } else if (type === "layer") {
      name2 = this.Namespace.LAYER;
      defaultValue = this.Default.LAYER;
    } else if (type === "org") {
      name2 = this.Namespace.ORG;
      defaultValue = this.Default.ORG;
    } else if (type === "project") {
      name2 = this.Namespace.PROJECT;
      defaultValue = this.Default.PROJECT;
    } else {
      throw new Error(`getTag got unsuported type: ${type}`);
    }
    const len = name2.length + 1;
    const defaultTag = `${name2}/${defaultValue}`;
    if (tags === void 0) {
      return defaultTag;
    }
    for (const tag of tags) {
      if (tag.length > len && tag.slice(0, len) == `${name2}/`) {
        return tag;
      }
    }
    return defaultTag;
  }
  getArea(tags) {
    return this.getTag(tags, "area");
  }
  getContext(tags) {
    return this.getTag(tags, "context");
  }
  getLayer(tags) {
    return this.getTag(tags, "layer");
  }
  getOrg(tags) {
    return this.getTag(tags, "org");
  }
  getProject(tags) {
    return this.getTag(tags, "project");
  }
  parseListFrontmatter(fm) {
    let minPriority = 0;
    if (fm.min_priority !== void 0) {
      minPriority = fm.min_priority;
    }
    let ignore = [];
    if (fm.ignore !== void 0) {
      ignore = fm.ignore;
    }
    let byAreas = [];
    if (fm.by_areas !== void 0) {
      byAreas = fm.by_areas;
    }
    let byProjects = [];
    if (fm.by_projects !== void 0) {
      byProjects = fm.by_projects;
    }
    return [minPriority, ignore, byAreas, byProjects];
  }
  renderNamespaceContent(dv) {
    const self = dv.current();
    const name2 = self.file.name.toLowerCase().slice(0, -1);
    dv.header(1, "Index");
    dv.header(2, `${self.file.name}`);
    const tags = this.getNamespaceContent(dv, name2);
    tags.sort();
    for (const tag of tags) {
      dv.paragraph(`#${name2}/${tag}`);
    }
  }
  renderUnprocessedLogs(dv) {
    const logs = dv.pages(`"${this.logDir}"`).where(
      (p) => p.type === this.Type.LOG && (p.reviewd === void 0 || p.reviewed < 1)
    ).sort((k) => k.created_at, "asc");
    const buff = [];
    const arr = [];
    logs.forEach((entry) => {
      const fm = entry.file.frontmatter;
      if (fm === void 0) {
        return;
      }
      const parentId = fm.parent_id;
      if (parentId === void 0) {
        throw new Error(`Invalid log entry: ${entry.file.path}`);
      }
      const parent = dv.pages(`"${this.taskDir}/${parentId}"`);
      const parentFm = parent.file.frontmatter;
      if (parentFm === void 0) {
        throw new Error(`Invalid task: ${parent.file.path}`);
      }
      let project = this.getProject(parentFm.tags);
      if (project === `${this.Namespace.PROJECT}/${this.Default.PROJECT}`) {
        project = "";
      }
      let area = this.getArea(parentFm.tags);
      if (area === `${this.Namespace.AREA}/${this.Default.AREA}`) {
        area = "";
      }
      const formated = [];
      formated.push(
        dv.sectionLink(
          entry.file.path,
          "Content",
          false,
          `${fm.uuid.slice(0, 8)}`
        )
      );
      const createdAt = new Date(fm.created_at);
      formated.push(createdAt.toISOString().slice(0, 10));
      formated.push(project);
      formated.push(area);
      arr.push(formated);
    });
    dv.table(["uuid", "created_at", "project", "area"], arr);
  }
  assertTaskDoneAt(dv, taskId) {
    const task = dv.pages(`"${this.taskDir}/${taskId}"`);
    if (task.length === 0) {
      throw new Error(`task: ${taskId} doest not exists`);
    }
    const fm = task.file.frontmatter;
    if (fm === void 0) {
      throw new Error(`task: ${taskId} does not have a frontmatter`);
    }
    const logs = dv.pages(`"${this.logDir}/${taskId}"`).sort((k) => k.created_at, "asc");
    if (logs.length < 1) {
      throw new Error(`task: ${taskId} has no Logs`);
    }
    const lastEntry = logs[logs.length - 1];
    if (lastEntry.file.frontmatter.done_at === void 0) {
      throw new Error(
        `task: ${taskId} last entry is missing 'done_at' field`
      );
    }
    const doneAt = new Date(lastEntry.file.frontmatter.done_at);
    return [
      dv.sectionLink(
        task.file.path,
        "Content",
        false,
        `${task.file.frontmatter.uuid.slice(0, 8)}`
      ),
      `${doneAt.toISOString().slice(0, 10)}`
    ];
  }
  getDoneTimeline(dv) {
    const tasks = dv.pages(`"${this.taskDir}"`).where((p) => p.status === "done");
    const buff = [];
    for (const task of tasks) {
      const fm = task.file.frontmatter;
      if (fm === void 0) {
        throw new Error(`task: ${fm.uuid} does not have a frontmatter`);
      }
      const logs = dv.pages(`"${this.logDir}/${fm.uuid}"`).sort((k) => k.created_at, "asc");
      if (logs.length < 1) {
        console.warn(`task: ${fm.uuid} has no Logs`);
      }
      const lastEntry = logs[logs.length - 1];
      if (lastEntry === void 0) {
        continue;
      }
      if (lastEntry.file.frontmatter.done_at === void 0) {
        throw new Error(
          `task: ${fm.uuid} last entry is missing 'done_at' field`
        );
      }
      fm.doneAt = new Date(lastEntry.file.frontmatter.done_at);
      buff.push(task);
    }
    buff.sort((a, b) => {
      const dateA = new Date(a.file.frontmatter.doneAt);
      const dateB = new Date(b.file.frontmatter.doneAt);
      return (dateA.getTime() - dateB.getTime()) * -1;
    });
    const arr = [];
    buff.forEach((e) => {
      arr.push([
        dv.sectionLink(
          e.file.path,
          "Content",
          false,
          `${e.file.frontmatter.uuid.slice(0, 8)}`
        ),
        `${e.file.frontmatter.doneAt.toISOString().slice(0, 16)}`
      ]);
    });
    dv.table(["uuid", "doneAt"], arr);
  }
  durationStringToSec(val) {
    const mult = val.slice(-1);
    let m = 0;
    if (mult === "h") {
      m = 60 * 60;
    } else if (mult === "m") {
      m = 60;
    } else if (mult === "d") {
      m = 24 * 60 * 60;
    } else {
      console.warn(`Unhandled case mult: ${mult}`);
    }
    return m * parseInt(val.slice(0, -1));
  }
  testDvFunc() {
    const dv = app.plugins.plugins.dataview.api;
    const tasks = dv.pages(`"${this.taskDir}"`).where((p) => p.status === "done");
    const buff = [];
    for (const task of tasks) {
      const fm = task.file.frontmatter;
      if (fm === void 0) {
        throw new Error(`task: ${fm.uuid} does not have a frontmatter`);
      }
      const logs = dv.pages(`"${this.logDir}/${fm.uuid}"`).sort((k) => k.created_at, "asc");
      if (logs.length < 1) {
        console.warn(`task: ${fm.uuid} has no Logs`);
      }
      const lastEntry = logs[logs.length - 1];
      if (lastEntry === void 0) {
        continue;
      }
      if (lastEntry.file.frontmatter.done_at === void 0) {
        throw new Error(
          `task: ${fm.uuid} last entry is missing 'done_at' field`
        );
      }
      fm.doneAt = new Date(lastEntry.file.frontmatter.done_at);
      buff.push(task);
    }
    buff.sort((a, b) => {
      const dateA = new Date(a.file.frontmatter.doneAt);
      const dateB = new Date(b.file.frontmatter.doneAt);
      return (dateA.getTime() - dateB.getTime()) * -1;
    });
    const arr = [];
    buff.forEach((e) => {
      arr.push([
        dv.sectionLink(
          e.file.path,
          "Content",
          false,
          `${e.file.frontmatter.uuid.slice(0, 8)}`
        ),
        `${e.file.frontmatter.doneAt.toISOString().slice(0, 16)}`
      ]);
    });
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var MyPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.vaultContent = [];
    this.vaultContentDict = {};
  }
  openViewInNewTabIfNotOpened(name2) {
    const f = app.vault.getAbstractFileByPath(name2);
    if (f === void 0 || f === null) {
      console.warn(`file not found ${name2}`);
      return;
    }
    const active = this.app.workspace.activeLeaf;
    const root = active.parent;
    let found = false;
    let node = void 0;
    const emptyTabs = [];
    for (const leaf of root.children) {
      const file = this.getFileFromLeaf(leaf);
      if (file === void 0 || file === null) {
        emptyTabs.push(leaf);
        continue;
      }
      if (file.name === f.name) {
        found = true;
        node = leaf;
      }
    }
    if (!found) {
      if (emptyTabs.length > 0) {
        node = emptyTabs[0];
      } else {
        this.app.workspace.createLeafInParent(
          root,
          root.children.length + 1
        );
        node = root.children[root.children.length - 1];
      }
    }
    node.openFile(f, {
      active: true
    });
  }
  openInNewTabIfNotOpened(page) {
    const active = this.app.workspace.activeLeaf;
    const root = active.parent;
    let found = false;
    let node = void 0;
    const emptyTabs = [];
    for (const leaf of root.children) {
      const file = this.getFileCacheFromLeaf(leaf);
      if (file === void 0 || file === null) {
        emptyTabs.push(leaf);
        continue;
      }
      if (file.frontmatter !== void 0 && file.frontmatter.uuid === page.file.frontmatter.uuid) {
        found = true;
        node = leaf;
        break;
      }
    }
    if (!found) {
      if (emptyTabs.length > 0) {
        node = emptyTabs[0];
      } else {
        this.app.workspace.createLeafInParent(
          root,
          root.children.length + 1
        );
        node = root.children[root.children.length - 1];
      }
    }
    node.openFile(this.app.vault.getAbstractFileByPath(page.file.path), {
      active: true
    });
  }
  getFileCacheFromLeaf(leaf) {
    let file = void 0;
    try {
      file = leaf.view.file;
    } catch (e) {
      return void 0;
    }
    if (file === void 0 || file === null) {
      return void 0;
    }
    const abstractPath = app.vault.getAbstractFileByPath(file);
    return app.metadataCache.getFileCache(abstractPath);
  }
  getFileFromLeaf(leaf) {
    let file = void 0;
    try {
      file = leaf.view.file;
    } catch (e) {
      return void 0;
    }
    return app.vault.getAbstractFileByPath(file);
  }
  extractUUIDFromLink(link) {
    Assert.True(
      link.length >= 36,
      `extractUUIDFromLink: Invalid parameter type: link: "${link}"`
    );
    Assert.True(
      Helper.isUUID(link.slice(0, 36)),
      `extractUUIDFromLink: Invalid parameter type: link: "${link}"`
    );
    if (link.length === 36) {
      return link;
    } else {
      return link.slice(0, 36);
    }
  }
  grugAlias(_id) {
    const cache = this.getFileCacheFromUUID(_id);
    if (cache === void 0) {
      console.error(`grugAlias: file not found in grug cache ${_id}`);
      return "";
    }
    const [start, end] = this.getContentBoundaries(cache);
    let targetName = void 0;
    const nameHeading = this.getResourceName(cache, start, end);
    const fm = cache.frontmatter;
    if (fm.alias !== void 0) {
      if (Array.isArray(fm.alias) && fm.alias.length > 0) {
        targetName = cache.frontmatter.alias[0];
      } else {
        targetName = cache.frontmatter.alias;
      }
    } else {
      targetName = nameHeading;
    }
    const file = this.getFileFromUUID(_id);
    if (file === void 0) {
      console.error(`grugAlias: Cannot grug this id: ${_id}`);
      return "";
    }
    const path = `${file.path.split("/").slice(0, -1)}/${_id}`;
    return `[[${path}#${nameHeading}|${targetName}]]`;
  }
  getFileFromUUID(_id) {
    return this.vaultContentDict[_id];
  }
  getFileCacheFromUUID(_id) {
    const f = this.vaultContentDict[_id];
    if (f === void 0) {
      return void 0;
    }
    return app.metadataCache.getFileCache(f);
  }
  async onload() {
    var _a, _b;
    console.log("gonext - onload()");
    await this.loadSettings();
    this.metadataCache = this.app.metadataCache;
    this.workspace = this.app.workspace;
    this.dv = this.app.plugins.plugins.dataview.api;
    this.frontmatter = new Frontmatter(this);
    this.listMaker = new ListMaker(this, this.dv, this.frontmatter);
    this.generate = new Generator(this.app);
    this.files = {};
    this.api = {
      getArea: Helper.getArea,
      getContext: Helper.getContext,
      getDomain: Helper.getDomain,
      getLayer: Helper.getLayer,
      getOrg: Helper.getOrg,
      getProject: Helper.getProject,
      durationStringToSec: Helper.durationStringToSec,
      paths: Paths,
      types: Types,
      status: Status,
      namespace: Namespace,
      default: Default,
      frontmatter: this.frontmatter,
      listMaker: this.listMaker,
      renderer: Renderer,
      autoField: AutoField,
      dvLib: new DvLib(),
      FrontmatterJS
    };
    window.gonext = {
      // @ts-ignore
      state: (_b = (_a = window.gonext) == null ? void 0 : _a.state) != null ? _b : {},
      // @ts-ignore
      app: this.app
    };
    (0, import_obsidian.addIcon)(
      "GoNextIcon",
      `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><path fill="currentColor" d="M20 12V2h2v10zm4 0V2h2v10zm4 0V2h2v10zm-12 8a3.912 3.912 0 0 1-4-4a3.912 3.912 0 0 1 4-4v-2a6 6 0 1 0 6 6h-2a3.912 3.912 0 0 1-4 4"></path><path fill="currentColor" d="M28.893 18.454L26.098 16l-1.318 1.504l2.792 2.452l-2.36 4.088l-3.427-1.16a9.032 9.032 0 0 1-2.714 1.565L18.36 28h-4.72l-.71-3.55a9.095 9.095 0 0 1-2.695-1.572l-3.447 1.166l-2.36-4.088l2.725-2.395a8.926 8.926 0 0 1-.007-3.128l-2.718-2.39l2.36-4.087l3.427 1.16A9.03 9.03 0 0 1 12.93 7.55L13.64 4H16V2h-2.36a2 2 0 0 0-1.961 1.608l-.504 2.519a10.967 10.967 0 0 0-1.327.753l-2.42-.819a1.998 1.998 0 0 0-2.372.895l-2.36 4.088a2 2 0 0 0 .411 2.502l1.931 1.697C5.021 15.495 5 15.745 5 16c0 .258.01.513.028.766l-1.92 1.688a2 2 0 0 0-.413 2.502l2.36 4.088a1.998 1.998 0 0 0 2.374.895l2.434-.824a10.974 10.974 0 0 0 1.312.759l.503 2.518A2 2 0 0 0 13.64 30h4.72a2 2 0 0 0 1.961-1.608l.504-2.519a10.967 10.967 0 0 0 1.327-.753l2.419.818a1.998 1.998 0 0 0 2.373-.894l2.36-4.088a2 2 0 0 0-.411-2.502"></path></svg>`
    );
    this.addRibbonIcon("GoNextIcon", "[g]o[n]ext", async () => {
      this.generate.fleeting();
    });
    this.addCommand({
      id: "open-index",
      name: "Open Index",
      // @ts-ignore
      callback: () => {
        this.openViewInNewTabIfNotOpened("INDEX.md");
      }
    });
    this.addCommand({
      id: "open-inbox",
      name: "Open Inbox",
      // @ts-ignore
      callback: () => {
        this.openViewInNewTabIfNotOpened("INBOX.md");
      }
    });
    this.addCommand({
      id: "open-projects",
      name: "Open Projects",
      // @ts-ignore
      callback: () => {
        this.openViewInNewTabIfNotOpened(
          "803 Slipbox/664dc855-eabe-40dc-90b8-006223457953.md"
        );
      }
    });
    this.addCommand({
      id: "open-planning",
      name: "Open Planning",
      // @ts-ignore
      callback: () => {
        this.openViewInNewTabIfNotOpened("Planning.md");
      }
    });
    this.addCommand({
      id: "open-journal",
      name: "Open Journal",
      // @ts-ignore
      callback: () => {
        this.openViewInNewTabIfNotOpened(
          "803 Slipbox/67fb49c2-05d1-48be-98ce-27b269660957.md"
        );
      }
    });
    this.addCommand({
      id: "open-next_actions",
      name: "Open Next Actions",
      // @ts-ignore
      callback: () => {
        this.openViewInNewTabIfNotOpened("NEXT ACTIONS.md");
      }
    });
    this.addCommand({
      id: "open-someday_maybe",
      name: "Open Someday Maybe",
      // @ts-ignore
      callback: () => {
        this.openViewInNewTabIfNotOpened("SOMEDAY MAYBE.md");
      }
    });
    this.addCommand({
      id: "open-waiting_for",
      name: "Open Waiting For",
      // @ts-ignore
      callback: () => {
        this.openViewInNewTabIfNotOpened("WAITING FOR.md");
      }
    });
    this.addCommand({
      id: "open-todays-log",
      name: "Open Today's Logs",
      // @ts-ignore
      callback: () => {
        const now = new Date();
        const nowIso = now.toISOString().slice(0, 10);
        const pages = this.dv.pages(`"${Paths.Slipbox}"`).where((page) => {
          const fm = new FrontmatterJS(page);
          const cache = this.getFileCacheFromUUID(fm.uuid);
          const [start, end] = this.getContentBoundaries(cache);
          if (start === 0 && end === 0) {
            return false;
          }
          const nameHeading = this.getResourceName(
            cache,
            start,
            end
          );
          if (nameHeading === void 0) {
            return false;
          }
          if (nameHeading !== nowIso) {
            return false;
          }
          return true;
        });
        if (pages.length === 0) {
          this.generate.permanent(nowIso);
          return;
        }
        this.openInNewTabIfNotOpened(pages[0]);
      }
    });
    this.addCommand({
      id: "open-yesterdays-logs",
      name: "Open Yesterday's Logs",
      // @ts-ignore
      callback: () => {
        const now = new Date();
        now.setDate(now.getDate() - 1);
        const nowIso = now.toISOString().slice(0, 10);
        const pages = this.dv.pages(`"${Paths.Slipbox}"`).where((page) => {
          const fm = new FrontmatterJS(page);
          const cache = this.getFileCacheFromUUID(fm.uuid);
          const [start, end] = this.getContentBoundaries(cache);
          if (start === 0 && end === 0) {
            return false;
          }
          const nameHeading = this.getResourceName(
            cache,
            start,
            end
          );
          if (nameHeading === void 0) {
            return false;
          }
          if (nameHeading !== nowIso) {
            return false;
          }
          return true;
        });
        if (pages.length === 0) {
          return;
        }
        this.openInNewTabIfNotOpened(pages[0]);
      }
    });
    this.addCommand({
      id: "open-todays-daily",
      name: "Open Today's Daily",
      // @ts-ignore
      callback: () => {
        const now = new Date();
        const nowIso = now.toISOString().slice(0, 10);
        const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
          if (page.file.frontmatter.at === void 0) {
            return false;
          }
          const fm = new FrontmatterJS(page);
          if (fm.getProject() !== "daily") {
            return false;
          }
          let fmIso = void 0;
          try {
            fmIso = fm.at.toISOString().slice(0, 10);
          } catch (e) {
            console.warn(`possible invalid data in ${fm.uuid}`);
            return false;
          }
          if (fmIso === nowIso) {
            return true;
          }
          return false;
        });
        if (pages.length === 0) {
          return;
        }
        this.openInNewTabIfNotOpened(pages[0]);
      }
    });
    this.addCommand({
      id: "open-tomorrows-daily",
      name: "Open Tomorrow's Daily",
      // @ts-ignore
      callback: () => {
        const now = new Date();
        now.setDate(now.getDate() + 1);
        const nowIso = now.toISOString().slice(0, 10);
        const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
          if (page.file.frontmatter.at === void 0) {
            return false;
          }
          const fm = new FrontmatterJS(page);
          if (fm.getProject() !== "daily") {
            return false;
          }
          let fmIso = void 0;
          try {
            fmIso = fm.at.toISOString().slice(0, 10);
          } catch (e) {
            console.warn(`possible invalid data in ${fm.uuid}`);
            return false;
          }
          if (fmIso === nowIso) {
            return true;
          }
          return false;
        });
        if (pages.length === 0) {
          return;
        }
        this.openInNewTabIfNotOpened(pages[0]);
      }
    });
    this.addCommand({
      id: "open-yesterdays-daily",
      name: "Open Yesterday's Daily",
      // @ts-ignore
      callback: () => {
        const now = new Date();
        now.setDate(now.getDate() - 1);
        const nowIso = now.toISOString().slice(0, 10);
        const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
          if (page.file.frontmatter.at === void 0) {
            return false;
          }
          const fm = new FrontmatterJS(page);
          if (fm.getProject() !== "daily") {
            return false;
          }
          let fmIso = void 0;
          try {
            fmIso = fm.at.toISOString().slice(0, 10);
          } catch (e) {
            console.warn(`possible invalid data in ${fm.uuid}`);
            return false;
          }
          if (fmIso === nowIso) {
            return true;
          }
          return false;
        });
        if (pages.length === 0) {
          return;
        }
        this.openInNewTabIfNotOpened(pages[0]);
      }
    });
    this.addCommand({
      id: "generate-fleeting",
      name: "Generate fleeting note",
      // @ts-ignore
      callback: () => {
        this.generate.fleeting();
      }
    });
    this.addCommand({
      id: "clippy-the-clipper",
      name: "Clippy Clip",
      // @ts-ignore
      callback: () => {
        navigator.clipboard.readText().then((text) => {
          let _id = void 0;
          try {
            _id = this.extractUUIDFromLink(text);
          } catch (e) {
            return;
          }
          const file = this.getFileFromUUID(_id);
          Assert.True(
            file !== void 0,
            `getFileFromUUID: returned undefined for uuid: ${_id}`
          );
          const rootDir = file.path.split("/")[0];
          const authorized = [Paths.Slipbox, Paths.Refs];
          if (rootDir !== void 0 && authorized.contains(rootDir)) {
            const alias = this.grugAlias(_id);
            const activeLeaf = this.app.workspace.activeLeaf;
            if (activeLeaf) {
              const editor = activeLeaf.view.sourceMode.cmEditor;
              const cursor = editor.getCursor();
              editor.replaceRange(alias, cursor);
            }
          } else {
            console.log(
              `Does not work outside slibe-box, got ${file.path}`
            );
            return;
          }
        });
      }
    });
    this.addCommand({
      id: "safe-delete",
      name: "Safe Delete",
      // @ts-ignore
      callback: () => {
        const file = app.workspace.getActiveFile();
        if (file === void 0) {
          return;
        }
        const safeFromHarm = [
          "Calendar.md",
          "DISCARDED.md",
          "Energy.md",
          "Goals.md",
          "Inbox.md",
          "INDEX.md",
          "Logs.md",
          "Mandala.md",
          "NEXT ACTIONS.md",
          "Planning.md",
          "Projects.md",
          "SOMEDAY MAYBE.md",
          "WAITING FOR.md"
        ];
        const fm = this.app.metadataCache.getFileCache(file).frontmatter;
        if (safeFromHarm.contains(file.path)) {
          console.log(
            "Oopsie, almost did an oopsie. Got your back bro"
          );
          return;
        }
        if (fm.tags !== void 0 && fm.tags.length >= 0) {
          for (const tag of fm.tags) {
            if (tag === "project/daily") {
              console.log(
                "Hey George What's up George, You cannot do that George"
              );
              return;
            }
          }
        }
        console.log(`deleted file: ${file.path}`);
        this.app.vault.delete(file);
      }
    });
    this.addCommand({
      id: "append-to-inbox",
      name: "Append to Inbox",
      // @ts-ignore
      callback: () => {
        const f = app.vault.getAbstractFileByPath("INBOX.md");
        if (f === void 0 || f === null) {
          console.warn(`file not found ${name}`);
          return;
        }
        const active = this.app.workspace.activeLeaf;
        const root = active.parent;
        let found = false;
        let node = void 0;
        const emptyTabs = [];
        for (const leaf of root.children) {
          const file = this.getFileFromLeaf(leaf);
          if (file === void 0 || file === null) {
            emptyTabs.push(leaf);
            continue;
          }
          if (file.name === f.name) {
            found = true;
            node = leaf;
          }
        }
        if (!found) {
          if (emptyTabs.length > 0) {
            node = emptyTabs[0];
          } else {
            this.app.workspace.createLeafInParent(
              root,
              root.children.length + 1
            );
            node = root.children[root.children.length - 1];
          }
        }
        const editor = node.view.sourceMode.cmEditor;
        editor.insertText("\n\n---\n\n", editor.lastLine());
        node.openFile(f, {
          active: true
        });
        return;
      }
    });
    this.app.metadataCache.on(
      "changed",
      (file, data, cache) => {
        const fm = cache.frontmatter;
        if (Helper.isUUID(file.basename)) {
          this.vaultContentDict[file.basename] = file;
        }
      }
    );
    this.app.workspace.onLayoutReady(() => {
      console.log("workspace - layout-ready");
      for (const f of this.app.vault.getFiles()) {
        if (!Helper.isUUID(f.basename)) {
          continue;
        }
        this.vaultContentDict[f.basename] = f;
      }
    });
  }
  commonDataValidation(path, note) {
    Assert.True(note !== void 0, `'note': undefined 'path': ${path}`);
    const fm = note.frontmatter;
    Assert.True(
      fm !== void 0,
      `Invalid FrontMatter in: ${path.join("/")}`
    );
    Assert.True(note.headings !== void 0, `Blank resource: ${fm.uuid}`);
  }
  getContentBoundaries(note) {
    let fm = void 0;
    try {
      fm = note.frontmatter;
    } catch (e) {
      return [0, 0];
    }
    let found = false;
    let start = 0;
    let end = 0;
    for (const heading of note.headings) {
      if (heading.level === 2 && heading.heading.toLowerCase() === "content") {
        found = true;
        start = heading.position.end.offset;
        continue;
      }
      if (found && heading.level === 2 && heading.heading.toLowerCase() !== "content") {
        end = heading.position.start.offset;
      }
    }
    Assert.True(found, `Resource does not declares content: ${fm.uuid}`);
    if (end === 0) {
      end = note.sections[note.sections.length - 1].position.end.offset;
    }
    return [start, end];
  }
  getResourceName(note, start, end) {
    let resourceName = "";
    let lvl3HeadingCount = 0;
    let fm = void 0;
    try {
      fm = note.frontmatter;
    } catch (e) {
      console.log(note);
      return;
    }
    for (const heading of note.headings) {
      if (heading.level === 3 && heading.position.start.offset > start && heading.position.end.offset < end) {
        resourceName = heading.heading;
        lvl3HeadingCount++;
      }
    }
    Assert.False(
      lvl3HeadingCount > 1,
      `Resource has multiple names: ${fm.uuid}`
    );
    return resourceName;
  }
  onunload() {
    console.log("gonext - onunload()");
    delete window.gonext;
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJjb25zdGFudHMudHMiLCAibm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9zdHJpbmdpZnkuanMiLCAibm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9ybmcuanMiLCAibm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9uYXRpdmUuanMiLCAibm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92NC5qcyIsICJhcGkudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7XG4gIEFwcCxcbiAgTW9kYWwsXG4gIFBsdWdpbixcbiAgV29ya3NwYWNlLFxuICAvLyBAdHMtaWdub3JlXG4gIEhUTUxFbGVtZW50LFxuICBhZGRJY29uLFxuICBDYWNoZWRNZXRhZGF0YSxcbiAgVEZpbGUsXG4gIFRBYnN0cmFjdEZpbGUsXG59IGZyb20gXCJvYnNpZGlhblwiO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHtcbiAgSGVscGVyLFxuICBGcm9udG1hdHRlcixcbiAgTGlzdE1ha2VyLFxuICAvLyBAdHMtaWdub3JlXG4gIE5hbWVzcGFjZSxcbiAgLy8gQHRzLWlnbm9yZVxuICBSZW5kZXJlcixcbiAgLy8gQHRzLWlnbm9yZVxuICBBdXRvRmllbGQsXG4gIC8vIEB0cy1pZ25vcmVcbiAgRnJvbnRtYXR0ZXJKUyxcbiAgRHZMaWIsXG4gIC8vIEB0cy1pZ25vcmVcbiAgR2VuZXJhdG9yLFxuICAvLyBAdHMtaWdub3JlXG4gIEFzc2VydCxcbn0gZnJvbSBcIi4vYXBpXCI7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgeyBQYXRocywgU3RhdHVzLCBUeXBlcywgTmFtZXNwYWNlLCBEZWZhdWx0IH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5cbi8vIFJlbWVtYmVyIHRvIHJlbmFtZSB0aGVzZSBjbGFzc2VzIGFuZCBpbnRlcmZhY2VzIVxuaW50ZXJmYWNlIE15UGx1Z2luU2V0dGluZ3Mge1xuICBteVNldHRpbmc6IHN0cmluZztcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogTXlQbHVnaW5TZXR0aW5ncyA9IHtcbiAgbXlTZXR0aW5nOiBcImRlZmF1bHRcIixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE15UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgc2V0dGluZ3M6IE15UGx1Z2luU2V0dGluZ3M7XG4gIHdvcmtzcGFjZTogV29ya3NwYWNlO1xuICBtZXRhZGF0YUNhY2hlOiBhbnk7XG4gIGR2OiBhbnk7XG4gIC8vIEB0cy1pZ25vcmVcbiAgcmVuZGVyOiBSZW5kZXI7XG4gIGRlYnVnOiBib29sZWFuO1xuICB0YXNrSW5TdGF0dXNCYXI6IEhUTUxFbGVtZW50O1xuICBhcGk6IGFueTtcbiAgbGlzdE1ha2VyOiBMaXN0TWFrZXI7XG4gIGZyb250bWF0dGVyOiBGcm9udG1hdHRlcjtcbiAgZ2VuZXJhdGU6IEdlbmVyYXRvcjtcbiAgdmF1bHRDb250ZW50OiBURmlsZVtdID0gW107XG4gIHZhdWx0Q29udGVudERpY3Q6IHsgW2lkOiBzdHJpbmddOiBURmlsZSB9ID0ge307XG5cbiAgb3BlblZpZXdJbk5ld1RhYklmTm90T3BlbmVkKG5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IGYgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG5hbWUpO1xuICAgIGlmIChmID09PSB1bmRlZmluZWQgfHwgZiA9PT0gbnVsbCkge1xuICAgICAgY29uc29sZS53YXJuKGBmaWxlIG5vdCBmb3VuZCAke25hbWV9YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYWN0aXZlID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWY7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IHJvb3QgPSBhY3RpdmUucGFyZW50O1xuICAgIC8vIHJlY2hlcmNoZXIgc2kgcGFzIGRcdTAwRTlqYSBvdXZlcnQgZGFucyBsZXMgb25nbGV0cyBhY3RpZnNcbiAgICAvLyBzaW5vbiBjclx1MDBFOWVyIHVuIG5vdXZlbCBvbmdsZXQsIG91dnJpciBsZSBmaWNoaWVyLCBldCBlbiBmYWlyZSBsJ29uZ2xldCBhY3RpZlxuICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgIGxldCBub2RlID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGVtcHR5VGFicyA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBsZWFmIG9mIHJvb3QuY2hpbGRyZW4pIHtcbiAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldEZpbGVGcm9tTGVhZihsZWFmKTtcbiAgICAgIGlmIChmaWxlID09PSB1bmRlZmluZWQgfHwgZmlsZSA9PT0gbnVsbCkge1xuICAgICAgICBlbXB0eVRhYnMucHVzaChsZWFmKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWxlLm5hbWUgPT09IGYubmFtZSkge1xuICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgIG5vZGUgPSBsZWFmO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWZvdW5kKSB7XG4gICAgICBpZiAoZW1wdHlUYWJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbm9kZSA9IGVtcHR5VGFic1swXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5jcmVhdGVMZWFmSW5QYXJlbnQoXG4gICAgICAgICAgcm9vdCxcbiAgICAgICAgICByb290LmNoaWxkcmVuLmxlbmd0aCArIDEsXG4gICAgICAgICk7XG4gICAgICAgIG5vZGUgPSByb290LmNoaWxkcmVuW3Jvb3QuY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgbm9kZS5vcGVuRmlsZShmLCB7XG4gICAgICBhY3RpdmU6IHRydWUsXG4gICAgfSk7XG4gIH1cblxuICBvcGVuSW5OZXdUYWJJZk5vdE9wZW5lZChwYWdlKSB7XG4gICAgY29uc3QgYWN0aXZlID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWY7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IHJvb3QgPSBhY3RpdmUucGFyZW50O1xuICAgIC8vIHJlY2hlcmNoZXIgc2kgcGFzIGRcdTAwRTlqYSBvdXZlcnQgZGFucyBsZXMgb25nbGV0cyBhY3RpZnNcbiAgICAvLyBzaW5vbiBjclx1MDBFOWVyIHVuIG5vdXZlbCBvbmdsZXQsIG91dnJpciBsZSBmaWNoaWVyLCBldCBlbiBmYWlyZSBsJ29uZ2xldCBhY3RpZlxuICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgIGxldCBub2RlID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGVtcHR5VGFicyA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBsZWFmIG9mIHJvb3QuY2hpbGRyZW4pIHtcbiAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldEZpbGVDYWNoZUZyb21MZWFmKGxlYWYpO1xuICAgICAgaWYgKGZpbGUgPT09IHVuZGVmaW5lZCB8fCBmaWxlID09PSBudWxsKSB7XG4gICAgICAgIGVtcHR5VGFicy5wdXNoKGxlYWYpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBmaWxlLmZyb250bWF0dGVyICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgZmlsZS5mcm9udG1hdHRlci51dWlkID09PSBwYWdlLmZpbGUuZnJvbnRtYXR0ZXIudXVpZFxuICAgICAgKSB7XG4gICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgbm9kZSA9IGxlYWY7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZm91bmQpIHtcbiAgICAgIGlmIChlbXB0eVRhYnMubGVuZ3RoID4gMCkge1xuICAgICAgICBub2RlID0gZW1wdHlUYWJzWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLmNyZWF0ZUxlYWZJblBhcmVudChcbiAgICAgICAgICByb290LFxuICAgICAgICAgIHJvb3QuY2hpbGRyZW4ubGVuZ3RoICsgMSxcbiAgICAgICAgKTtcbiAgICAgICAgbm9kZSA9IHJvb3QuY2hpbGRyZW5bcm9vdC5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBub2RlLm9wZW5GaWxlKHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwYWdlLmZpbGUucGF0aCksIHtcbiAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIGdldEZpbGVDYWNoZUZyb21MZWFmKGxlYWYpOiBDYWNoZWRNZXRhZGF0YSB7XG4gICAgbGV0IGZpbGUgPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGZpbGUgPSBsZWFmLnZpZXcuZmlsZTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChmaWxlID09PSB1bmRlZmluZWQgfHwgZmlsZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGFic3RyYWN0UGF0aCA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZSk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYWJzdHJhY3RQYXRoKTtcbiAgfVxuXG4gIGdldEZpbGVGcm9tTGVhZihsZWFmKTogVEFic3RyYWN0RmlsZSB7XG4gICAgbGV0IGZpbGUgPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGZpbGUgPSBsZWFmLnZpZXcuZmlsZTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlKTtcbiAgfVxuXG4gIGV4dHJhY3RVVUlERnJvbUxpbmsobGluazogc3RyaW5nKSB7XG4gICAgQXNzZXJ0LlRydWUoXG4gICAgICBsaW5rLmxlbmd0aCA+PSAzNixcbiAgICAgIGBleHRyYWN0VVVJREZyb21MaW5rOiBJbnZhbGlkIHBhcmFtZXRlciB0eXBlOiBsaW5rOiBcIiR7bGlua31cImAsXG4gICAgKTtcblxuICAgIC8vIGF0IHRoaXMgcG9pbnQgbGluayBpcyBlaXRoZXIgZm9ybSB1dWlkI2hlYWRpbmcgfHwgaW52YWxpZFxuICAgIC8vIHdlIGNhbiBzYWZlbHkgYXNzdW1lIDA6MzYgaXMgdGhlIHV1aWRcbiAgICBBc3NlcnQuVHJ1ZShcbiAgICAgIEhlbHBlci5pc1VVSUQobGluay5zbGljZSgwLCAzNikpLFxuICAgICAgYGV4dHJhY3RVVUlERnJvbUxpbms6IEludmFsaWQgcGFyYW1ldGVyIHR5cGU6IGxpbms6IFwiJHtsaW5rfVwiYCxcbiAgICApO1xuICAgIGlmIChsaW5rLmxlbmd0aCA9PT0gMzYpIHtcbiAgICAgIHJldHVybiBsaW5rO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbGluay5zbGljZSgwLCAzNik7XG4gICAgfVxuICB9XG5cbiAgZ3J1Z0FsaWFzKF9pZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBjYWNoZSA9IHRoaXMuZ2V0RmlsZUNhY2hlRnJvbVVVSUQoX2lkKTtcbiAgICBpZiAoY2FjaGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcihgZ3J1Z0FsaWFzOiBmaWxlIG5vdCBmb3VuZCBpbiBncnVnIGNhY2hlICR7X2lkfWApO1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgY29uc3QgW3N0YXJ0LCBlbmRdID0gdGhpcy5nZXRDb250ZW50Qm91bmRhcmllcyhjYWNoZSk7XG4gICAgLy8gd2hhdCBpcyB0aGUgbmFtaW5nIHByZWZlcmVuY2U/XG4gICAgLy8gYWxpYXMgPiBuYW1lIGhlYWRpbmdcbiAgICBsZXQgdGFyZ2V0TmFtZSA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBuYW1lSGVhZGluZyA9IHRoaXMuZ2V0UmVzb3VyY2VOYW1lKGNhY2hlLCBzdGFydCwgZW5kKTtcblxuICAgIGNvbnN0IGZtID0gY2FjaGUuZnJvbnRtYXR0ZXI7XG5cbiAgICBpZiAoZm0uYWxpYXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZm0uYWxpYXMpICYmIGZtLmFsaWFzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gcHJvYmxlbSBhdGhlaXN0cz9cbiAgICAgICAgdGFyZ2V0TmFtZSA9IGNhY2hlLmZyb250bWF0dGVyLmFsaWFzWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0TmFtZSA9IGNhY2hlLmZyb250bWF0dGVyLmFsaWFzO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXROYW1lID0gbmFtZUhlYWRpbmc7XG4gICAgfVxuXG4gICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0RmlsZUZyb21VVUlEKF9pZCk7XG4gICAgaWYgKGZpbGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcihgZ3J1Z0FsaWFzOiBDYW5ub3QgZ3J1ZyB0aGlzIGlkOiAke19pZH1gKTtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBjb25zdCBwYXRoID0gYCR7ZmlsZS5wYXRoLnNwbGl0KFwiL1wiKS5zbGljZSgwLCAtMSl9LyR7X2lkfWA7XG5cbiAgICByZXR1cm4gYFtbJHtwYXRofSMke25hbWVIZWFkaW5nfXwke3RhcmdldE5hbWV9XV1gO1xuICB9XG5cbiAgZ2V0RmlsZUZyb21VVUlEKF9pZDogc3RyaW5nKTogVEFic3RyYWN0RmlsZSB7XG4gICAgcmV0dXJuIHRoaXMudmF1bHRDb250ZW50RGljdFtfaWRdO1xuICB9XG5cbiAgZ2V0RmlsZUNhY2hlRnJvbVVVSUQoX2lkOiBzdHJpbmcpOiBDYWNoZWRNZXRhZGF0YSB7XG4gICAgY29uc3QgZiA9IHRoaXMudmF1bHRDb250ZW50RGljdFtfaWRdO1xuICAgIGlmIChmID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmKTtcbiAgfVxuXG4gIGFzeW5jIG9ubG9hZCgpIHtcbiAgICBjb25zb2xlLmxvZyhcImdvbmV4dCAtIG9ubG9hZCgpXCIpO1xuICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG4gICAgdGhpcy5tZXRhZGF0YUNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZTtcbiAgICB0aGlzLndvcmtzcGFjZSA9IHRoaXMuYXBwLndvcmtzcGFjZTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdGhpcy5kdiA9IHRoaXMuYXBwLnBsdWdpbnMucGx1Z2lucy5kYXRhdmlldy5hcGk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHRoaXMuZnJvbnRtYXR0ZXIgPSBuZXcgRnJvbnRtYXR0ZXIodGhpcyk7XG4gICAgdGhpcy5saXN0TWFrZXIgPSBuZXcgTGlzdE1ha2VyKHRoaXMsIHRoaXMuZHYsIHRoaXMuZnJvbnRtYXR0ZXIpO1xuICAgIHRoaXMuZ2VuZXJhdGUgPSBuZXcgR2VuZXJhdG9yKHRoaXMuYXBwKTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdGhpcy5maWxlcyA9IHt9O1xuXG4gICAgdGhpcy5hcGkgPSB7XG4gICAgICBnZXRBcmVhOiBIZWxwZXIuZ2V0QXJlYSxcbiAgICAgIGdldENvbnRleHQ6IEhlbHBlci5nZXRDb250ZXh0LFxuICAgICAgZ2V0RG9tYWluOiBIZWxwZXIuZ2V0RG9tYWluLFxuICAgICAgZ2V0TGF5ZXI6IEhlbHBlci5nZXRMYXllcixcbiAgICAgIGdldE9yZzogSGVscGVyLmdldE9yZyxcbiAgICAgIGdldFByb2plY3Q6IEhlbHBlci5nZXRQcm9qZWN0LFxuICAgICAgZHVyYXRpb25TdHJpbmdUb1NlYzogSGVscGVyLmR1cmF0aW9uU3RyaW5nVG9TZWMsXG4gICAgICBwYXRoczogUGF0aHMsXG4gICAgICB0eXBlczogVHlwZXMsXG4gICAgICBzdGF0dXM6IFN0YXR1cyxcbiAgICAgIG5hbWVzcGFjZTogTmFtZXNwYWNlLFxuICAgICAgZGVmYXVsdDogRGVmYXVsdCxcbiAgICAgIGZyb250bWF0dGVyOiB0aGlzLmZyb250bWF0dGVyLFxuICAgICAgbGlzdE1ha2VyOiB0aGlzLmxpc3RNYWtlcixcbiAgICAgIHJlbmRlcmVyOiBSZW5kZXJlcixcbiAgICAgIGF1dG9GaWVsZDogQXV0b0ZpZWxkLFxuICAgICAgZHZMaWI6IG5ldyBEdkxpYigpLFxuICAgICAgRnJvbnRtYXR0ZXJKUzogRnJvbnRtYXR0ZXJKUyxcbiAgICB9O1xuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHdpbmRvdy5nb25leHQgPSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBzdGF0ZTogd2luZG93LmdvbmV4dD8uc3RhdGUgPz8ge30sXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBhcHA6IHRoaXMuYXBwLFxuICAgIH07XG4gICAgYWRkSWNvbihcbiAgICAgIFwiR29OZXh0SWNvblwiLFxuICAgICAgYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIzMlwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk0yMCAxMlYyaDJ2MTB6bTQgMFYyaDJ2MTB6bTQgMFYyaDJ2MTB6bS0xMiA4YTMuOTEyIDMuOTEyIDAgMCAxLTQtNGEzLjkxMiAzLjkxMiAwIDAgMSA0LTR2LTJhNiA2IDAgMSAwIDYgNmgtMmEzLjkxMiAzLjkxMiAwIDAgMS00IDRcIj48L3BhdGg+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNMjguODkzIDE4LjQ1NEwyNi4wOTggMTZsLTEuMzE4IDEuNTA0bDIuNzkyIDIuNDUybC0yLjM2IDQuMDg4bC0zLjQyNy0xLjE2YTkuMDMyIDkuMDMyIDAgMCAxLTIuNzE0IDEuNTY1TDE4LjM2IDI4aC00LjcybC0uNzEtMy41NWE5LjA5NSA5LjA5NSAwIDAgMS0yLjY5NS0xLjU3MmwtMy40NDcgMS4xNjZsLTIuMzYtNC4wODhsMi43MjUtMi4zOTVhOC45MjYgOC45MjYgMCAwIDEtLjAwNy0zLjEyOGwtMi43MTgtMi4zOWwyLjM2LTQuMDg3bDMuNDI3IDEuMTZBOS4wMyA5LjAzIDAgMCAxIDEyLjkzIDcuNTVMMTMuNjQgNEgxNlYyaC0yLjM2YTIgMiAwIDAgMC0xLjk2MSAxLjYwOGwtLjUwNCAyLjUxOWExMC45NjcgMTAuOTY3IDAgMCAwLTEuMzI3Ljc1M2wtMi40Mi0uODE5YTEuOTk4IDEuOTk4IDAgMCAwLTIuMzcyLjg5NWwtMi4zNiA0LjA4OGEyIDIgMCAwIDAgLjQxMSAyLjUwMmwxLjkzMSAxLjY5N0M1LjAyMSAxNS40OTUgNSAxNS43NDUgNSAxNmMwIC4yNTguMDEuNTEzLjAyOC43NjZsLTEuOTIgMS42ODhhMiAyIDAgMCAwLS40MTMgMi41MDJsMi4zNiA0LjA4OGExLjk5OCAxLjk5OCAwIDAgMCAyLjM3NC44OTVsMi40MzQtLjgyNGExMC45NzQgMTAuOTc0IDAgMCAwIDEuMzEyLjc1OWwuNTAzIDIuNTE4QTIgMiAwIDAgMCAxMy42NCAzMGg0LjcyYTIgMiAwIDAgMCAxLjk2MS0xLjYwOGwuNTA0LTIuNTE5YTEwLjk2NyAxMC45NjcgMCAwIDAgMS4zMjctLjc1M2wyLjQxOS44MThhMS45OTggMS45OTggMCAwIDAgMi4zNzMtLjg5NGwyLjM2LTQuMDg4YTIgMiAwIDAgMC0uNDExLTIuNTAyXCI+PC9wYXRoPjwvc3ZnPmAsXG4gICAgKTtcblxuICAgIHRoaXMuYWRkUmliYm9uSWNvbihcIkdvTmV4dEljb25cIiwgXCJbZ11vW25dZXh0XCIsIGFzeW5jICgpID0+IHtcbiAgICAgIHRoaXMuZ2VuZXJhdGUuZmxlZXRpbmcoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICBpZDogXCJvcGVuLWluZGV4XCIsXG4gICAgICBuYW1lOiBcIk9wZW4gSW5kZXhcIixcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgIHRoaXMub3BlblZpZXdJbk5ld1RhYklmTm90T3BlbmVkKFwiSU5ERVgubWRcIik7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICBpZDogXCJvcGVuLWluYm94XCIsXG4gICAgICBuYW1lOiBcIk9wZW4gSW5ib3hcIixcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgIHRoaXMub3BlblZpZXdJbk5ld1RhYklmTm90T3BlbmVkKFwiSU5CT1gubWRcIik7XG4gICAgICAgIC8vIGFwcC5jb21tYW5kcy5leGVjdXRlQ29tbWFuZEJ5SWQoJ21hcmtkb3duOnRvZ2dsZS1wcmV2aWV3Jyk7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICBpZDogXCJvcGVuLXByb2plY3RzXCIsXG4gICAgICBuYW1lOiBcIk9wZW4gUHJvamVjdHNcIixcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgIHRoaXMub3BlblZpZXdJbk5ld1RhYklmTm90T3BlbmVkKFxuICAgICAgICAgIFwiODAzIFNsaXBib3gvNjY0ZGM4NTUtZWFiZS00MGRjLTkwYjgtMDA2MjIzNDU3OTUzLm1kXCIsXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICBpZDogXCJvcGVuLXBsYW5uaW5nXCIsXG4gICAgICBuYW1lOiBcIk9wZW4gUGxhbm5pbmdcIixcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgIHRoaXMub3BlblZpZXdJbk5ld1RhYklmTm90T3BlbmVkKFwiUGxhbm5pbmcubWRcIik7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICBpZDogXCJvcGVuLWpvdXJuYWxcIixcbiAgICAgIG5hbWU6IFwiT3BlbiBKb3VybmFsXCIsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICB0aGlzLm9wZW5WaWV3SW5OZXdUYWJJZk5vdE9wZW5lZChcbiAgICAgICAgICBcIjgwMyBTbGlwYm94LzY3ZmI0OWMyLTA1ZDEtNDhiZS05OGNlLTI3YjI2OTY2MDk1Ny5tZFwiLFxuICAgICAgICApO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgaWQ6IFwib3Blbi1uZXh0X2FjdGlvbnNcIixcbiAgICAgIG5hbWU6IFwiT3BlbiBOZXh0IEFjdGlvbnNcIixcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgIHRoaXMub3BlblZpZXdJbk5ld1RhYklmTm90T3BlbmVkKFwiTkVYVCBBQ1RJT05TLm1kXCIpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgaWQ6IFwib3Blbi1zb21lZGF5X21heWJlXCIsXG4gICAgICBuYW1lOiBcIk9wZW4gU29tZWRheSBNYXliZVwiLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgdGhpcy5vcGVuVmlld0luTmV3VGFiSWZOb3RPcGVuZWQoXCJTT01FREFZIE1BWUJFLm1kXCIpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgaWQ6IFwib3Blbi13YWl0aW5nX2ZvclwiLFxuICAgICAgbmFtZTogXCJPcGVuIFdhaXRpbmcgRm9yXCIsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICB0aGlzLm9wZW5WaWV3SW5OZXdUYWJJZk5vdE9wZW5lZChcIldBSVRJTkcgRk9SLm1kXCIpO1xuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICBpZDogXCJvcGVuLXRvZGF5cy1sb2dcIixcbiAgICAgIG5hbWU6IFwiT3BlbiBUb2RheSdzIExvZ3NcIixcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGNvbnN0IG5vd0lzbyA9IG5vdy50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCBwYWdlcyA9IHRoaXMuZHZcbiAgICAgICAgICAucGFnZXMoYFwiJHtQYXRocy5TbGlwYm94fVwiYClcbiAgICAgICAgICAud2hlcmUoKHBhZ2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZtID0gbmV3IEZyb250bWF0dGVySlMocGFnZSk7XG4gICAgICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMuZ2V0RmlsZUNhY2hlRnJvbVVVSUQoZm0udXVpZCk7XG4gICAgICAgICAgICBjb25zdCBbc3RhcnQsIGVuZF0gPSB0aGlzLmdldENvbnRlbnRCb3VuZGFyaWVzKGNhY2hlKTtcbiAgICAgICAgICAgIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmFtZUhlYWRpbmcgPSB0aGlzLmdldFJlc291cmNlTmFtZShcbiAgICAgICAgICAgICAgY2FjaGUsXG4gICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICBlbmQsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKG5hbWVIZWFkaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5hbWVIZWFkaW5nICE9PSBub3dJc28pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGhpcy5nZXRSZXNvdXJjZU5hbWVcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChwYWdlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAvLyBjcmVhdGUgcGVybWFuZW50XG4gICAgICAgICAgdGhpcy5nZW5lcmF0ZS5wZXJtYW5lbnQobm93SXNvKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9wZW5Jbk5ld1RhYklmTm90T3BlbmVkKHBhZ2VzWzBdKTtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgaWQ6IFwib3Blbi15ZXN0ZXJkYXlzLWxvZ3NcIixcbiAgICAgIG5hbWU6IFwiT3BlbiBZZXN0ZXJkYXkncyBMb2dzXCIsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBub3cuc2V0RGF0ZShub3cuZ2V0RGF0ZSgpIC0gMSk7XG4gICAgICAgIGNvbnN0IG5vd0lzbyA9IG5vdy50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCBwYWdlcyA9IHRoaXMuZHZcbiAgICAgICAgICAucGFnZXMoYFwiJHtQYXRocy5TbGlwYm94fVwiYClcbiAgICAgICAgICAud2hlcmUoKHBhZ2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZtID0gbmV3IEZyb250bWF0dGVySlMocGFnZSk7XG4gICAgICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMuZ2V0RmlsZUNhY2hlRnJvbVVVSUQoZm0udXVpZCk7XG4gICAgICAgICAgICBjb25zdCBbc3RhcnQsIGVuZF0gPSB0aGlzLmdldENvbnRlbnRCb3VuZGFyaWVzKGNhY2hlKTtcbiAgICAgICAgICAgIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmFtZUhlYWRpbmcgPSB0aGlzLmdldFJlc291cmNlTmFtZShcbiAgICAgICAgICAgICAgY2FjaGUsXG4gICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICBlbmQsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKG5hbWVIZWFkaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5hbWVIZWFkaW5nICE9PSBub3dJc28pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGhpcy5nZXRSZXNvdXJjZU5hbWVcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChwYWdlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9wZW5Jbk5ld1RhYklmTm90T3BlbmVkKHBhZ2VzWzBdKTtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgaWQ6IFwib3Blbi10b2RheXMtZGFpbHlcIixcbiAgICAgIG5hbWU6IFwiT3BlbiBUb2RheSdzIERhaWx5XCIsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBjb25zdCBub3dJc28gPSBub3cudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgcGFnZXMgPSB0aGlzLmR2XG4gICAgICAgICAgLnBhZ2VzKGBcIiR7UGF0aHMuVGFza3N9XCJgKVxuICAgICAgICAgIC53aGVyZSgocGFnZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHBhZ2UuZmlsZS5mcm9udG1hdHRlci5hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYXNzaWduIG5vdyBzaSBhdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICBjb25zdCBmbSA9IG5ldyBGcm9udG1hdHRlckpTKHBhZ2UpO1xuICAgICAgICAgICAgaWYgKGZtLmdldFByb2plY3QoKSAhPT0gXCJkYWlseVwiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGZtSXNvID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZm1Jc28gPSBmbS5hdC50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKTtcbiAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYHBvc3NpYmxlIGludmFsaWQgZGF0YSBpbiAke2ZtLnV1aWR9YCk7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZtSXNvID09PSBub3dJc28pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICBpZiAocGFnZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vcGVuSW5OZXdUYWJJZk5vdE9wZW5lZChwYWdlc1swXSk7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgIGlkOiBcIm9wZW4tdG9tb3Jyb3dzLWRhaWx5XCIsXG4gICAgICBuYW1lOiBcIk9wZW4gVG9tb3Jyb3cncyBEYWlseVwiLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgbm93LnNldERhdGUobm93LmdldERhdGUoKSArIDEpO1xuICAgICAgICBjb25zdCBub3dJc28gPSBub3cudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcblxuICAgICAgICBjb25zdCBwYWdlcyA9IHRoaXMuZHZcbiAgICAgICAgICAucGFnZXMoYFwiJHtQYXRocy5UYXNrc31cImApXG4gICAgICAgICAgLndoZXJlKChwYWdlKSA9PiB7XG4gICAgICAgICAgICBpZiAocGFnZS5maWxlLmZyb250bWF0dGVyLmF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBhc3NpZ24gbm93IHNpIGF0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbnN0IGZtID0gbmV3IEZyb250bWF0dGVySlMocGFnZSk7XG4gICAgICAgICAgICBpZiAoZm0uZ2V0UHJvamVjdCgpICE9PSBcImRhaWx5XCIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZm1Jc28gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmbUlzbyA9IGZtLmF0LnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApO1xuICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihgcG9zc2libGUgaW52YWxpZCBkYXRhIGluICR7Zm0udXVpZH1gKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZm1Jc28gPT09IG5vd0lzbykge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChwYWdlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9wZW5Jbk5ld1RhYklmTm90T3BlbmVkKHBhZ2VzWzBdKTtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgaWQ6IFwib3Blbi15ZXN0ZXJkYXlzLWRhaWx5XCIsXG4gICAgICBuYW1lOiBcIk9wZW4gWWVzdGVyZGF5J3MgRGFpbHlcIixcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgIG5vdy5zZXREYXRlKG5vdy5nZXREYXRlKCkgLSAxKTtcbiAgICAgICAgY29uc3Qgbm93SXNvID0gbm93LnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG5cbiAgICAgICAgY29uc3QgcGFnZXMgPSB0aGlzLmR2XG4gICAgICAgICAgLnBhZ2VzKGBcIiR7UGF0aHMuVGFza3N9XCJgKVxuICAgICAgICAgIC53aGVyZSgocGFnZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHBhZ2UuZmlsZS5mcm9udG1hdHRlci5hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYXNzaWduIG5vdyBzaSBhdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICBjb25zdCBmbSA9IG5ldyBGcm9udG1hdHRlckpTKHBhZ2UpO1xuICAgICAgICAgICAgaWYgKGZtLmdldFByb2plY3QoKSAhPT0gXCJkYWlseVwiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGZtSXNvID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZm1Jc28gPSBmbS5hdC50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKTtcbiAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYHBvc3NpYmxlIGludmFsaWQgZGF0YSBpbiAke2ZtLnV1aWR9YCk7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZtSXNvID09PSBub3dJc28pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICBpZiAocGFnZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vcGVuSW5OZXdUYWJJZk5vdE9wZW5lZChwYWdlc1swXSk7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgIGlkOiBcImdlbmVyYXRlLWZsZWV0aW5nXCIsXG4gICAgICBuYW1lOiBcIkdlbmVyYXRlIGZsZWV0aW5nIG5vdGVcIixcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGUuZmxlZXRpbmcoKTtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgaWQ6IFwiY2xpcHB5LXRoZS1jbGlwcGVyXCIsXG4gICAgICBuYW1lOiBcIkNsaXBweSBDbGlwXCIsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLnJlYWRUZXh0KCkudGhlbigodGV4dCkgPT4ge1xuICAgICAgICAgIGxldCBfaWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIF9pZCA9IHRoaXMuZXh0cmFjdFVVSURGcm9tTGluayh0ZXh0KTtcbiAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0RmlsZUZyb21VVUlEKF9pZCk7XG4gICAgICAgICAgQXNzZXJ0LlRydWUoXG4gICAgICAgICAgICBmaWxlICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBgZ2V0RmlsZUZyb21VVUlEOiByZXR1cm5lZCB1bmRlZmluZWQgZm9yIHV1aWQ6ICR7X2lkfWAsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCByb290RGlyID0gZmlsZS5wYXRoLnNwbGl0KFwiL1wiKVswXTtcbiAgICAgICAgICBjb25zdCBhdXRob3JpemVkID0gW1BhdGhzLlNsaXBib3gsIFBhdGhzLlJlZnNdO1xuICAgICAgICAgIGlmIChyb290RGlyICE9PSB1bmRlZmluZWQgJiYgYXV0aG9yaXplZC5jb250YWlucyhyb290RGlyKSkge1xuICAgICAgICAgICAgY29uc3QgYWxpYXMgPSB0aGlzLmdydWdBbGlhcyhfaWQpO1xuICAgICAgICAgICAgLy8gbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoYWxpYXMpLnRoZW4oKCkgPT4ge2NvbnNvbGUubG9nKFwiY291Y291LCBldGMgZXRjXCIpfSk7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdCBhY3RpdmVMZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWY7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBpZiAoYWN0aXZlTGVhZikge1xuICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgIGNvbnN0IGVkaXRvciA9IGFjdGl2ZUxlYWYudmlldy5zb3VyY2VNb2RlLmNtRWRpdG9yO1xuICAgICAgICAgICAgICBjb25zdCBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XG4gICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoYWxpYXMsIGN1cnNvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICBgRG9lcyBub3Qgd29yayBvdXRzaWRlIHNsaWJlLWJveCwgZ290ICR7ZmlsZS5wYXRofWAsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgIGlkOiBcInNhZmUtZGVsZXRlXCIsXG4gICAgICBuYW1lOiBcIlNhZmUgRGVsZXRlXCIsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICBjb25zdCBmaWxlID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgIGlmIChmaWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzYWZlRnJvbUhhcm0gPSBbXG4gICAgICAgICAgXCJDYWxlbmRhci5tZFwiLFxuICAgICAgICAgIFwiRElTQ0FSREVELm1kXCIsXG4gICAgICAgICAgXCJFbmVyZ3kubWRcIixcbiAgICAgICAgICBcIkdvYWxzLm1kXCIsXG4gICAgICAgICAgXCJJbmJveC5tZFwiLFxuICAgICAgICAgIFwiSU5ERVgubWRcIixcbiAgICAgICAgICBcIkxvZ3MubWRcIixcbiAgICAgICAgICBcIk1hbmRhbGEubWRcIixcbiAgICAgICAgICBcIk5FWFQgQUNUSU9OUy5tZFwiLFxuICAgICAgICAgIFwiUGxhbm5pbmcubWRcIixcbiAgICAgICAgICBcIlByb2plY3RzLm1kXCIsXG4gICAgICAgICAgXCJTT01FREFZIE1BWUJFLm1kXCIsXG4gICAgICAgICAgXCJXQUlUSU5HIEZPUi5tZFwiLFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBmbSA9XG4gICAgICAgICAgdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSkuZnJvbnRtYXR0ZXI7XG4gICAgICAgIGlmIChzYWZlRnJvbUhhcm0uY29udGFpbnMoZmlsZS5wYXRoKSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgXCJPb3BzaWUsIGFsbW9zdCBkaWQgYW4gb29wc2llLiBHb3QgeW91ciBiYWNrIGJyb1wiLFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZtLnRhZ3MgIT09IHVuZGVmaW5lZCAmJiBmbS50YWdzLmxlbmd0aCA+PSAwKSB7XG4gICAgICAgICAgZm9yIChjb25zdCB0YWcgb2YgZm0udGFncykge1xuICAgICAgICAgICAgaWYgKHRhZyA9PT0gXCJwcm9qZWN0L2RhaWx5XCIpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgXCJIZXkgR2VvcmdlIFdoYXQncyB1cCBHZW9yZ2UsIFlvdSBjYW5ub3QgZG8gdGhhdCBHZW9yZ2VcIixcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGUubG9nKGBkZWxldGVkIGZpbGU6ICR7ZmlsZS5wYXRofWApO1xuICAgICAgICB0aGlzLmFwcC52YXVsdC5kZWxldGUoZmlsZSk7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgIGlkOiBcImFwcGVuZC10by1pbmJveFwiLFxuICAgICAgbmFtZTogXCJBcHBlbmQgdG8gSW5ib3hcIixcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgIC8vIG91dmVydHVyZSBwYXMgaW5zdGFudGFuXHUwMEU5ZVxuICAgICAgICBjb25zdCBmID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChcIklOQk9YLm1kXCIpO1xuICAgICAgICBpZiAoZiA9PT0gdW5kZWZpbmVkIHx8IGYgPT09IG51bGwpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYGZpbGUgbm90IGZvdW5kICR7bmFtZX1gKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhY3RpdmUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZjtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCByb290ID0gYWN0aXZlLnBhcmVudDtcbiAgICAgICAgLy8gcmVjaGVyY2hlciBzaSBwYXMgZFx1MDBFOWphIG91dmVydCBkYW5zIGxlcyBvbmdsZXRzIGFjdGlmc1xuICAgICAgICAvLyBzaW5vbiBjclx1MDBFOWVyIHVuIG5vdXZlbCBvbmdsZXQsIG91dnJpciBsZSBmaWNoaWVyLCBldCBlbiBmYWlyZSBsJ29uZ2xldCBhY3RpZlxuICAgICAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgbGV0IG5vZGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGVtcHR5VGFicyA9IFtdO1xuXG4gICAgICAgIGZvciAoY29uc3QgbGVhZiBvZiByb290LmNoaWxkcmVuKSB7XG4gICAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0RmlsZUZyb21MZWFmKGxlYWYpO1xuICAgICAgICAgIGlmIChmaWxlID09PSB1bmRlZmluZWQgfHwgZmlsZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgZW1wdHlUYWJzLnB1c2gobGVhZik7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZmlsZS5uYW1lID09PSBmLm5hbWUpIHtcbiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIG5vZGUgPSBsZWFmO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICBpZiAoZW1wdHlUYWJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIG5vZGUgPSBlbXB0eVRhYnNbMF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5jcmVhdGVMZWFmSW5QYXJlbnQoXG4gICAgICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgICAgIHJvb3QuY2hpbGRyZW4ubGVuZ3RoICsgMSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBub2RlID0gcm9vdC5jaGlsZHJlbltyb290LmNoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgZWRpdG9yID0gbm9kZS52aWV3LnNvdXJjZU1vZGUuY21FZGl0b3I7XG4gICAgICAgIGVkaXRvci5pbnNlcnRUZXh0KFwiXFxuXFxuLS0tXFxuXFxuXCIsIGVkaXRvci5sYXN0TGluZSgpKTtcblxuICAgICAgICBub2RlLm9wZW5GaWxlKGYsIHtcbiAgICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGVkaXRvci5zZXRMaW5lKGVkaXRvci5sYXN0TGluZSgpKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICAgIC8vIG5hdmlnYXRvci5jbGlwYm9hcmQucmVhZFRleHQoKS50aGVuKCh0ZXh0KSA9PiB7XG4gICAgICAgIC8vIFx0bGV0IF9pZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gXHR0cnkge1xuICAgICAgICAvLyBcdFx0X2lkID0gdGhpcy5leHRyYWN0VVVJREZyb21MaW5rKHRleHQpO1xuICAgICAgICAvLyBcdH0gY2F0Y2gge1xuICAgICAgICAvLyBcdFx0cmV0dXJuO1xuICAgICAgICAvLyBcdH1cbiAgICAgICAgLy8gXHRjb25zdCBmaWxlID0gdGhpcy5nZXRGaWxlRnJvbVVVSUQoX2lkKTtcbiAgICAgICAgLy8gXHRBc3NlcnQuVHJ1ZShcbiAgICAgICAgLy8gXHRcdGZpbGUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gXHRcdGBnZXRGaWxlRnJvbVVVSUQ6IHJldHVybmVkIHVuZGVmaW5lZCBmb3IgdXVpZDogJHtfaWR9YCxcbiAgICAgICAgLy8gXHQpO1xuICAgICAgICAvLyBcdGNvbnN0IHJvb3REaXIgPSBmaWxlLnBhdGguc3BsaXQoXCIvXCIpWzBdO1xuICAgICAgICAvLyBcdGNvbnN0IGF1dGhvcml6ZWQgPSBbUGF0aHMuU2xpcGJveCwgUGF0aHMuUmVmc107XG4gICAgICAgIC8vIFx0aWYgKHJvb3REaXIgIT09IHVuZGVmaW5lZCAmJiBhdXRob3JpemVkLmNvbnRhaW5zKHJvb3REaXIpKSB7XG4gICAgICAgIC8vIFx0XHRjb25zdCBhbGlhcyA9IHRoaXMuZ3J1Z0FsaWFzKF9pZCk7XG4gICAgICAgIC8vIFx0XHQvLyBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChhbGlhcykudGhlbigoKSA9PiB7Y29uc29sZS5sb2coXCJjb3Vjb3UsIGV0YyBldGNcIil9KTtcbiAgICAgICAgLy8gXHRcdC8vIEB0cy1pZ25vcmVcbiAgICAgICAgLy8gXHR9IGVsc2Uge1xuICAgICAgICAvLyBcdFx0Y29uc29sZS5sb2coXG4gICAgICAgIC8vIFx0XHRcdGBEb2VzIG5vdCB3b3JrIG91dHNpZGUgc2xpYmUtYm94LCBnb3QgJHtmaWxlLnBhdGh9YCxcbiAgICAgICAgLy8gXHRcdCk7XG4gICAgICAgIC8vIFx0XHRyZXR1cm47XG4gICAgICAgIC8vIFx0fVxuICAgICAgICAvLyB9KTtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyBob29rIHBvdXIgbWV0dHJlIFx1MDBFMCBqb3VyIGxlcyBhbGlhc1xuICAgIHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUub24oXG4gICAgICBcImNoYW5nZWRcIixcbiAgICAgIChmaWxlOiBURmlsZSwgZGF0YTogc3RyaW5nLCBjYWNoZTogQ2FjaGVkTWV0YWRhdGEpID0+IHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJtZXRhZGF0YUNhY2hlIC0gY2hhbmdlZFwiKTtcbiAgICAgICAgY29uc3QgZm0gPSBjYWNoZS5mcm9udG1hdHRlcjtcbiAgICAgICAgaWYgKEhlbHBlci5pc1VVSUQoZmlsZS5iYXNlbmFtZSkpIHtcbiAgICAgICAgICB0aGlzLnZhdWx0Q29udGVudERpY3RbZmlsZS5iYXNlbmFtZV0gPSBmaWxlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICk7XG5cbiAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub25MYXlvdXRSZWFkeSgoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcIndvcmtzcGFjZSAtIGxheW91dC1yZWFkeVwiKTtcbiAgICAgIGZvciAoY29uc3QgZiBvZiB0aGlzLmFwcC52YXVsdC5nZXRGaWxlcygpKSB7XG4gICAgICAgIGlmICghSGVscGVyLmlzVVVJRChmLmJhc2VuYW1lKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52YXVsdENvbnRlbnREaWN0W2YuYmFzZW5hbWVdID0gZjtcbiAgICAgIH1cblxuICAgICAgLy8gdGhpcy5sb2FkSW5kZXgoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbW1vbkRhdGFWYWxpZGF0aW9uKHBhdGg6IHN0cmluZ1tdLCBub3RlOiBDYWNoZWRNZXRhZGF0YSkge1xuICAgIC8vIHBhcyBkJ2FjY2VzIGF1IG5vbSBkdSBmaWNoaWVyLCBhdSBjaGVtaW4gYXZlYyBsZSBDYWNoZWRNZXRhZGF0YVxuICAgIC8vIGNvdW50IGRlIGhlYWRpbmdzIGxldmVsIDMgPT09IDFcbiAgICBBc3NlcnQuVHJ1ZShub3RlICE9PSB1bmRlZmluZWQsIGAnbm90ZSc6IHVuZGVmaW5lZCAncGF0aCc6ICR7cGF0aH1gKTtcbiAgICBjb25zdCBmbSA9IG5vdGUuZnJvbnRtYXR0ZXI7XG4gICAgQXNzZXJ0LlRydWUoXG4gICAgICBmbSAhPT0gdW5kZWZpbmVkLFxuICAgICAgYEludmFsaWQgRnJvbnRNYXR0ZXIgaW46ICR7cGF0aC5qb2luKFwiL1wiKX1gLFxuICAgICk7XG4gICAgQXNzZXJ0LlRydWUobm90ZS5oZWFkaW5ncyAhPT0gdW5kZWZpbmVkLCBgQmxhbmsgcmVzb3VyY2U6ICR7Zm0udXVpZH1gKTtcbiAgfVxuXG4gIGdldENvbnRlbnRCb3VuZGFyaWVzKG5vdGU6IENhY2hlZE1ldGFkYXRhKSB7XG4gICAgLy8gbG9jYXRlIGNvbnRlbnQgb2Zmc2V0XG4gICAgbGV0IGZtID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICBmbSA9IG5vdGUuZnJvbnRtYXR0ZXI7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gWzAsIDBdO1xuICAgIH1cbiAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBlbmQgPSAwO1xuXG4gICAgZm9yIChjb25zdCBoZWFkaW5nIG9mIG5vdGUuaGVhZGluZ3MpIHtcbiAgICAgIGlmIChcbiAgICAgICAgaGVhZGluZy5sZXZlbCA9PT0gMiAmJlxuICAgICAgICBoZWFkaW5nLmhlYWRpbmcudG9Mb3dlckNhc2UoKSA9PT0gXCJjb250ZW50XCJcbiAgICAgICkge1xuICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgIHN0YXJ0ID0gaGVhZGluZy5wb3NpdGlvbi5lbmQub2Zmc2V0O1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vIHMnaWwgeSBhIHVuIGF1dHJlIGhlYWRpbmcgbGV2ZWwgMiBhcHJlcywgZW5kID0gc3RhcnQub2Zmc2V0XG4gICAgICBpZiAoXG4gICAgICAgIGZvdW5kICYmXG4gICAgICAgIGhlYWRpbmcubGV2ZWwgPT09IDIgJiZcbiAgICAgICAgaGVhZGluZy5oZWFkaW5nLnRvTG93ZXJDYXNlKCkgIT09IFwiY29udGVudFwiXG4gICAgICApIHtcbiAgICAgICAgZW5kID0gaGVhZGluZy5wb3NpdGlvbi5zdGFydC5vZmZzZXQ7XG4gICAgICB9XG4gICAgfVxuICAgIEFzc2VydC5UcnVlKGZvdW5kLCBgUmVzb3VyY2UgZG9lcyBub3QgZGVjbGFyZXMgY29udGVudDogJHtmbS51dWlkfWApO1xuICAgIC8vIHNpbm9uIGVuZCA9IGVuZCBkb2N1bWVudFxuICAgIGlmIChlbmQgPT09IDApIHtcbiAgICAgIGVuZCA9IG5vdGUuc2VjdGlvbnNbbm90ZS5zZWN0aW9ucy5sZW5ndGggLSAxXS5wb3NpdGlvbi5lbmQub2Zmc2V0O1xuICAgIH1cblxuICAgIHJldHVybiBbc3RhcnQsIGVuZF07XG4gIH1cblxuICBnZXRSZXNvdXJjZU5hbWUobm90ZTogQ2FjaGVkTWV0YWRhdGEsIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBsZXQgcmVzb3VyY2VOYW1lID0gXCJcIjtcbiAgICBsZXQgbHZsM0hlYWRpbmdDb3VudCA9IDA7XG4gICAgbGV0IGZtID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICBmbSA9IG5vdGUuZnJvbnRtYXR0ZXI7XG4gICAgfSBjYXRjaCB7XG4gICAgICBjb25zb2xlLmxvZyhub3RlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGhlYWRpbmcgb2Ygbm90ZS5oZWFkaW5ncykge1xuICAgICAgLy8gaGVhZGluZyBsdmwgMyBpbiBib3VuZCBvZiBgY29udGVudGBcbiAgICAgIGlmIChcbiAgICAgICAgaGVhZGluZy5sZXZlbCA9PT0gMyAmJlxuICAgICAgICBoZWFkaW5nLnBvc2l0aW9uLnN0YXJ0Lm9mZnNldCA+IHN0YXJ0ICYmXG4gICAgICAgIGhlYWRpbmcucG9zaXRpb24uZW5kLm9mZnNldCA8IGVuZFxuICAgICAgKSB7XG4gICAgICAgIHJlc291cmNlTmFtZSA9IGhlYWRpbmcuaGVhZGluZztcbiAgICAgICAgbHZsM0hlYWRpbmdDb3VudCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhbnMgIyMgQ29udGVudFxuICAgIC8vIHVuIHNldWwgaGVhZGluZyBuaXZlYXUgM1xuICAgIC8vIEFzc2VydC5GYWxzZShcbiAgICAvLyAgIGx2bDNIZWFkaW5nQ291bnQgPT09IDAsXG4gICAgLy8gICBgUmVzb3VyY2UgZG9lcyBub3QgZGVjbGFyZXMgYSBuYW1lOiAke2ZtLnV1aWR9YCxcbiAgICAvLyApO1xuICAgIEFzc2VydC5GYWxzZShcbiAgICAgIGx2bDNIZWFkaW5nQ291bnQgPiAxLFxuICAgICAgYFJlc291cmNlIGhhcyBtdWx0aXBsZSBuYW1lczogJHtmbS51dWlkfWAsXG4gICAgKTtcblxuICAgIHJldHVybiByZXNvdXJjZU5hbWU7XG4gIH1cblxuICBvbnVubG9hZCgpIHtcbiAgICBjb25zb2xlLmxvZyhcImdvbmV4dCAtIG9udW5sb2FkKClcIik7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGRlbGV0ZSB3aW5kb3cuZ29uZXh0O1xuICB9XG5cbiAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xuICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKFxuICAgICAge30sXG4gICAgICBERUZBVUxUX1NFVFRJTkdTLFxuICAgICAgYXdhaXQgdGhpcy5sb2FkRGF0YSgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcbiAgfVxufVxuIiwgImV4cG9ydCBjb25zdCBQYXRocyA9IHtcblx0VGFza3M6IFwiODEzIFRhc2tzXCIsXG5cdENvbXBvbmVudHM6IFwiQ29tcG9uZW50c1wiLFxuXHRHb2FsczogXCJHb2Fsc1wiLFxuXHRTbGlwYm94OiBcIjgwMyBTbGlwYm94XCIsXG5cdEluYm94OiBcIjgwMCBJbmJveFwiLFxuXHRSZWZzOiBcIjgwMiBSZWZzXCIsXG5cdEFyY2hpdmVzOiBcIjQwMCBBcmNoaXZlc1wiLFxuXHRMb2dzOiBcIjYwMCBMb2dcIixcblx0QXR0YWNobWVudHM6IFwiMDAwIEF0dGFjaG1lbnRzXCIsXG5cdEpvdXJuYWw6IFwiSm91cm5hbFwiLFxuXHRSZXNvdXJjZXM6IFwiUmVzb3VyY2VzXCIsXG5cdFByb2plY3RzOiBcIjEwMCBQcm9qZWN0c1wiLFxuXHREb21haW5zOiBcIkRvbWFpbnNcIixcblx0TmFtZXM6IFwiTmFtZXNcIixcbn07XG5cbmV4cG9ydCBjb25zdCBTdGF0dXMgPSB7XG5cdFRvZG86IFwidG9kb1wiLFxuXHREb2luZzogXCJkb2luZ1wiLFxuXHREb25lOiBcImRvbmVcIixcblx0TWF5YmU6IFwibWF5YmVcIixcblx0U3RhbmRieTogXCJzdGFuZGJ5XCIsXG5cdFRyYXNoOiBcInRyYXNoXCIsXG59O1xuZXhwb3J0IGNvbnN0IEdvYWxTdGF0dXMgPSB7XG5cdFJlZnJhbWU6IFwicmVmcmFtZVwiLFxuXHRSZXNlYXJjaDogXCJyZXNlYXJjaFwiLFxuXHRPcGVyYXRpb25hbGl6ZTogXCJvcGVyYXRpb25hbGl6ZVwiLFxuXHRQbGFuaWZ5OiBcInBsYW5pZnlcIixcblx0RGVwZW5kYW50OiBcImRlcGVuZGFudFwiLFxuXHRBY3RpdmU6IFwiYWN0aXZlXCIsXG5cdEZhaWxlZDogXCJmYWlsZWRcIixcblx0U3VjY2VzczogXCJzdWNjZXNzXCIsXG59O1xuXG5leHBvcnQgY29uc3QgVHlwZXMgPSB7XG5cdEZsZWV0aW5nOiAxMyxcblx0TGl0ZXJhdHVyZTogMSxcblx0UGVybWFuZW50OiAyLFxuXHRUYXNrOiAzLFxuXHRQcmF4aXM6IDQsXG5cdFByb3Zpc2lvbjogNSxcblx0TG9nOiA2LFxuXHRSZXNvdXJjZTogNyxcblx0TWVkaWE6IDgsXG5cdFByb2plY3Q6IDEyLFxuXHRPcmc6IDksXG5cdERvbWFpbjogMTAsXG5cdENvbXBvbmVudDogMTEsXG59O1xuXG5leHBvcnQgY29uc3QgTmFtZXNwYWNlID0ge1xuXHRBcmVhOiBcImFyZWFcIixcblx0Q29udGV4dDogXCJjb250ZXh0XCIsXG5cdExheWVyOiBcImxheWVyXCIsXG5cdE9yZzogXCJvcmdcIixcblx0UHJvamVjdDogXCJwcm9qZWN0XCIsXG59O1xuXG5leHBvcnQgY29uc3QgRGVmYXVsdCA9IHtcblx0QXJlYTogXCJub25lXCIsXG5cdENvbnRleHQ6IFwiYW55XCIsXG5cdExheWVyOiBcIm5vbmVcIixcblx0T3JnOiBcIm5vbmVcIixcblx0UHJvamVjdDogXCJub25lXCIsXG59O1xuIiwgImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcblxuLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG52YXIgYnl0ZVRvSGV4ID0gW107XG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zbGljZSgxKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAvLyBOb3RlOiBCZSBjYXJlZnVsIGVkaXRpbmcgdGhpcyBjb2RlISAgSXQncyBiZWVuIHR1bmVkIGZvciBwZXJmb3JtYW5jZVxuICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzRcbiAgLy9cbiAgLy8gTm90ZSB0byBmdXR1cmUtc2VsZjogTm8sIHlvdSBjYW4ndCByZW1vdmUgdGhlIGB0b0xvd2VyQ2FzZSgpYCBjYWxsLlxuICAvLyBSRUY6IGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZC9wdWxsLzY3NyNpc3N1ZWNvbW1lbnQtMTc1NzM1MTM1MVxuICByZXR1cm4gKGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dKS50b0xvd2VyQ2FzZSgpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICB2YXIgdXVpZCA9IHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCk7XG4gIC8vIENvbnNpc3RlbmN5IGNoZWNrIGZvciB2YWxpZCBVVUlELiAgSWYgdGhpcyB0aHJvd3MsIGl0J3MgbGlrZWx5IGR1ZSB0byBvbmVcbiAgLy8gb2YgdGhlIGZvbGxvd2luZzpcbiAgLy8gLSBPbmUgb3IgbW9yZSBpbnB1dCBhcnJheSB2YWx1ZXMgZG9uJ3QgbWFwIHRvIGEgaGV4IG9jdGV0IChsZWFkaW5nIHRvXG4gIC8vIFwidW5kZWZpbmVkXCIgaW4gdGhlIHV1aWQpXG4gIC8vIC0gSW52YWxpZCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBSRkMgYHZlcnNpb25gIG9yIGB2YXJpYW50YCBmaWVsZHNcbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gIH1cbiAgcmV0dXJuIHV1aWQ7XG59XG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7IiwgIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuIEluIHRoZSBicm93c2VyIHdlIHRoZXJlZm9yZVxuLy8gcmVxdWlyZSB0aGUgY3J5cHRvIEFQSSBhbmQgZG8gbm90IHN1cHBvcnQgYnVpbHQtaW4gZmFsbGJhY2sgdG8gbG93ZXIgcXVhbGl0eSByYW5kb20gbnVtYmVyXG4vLyBnZW5lcmF0b3JzIChsaWtlIE1hdGgucmFuZG9tKCkpLlxuXG52YXIgZ2V0UmFuZG9tVmFsdWVzO1xudmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICAvLyBsYXp5IGxvYWQgc28gdGhhdCBlbnZpcm9ubWVudHMgdGhhdCBuZWVkIHRvIHBvbHlmaWxsIGhhdmUgYSBjaGFuY2UgdG8gZG8gc29cbiAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG8gaW1wbGVtZW50YXRpb24uXG4gICAgZ2V0UmFuZG9tVmFsdWVzID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKTtcbiAgICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZCcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcbn0iLCAidmFyIHJhbmRvbVVVSUQgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiBjcnlwdG8ucmFuZG9tVVVJRCAmJiBjcnlwdG8ucmFuZG9tVVVJRC5iaW5kKGNyeXB0byk7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHJhbmRvbVVVSURcbn07IiwgImltcG9ydCBuYXRpdmUgZnJvbSAnLi9uYXRpdmUuanMnO1xuaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICBpZiAobmF0aXZlLnJhbmRvbVVVSUQgJiYgIWJ1ZiAmJiAhb3B0aW9ucykge1xuICAgIHJldHVybiBuYXRpdmUucmFuZG9tVVVJRCgpO1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7XG5cbiAgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuICBybmRzWzZdID0gcm5kc1s2XSAmIDB4MGYgfCAweDQwO1xuICBybmRzWzhdID0gcm5kc1s4XSAmIDB4M2YgfCAweDgwO1xuXG4gIC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuICBpZiAoYnVmKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICBidWZbb2Zmc2V0ICsgaV0gPSBybmRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gYnVmO1xuICB9XG4gIHJldHVybiB1bnNhZmVTdHJpbmdpZnkocm5kcyk7XG59XG5leHBvcnQgZGVmYXVsdCB2NDsiLCAiaW1wb3J0IHtcblx0UGF0aHMsXG5cdFN0YXR1cyxcblx0VHlwZXMsXG5cdE5hbWVzcGFjZSxcblx0RGVmYXVsdCxcblx0R29hbFN0YXR1cyxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tIFwidXVpZFwiO1xuXG5leHBvcnQgY2xhc3MgRnJvbnRtYXR0ZXJKUyB7XG5cdHB1YmxpYyB1dWlkOiBzdHJpbmc7XG5cdHB1YmxpYyB2ZXJzaW9uOiBzdHJpbmc7XG5cdHB1YmxpYyB0eXBlOiBudW1iZXI7XG5cdHB1YmxpYyBjcmVhdGVkQXQ6IERhdGU7XG5cdHB1YmxpYyBhdDogRGF0ZTtcblx0cHVibGljIGJlZm9yZTogRGF0ZTtcblx0cHVibGljIGFmdGVyOiBEYXRlO1xuXHRwdWJsaWMgY29tcG9uZW50czogc3RyaW5nW107XG5cdHB1YmxpYyBkb21haW5zOiBzdHJpbmdbXTtcblx0cHVibGljIG5hbWVzOiBzdHJpbmdbXTtcblx0cHVibGljIHByb2plY3RzOiBzdHJpbmdbXTtcblx0cHVibGljIGZtO1xuXHRwdWJsaWMgY29udGVudHM6IHN0cmluZ1tdO1xuXHRwdWJsaWMgdHJhaXRzOiBzdHJpbmdbXTtcblx0cHVibGljIGNvbnRleHRzOiBzdHJpbmdbXTtcblx0cHVibGljIHN0YXR1czogc3RyaW5nO1xuXHRwdWJsaWMgZjtcblx0cHVibGljIGVuZXJneTogbnVtYmVyO1xuXG5cdHNpbmd1bGFyKHZhbHVlczogc3RyaW5nW10sIGZpZWxkOiBzdHJpbmcpIHtcblx0XHRpZiAoIUhlbHBlci5uaWxDaGVjayh0aGlzLmZtW2ZpZWxkXSkpIHtcblx0XHRcdGNvbnN0IHZhbHVlID0gdGhpcy5mbVtmaWVsZF07XG5cdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdGlmICghdmFsdWVzLmNvbnRhaW5zKHZhbHVlKSkge1xuXHRcdFx0XHRcdHZhbHVlcy5wdXNoKHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHRcdGAnJHtmaWVsZH0nIGlzIGlnbm9yZWQsIGludmFsaWQgZGF0YS10eXBlOiAnJHt0eXBlb2YgdGhpcy5mbVtmaWVsZF19J2AsXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cGx1cmFsKHZhbHVlczogc3RyaW5nW10sIGZpZWxkOiBzdHJpbmcpIHtcblx0XHRpZiAoIUhlbHBlci5uaWxDaGVjayh0aGlzLmZtW2ZpZWxkXSkpIHtcblx0XHRcdGlmICghQXJyYXkuaXNBcnJheSh0aGlzLmZtW2ZpZWxkXSkpIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHRcdGAnJHtmaWVsZH0nIGlzIGlnbm9yZWQsIGludmFsaWQgZGF0YS10eXBlOiAnJHtmaWVsZH0nYCxcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoY29uc3QgdmFsdWUgb2YgdGhpcy5mbVtmaWVsZF0pIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdFx0XHRpZiAoIXZhbHVlcy5jb250YWlucyh2YWx1ZSkpIHtcblx0XHRcdFx0XHRcdFx0dmFsdWVzLnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdFx0XHRcdGAnJHt2YWx1ZX1zLiR7dmFsdWV9JyBpcyBpZ25vcmVkLCBpbnZhbGlkIGRhdGEtdHlwZTogJyR7dHlwZW9mIHZhbHVlfSdgLFxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRjb25zdHJ1Y3RvcihwYWdlKSB7XG5cdFx0QXNzZXJ0LlRydWUocGFnZSAhPT0gdW5kZWZpbmVkLCBcIidwYWdlJyBpcyB1bmRlZmluZWRcIik7XG5cdFx0dGhpcy5mID0gcGFnZS5maWxlO1xuXHRcdGNvbnN0IGYgPSB0aGlzLmY7XG5cdFx0QXNzZXJ0LlRydWUoZiAhPT0gdW5kZWZpbmVkLCBcIidmJyBpcyB1bmRlZmluZWRcIik7XG5cdFx0dGhpcy5mbSA9IGYuZnJvbnRtYXR0ZXI7XG5cdFx0QXNzZXJ0LlRydWUodGhpcy5mbSAhPT0gdW5kZWZpbmVkLCBcIidmbScgaXMgdW5kZWZpbmVkXCIpO1xuXHRcdEFzc2VydC5UcnVlKFxuXHRcdFx0dGhpcy5mbS51dWlkICE9PSB1bmRlZmluZWQsXG5cdFx0XHRgJ3V1aWQnIGlzIHVuZGVmaW5lZCBmb3IgJyR7dGhpcy5mLnBhdGh9J2AsXG5cdFx0KTtcblx0XHQvLyBBc3NlcnQuVHJ1ZSh0aGlzLmZtLnZlcnNpb24gIT09IHVuZGVmaW5lZCwgXCIndmVyc2lvbicgaXMgdW5kZWZpbmVkXCIpO1xuXHRcdC8vIEFzc2VydC5UcnVlKGZtLmNyZWF0ZWRfYXQgIT09IHVuZGVmaW5lZCwgXCInY3JlYXRlZF9hdCcgaXMgdW5kZWZpbmVkXCIpO1xuXG5cdFx0dGhpcy51dWlkID0gdGhpcy5mbS51dWlkO1xuXHRcdHRoaXMudmVyc2lvbiA9IHRoaXMuZm0udmVyc2lvbjtcblx0XHR0aGlzLnR5cGUgPSB0aGlzLmZtLnR5cGU7XG5cdFx0dGhpcy5jcmVhdGVkQXQgPSBuZXcgRGF0ZSh0aGlzLmZtLmNyZWF0ZWRfYXQpO1xuXHRcdHRoaXMuYXQgPSB0aGlzLmZtLmF0ICE9PSB1bmRlZmluZWQgPyBuZXcgRGF0ZSh0aGlzLmZtLmF0KSA6IG5ldyBEYXRlKCk7XG5cdFx0dGhpcy5iZWZvcmUgPVxuXHRcdFx0dGhpcy5mbS5iZWZvcmUgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQ/IG5ldyBEYXRlKHRoaXMuZm0uYmVmb3JlKVxuXHRcdFx0XHQ6IG5ldyBEYXRlKCk7XG5cdFx0dGhpcy5hZnRlciA9XG5cdFx0XHR0aGlzLmZtLmFmdGVyICE9PSB1bmRlZmluZWQgPyBuZXcgRGF0ZSh0aGlzLmZtLmFmdGVyKSA6IG5ldyBEYXRlKCk7XG5cdFx0dGhpcy5jb21wb25lbnRzID0gW107XG5cdFx0dGhpcy5kb21haW5zID0gW107XG5cdFx0dGhpcy5wcm9qZWN0cyA9IFtdO1xuXHRcdHRoaXMuY29udGV4dHMgPSBbXTtcblx0XHR0aGlzLnRyYWl0cyA9IFtdO1xuXHRcdHRoaXMuZW5lcmd5ID0gdGhpcy5mbS5lbmVyZ3kgIT09IHVuZGVmaW5lZCA/IHRoaXMuZm0uZW5lcmd5IDogOTtcblxuXHRcdGNvbnN0IGRvbWFpbnMgPSBbXTtcblx0XHRjb25zdCBjb21wb25lbnRzID0gW107XG5cdFx0Y29uc3QgcHJvamVjdHMgPSBbXTtcblx0XHRjb25zdCBuYW1lcyA9IFtdO1xuXHRcdGNvbnN0IGNvbnRleHRzID0gW107XG5cdFx0Y29uc3QgY29udGVudHMgPSBbXTtcblx0XHRjb25zdCB0cmFpdHMgPSBbXTtcblxuXHRcdGlmICghSGVscGVyLm5pbENoZWNrKHRoaXMuZm0udGFncykpIHtcblx0XHRcdGlmICghQXJyYXkuaXNBcnJheSh0aGlzLmZtLnRhZ3MpKSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIid0YWdzJyBpcyBpZ25vcmVkLCBpbnZhbGlkIGRhdGEtdHlwZVwiKTtcblx0XHRcdFx0dGhpcy5mbS50YWdzID0gW107XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoY29uc3QgdGFnIG9mIHRoaXMuZm0udGFncykge1xuXHRcdFx0XHRpZiAodGFnLnNsaWNlKDAsIDcpID09PSBcImRvbWFpbi9cIikge1xuXHRcdFx0XHRcdGRvbWFpbnMucHVzaCh0YWcuc2xpY2UoNykpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRhZy5zbGljZSgwLCAxMCkgPT09IFwiY29tcG9uZW50L1wiKSB7XG5cdFx0XHRcdFx0Y29tcG9uZW50cy5wdXNoKHRhZy5zbGljZSgxMCkpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRhZy5zbGljZSgwLCA4KSA9PT0gXCJwcm9qZWN0L1wiKSB7XG5cdFx0XHRcdFx0cHJvamVjdHMucHVzaCh0YWcuc2xpY2UoOCkpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRhZy5zbGljZSgwLCA1KSA9PT0gXCJuYW1lL1wiKSB7XG5cdFx0XHRcdFx0bmFtZXMucHVzaCh0YWcuc2xpY2UoNSkpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRhZy5zbGljZSgwLCA4KSA9PSBcImNvbnRleHQvXCIpIHtcblx0XHRcdFx0XHRjb250ZXh0cy5wdXNoKHRhZy5zbGljZSg4KSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGFnLnNsaWNlKDAsIDgpID09IFwiY29udGVudC9cIikge1xuXHRcdFx0XHRcdGNvbnRlbnRzLnB1c2godGFnLnNsaWNlKDgpKTtcblx0XHRcdFx0fSBlbHNlIGlmICh0YWcuc2xpY2UoMCwgNikgPT0gXCJ0cmFpdC9cIikge1xuXHRcdFx0XHRcdHRyYWl0cy5wdXNoKHRhZy5zbGljZSg2KSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnNpbmd1bGFyKGRvbWFpbnMsIFwiZG9tYWluXCIpO1xuXHRcdHRoaXMucGx1cmFsKGRvbWFpbnMsIFwiZG9tYWluc1wiKTtcblx0XHR0aGlzLnNpbmd1bGFyKGNvbXBvbmVudHMsIFwiY29tcG9uZW50c1wiKTtcblx0XHR0aGlzLnBsdXJhbChjb21wb25lbnRzLCBcImNvbXBvbmVudHNcIik7XG5cdFx0dGhpcy5zaW5ndWxhcihwcm9qZWN0cywgXCJwcm9qZWN0XCIpO1xuXHRcdHRoaXMucGx1cmFsKHByb2plY3RzLCBcInByb2plY3RzXCIpO1xuXHRcdHRoaXMuc2luZ3VsYXIoY29udGVudHMsIFwiY29udGVudHNcIik7XG5cdFx0dGhpcy5wbHVyYWwoY29udGVudHMsIFwiY29udGVudHNcIik7XG5cdFx0dGhpcy5zaW5ndWxhcihuYW1lcywgXCJuYW1lXCIpO1xuXHRcdHRoaXMucGx1cmFsKG5hbWVzLCBcIm5hbWVzXCIpO1xuXHRcdHRoaXMucGx1cmFsKG5hbWVzLCBcImFsaWFzXCIpO1xuXHRcdHRoaXMuc2luZ3VsYXIodHJhaXRzLCBcInRyYWl0XCIpO1xuXHRcdHRoaXMucGx1cmFsKHRyYWl0cywgXCJ0cmFpdHNcIik7XG5cblx0XHR0aGlzLmRvbWFpbnMgPSBkb21haW5zO1xuXHRcdHRoaXMuY29tcG9uZW50cyA9IGNvbXBvbmVudHM7XG5cdFx0dGhpcy5wcm9qZWN0cyA9IHByb2plY3RzO1xuXHRcdHRoaXMubmFtZXMgPSBuYW1lcztcblx0XHR0aGlzLmNvbnRleHRzID0gY29udGV4dHM7XG5cdFx0dGhpcy5jb250ZW50cyA9IGNvbnRlbnRzO1xuXHRcdHRoaXMudHJhaXRzID0gdHJhaXRzO1xuXHR9XG5cblx0Z2V0RG9tYWluKGVtcHR5RGVmYXVsdCA9IHRydWUpOiBzdHJpbmcge1xuXHRcdGlmIChlbXB0eURlZmF1bHQpIHtcblx0XHRcdHJldHVybiB0aGlzLmRvbWFpbnNbMF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLmRvbWFpbnNbMF0gPT09IHVuZGVmaW5lZCA/IFwidW5rbm93blwiIDogdGhpcy5kb21haW5zWzBdO1xuXHRcdH1cblx0fVxuXG5cdGdldERvbWFpbnMoKTogc3RyaW5nW10ge1xuXHRcdHJldHVybiB0aGlzLmRvbWFpbnM7XG5cdH1cblxuXHRnZXRUcmFpdHMoKTogc3RyaW5nW10ge1xuXHRcdHJldHVybiB0aGlzLnRyYWl0cztcblx0fVxuXG5cdGdldENvbXBvbmVudHMoKTogc3RyaW5nW10ge1xuXHRcdHJldHVybiB0aGlzLmNvbXBvbmVudHM7XG5cdH1cblxuXHRnZXRQcm9qZWN0KGVtcHR5RGVmYXVsdCA9IHRydWUpOiBzdHJpbmcge1xuXHRcdGlmIChlbXB0eURlZmF1bHQpIHtcblx0XHRcdHJldHVybiB0aGlzLnByb2plY3RzWzBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wcm9qZWN0c1swXSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHRoaXMucHJvamVjdHNbMF07XG5cdFx0fVxuXHR9XG5cblx0Z2V0UHJvamVjdHMoKTogc3RyaW5nW10ge1xuXHRcdHJldHVybiB0aGlzLnByb2plY3RzO1xuXHR9XG5cblx0Z2V0TmFtZShlbXB0eURlZmF1bHQgPSB0cnVlKTogc3RyaW5nIHtcblx0XHRpZiAoZW1wdHlEZWZhdWx0KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lc1swXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZXNbMF0gPT09IHVuZGVmaW5lZCA/IFwiXCIgOiB0aGlzLm5hbWVzWzBdO1xuXHRcdH1cblx0fVxuXG5cdGdldENvbnRlbnQoZW1wdHlEZWZhdWx0ID0gdHJ1ZSk6IHN0cmluZyB7XG5cdFx0aWYgKGVtcHR5RGVmYXVsdCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY29udGVudHNbMF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLmNvbnRlbnRzWzBdID09PSB1bmRlZmluZWQgPyBcIlwiIDogdGhpcy5jb250ZW50c1swXTtcblx0XHR9XG5cdH1cblxuXHRnZXROYW1lcygpOiBzdHJpbmdbXSB7XG5cdFx0cmV0dXJuIHRoaXMubmFtZXM7XG5cdH1cblxuXHRnZXRDb250ZXh0KGVtcHR5RGVmYXVsdCA9IHRydWUpOiBzdHJpbmcge1xuXHRcdGlmIChlbXB0eURlZmF1bHQpIHtcblx0XHRcdHJldHVybiB0aGlzLmNvbnRleHRzWzBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5jb250ZXh0c1swXSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHRoaXMuY29udGV4dHNbMF07XG5cdFx0fVxuXHR9XG5cblx0cmVzb2x2ZShkdikge1xuXHRcdGNvbnN0IGRvbWFpbnMgPSBbXTtcblx0XHRmb3IgKGNvbnN0IGRvbWFpbiBvZiB0aGlzLmRvbWFpbnMpIHtcblx0XHRcdGlmIChIZWxwZXIuaXNVVUlEKGRvbWFpbikpIHtcblx0XHRcdFx0Y29uc3QgcGFnZXMgPSBkdlxuXHRcdFx0XHRcdC5wYWdlcyhgXCIke1BhdGhzLkRvbWFpbnN9XCJgKVxuXHRcdFx0XHRcdC53aGVyZSgocGFnZSkgPT4gcGFnZS5maWxlLmZyb250bWF0dGVyLnV1aWQgPT09IGRvbWFpbik7XG5cdFx0XHRcdGlmIChwYWdlcy5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAocGFnZXMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdFx0Y29uc3QgcGFnZSA9IHBhZ2VzWzBdO1xuXHRcdFx0XHRcdGRvbWFpbnMucHVzaChwYWdlLmZpbGUuZnJvbnRtYXR0ZXIubmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnN0IHBhZ2VzID0gZHZcblx0XHRcdFx0XHQucGFnZXMoYFwiJHtQYXRocy5Eb21haW5zfVwiYClcblx0XHRcdFx0XHQud2hlcmUoKHBhZ2UpID0+IHBhZ2UuZmlsZS5mcm9udG1hdHRlci5uYW1lID09PSBkb21haW4pO1xuXHRcdFx0XHRpZiAocGFnZXMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcigpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHBhZ2VzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0XHRcdGNvbnN0IHBhZ2UgPSBwYWdlc1swXTtcblx0XHRcdFx0XHRkb21haW5zLnB1c2gocGFnZS5maWxlLmZyb250bWF0dGVyLm5hbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChkb21haW5zLmxlbmd0aCAhPT0gdGhpcy5kb21haW5zLmxlbmd0aCkge1xuXHRcdFx0Y29uc29sZS53YXJuKGBEb21haW4gcmVzb2x1dGlvbiBmYWlsZWQgZm9yOiAke3RoaXMuZG9tYWluc31gKTtcblx0XHR9XG5cblx0XHR0aGlzLmRvbWFpbnMgPSBkb21haW5zO1xuXHR9XG59XG5cbmNsYXNzIFZhbGlkYXRpb25FcnJvciBleHRlbmRzIEVycm9yIHtcblx0Y29uc3RydWN0b3IobWVzc2FnZSkge1xuXHRcdHN1cGVyKG1lc3NhZ2UpOyAvLyAoMSlcblx0XHR0aGlzLm5hbWUgPSBcIlZhbGlkYXRpb25FcnJvclwiOyAvLyAoMilcblx0fVxufVxuXG5leHBvcnQgY29uc3QgQXNzZXJ0ID0ge1xuXHRUcnVlKHByZWRpY2F0ZTogYm9vbGVhbiwgbWVzc2FnZTogc3RyaW5nLCBzdHJpY3QgPSB0cnVlKSB7XG5cdFx0aWYgKCFwcmVkaWNhdGUpIHtcblx0XHRcdGlmIChzdHJpY3QpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihtZXNzYWdlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRGYWxzZShwcmVkaWNhdGU6IGJvb2xlYW4sIG1lc3NhZ2U6IHN0cmluZywgc3RyaWN0ID0gZmFsc2UpIHtcblx0XHRpZiAocHJlZGljYXRlKSB7XG5cdFx0XHRpZiAoc3RyaWN0KSB7XG5cdFx0XHRcdHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IobWVzc2FnZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcbn07XG5cbmV4cG9ydCBjb25zdCBIZWxwZXIgPSB7XG5cdG5pbENoZWNrKHZhbDogYW55KTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHZhbCA9PT0gdW5kZWZpbmVkIHx8IHZhbCA9PT0gbnVsbDtcblx0fSxcblxuXHRnZXRLZXlGdWNrKGdyb3VwQnkpIHtcblx0XHRzd2l0Y2ggKGdyb3VwQnkpIHtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRjYXNlIFwiZG9uZUF0XCI6XG5cdFx0XHRcdHJldHVybiAoZW50cnkpID0+XG5cdFx0XHRcdFx0ZW50cnkuZmlsZS5mcm9udG1hdHRlci5kb25lQXQudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcImNyZWF0ZWRBdFwiOlxuXHRcdFx0XHRyZXR1cm4gKGVudHJ5KSA9PlxuXHRcdFx0XHRcdGVudHJ5LmZpbGUuZnJvbnRtYXR0ZXIuY3JlYXRlZEF0LnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJwcm9qZWN0XCI6XG5cdFx0XHRcdHJldHVybiAoZW50cnkpID0+IGVudHJ5LmZpbGUuZnJvbnRtYXR0ZXIucHJvamVjdDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiYXJlYVwiOlxuXHRcdFx0XHRyZXR1cm4gKGVudHJ5KSA9PiBlbnRyeS5maWxlLmZyb250bWF0dGVyLmFyZWE7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fSxcblxuXHRnZXRLZXkoZ3JvdXBCeSkge1xuXHRcdHN3aXRjaCAoZ3JvdXBCeSkge1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdGNhc2UgXCJkb25lQXRcIjpcblx0XHRcdFx0cmV0dXJuIChlbnRyeSkgPT4gZW50cnkuZG9uZUF0LnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJjcmVhdGVkQXRcIjpcblx0XHRcdFx0cmV0dXJuIChlbnRyeSkgPT4gZW50cnkuY3JlYXRlZEF0LnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJwcm9qZWN0XCI6XG5cdFx0XHRcdHJldHVybiAoZW50cnkpID0+IGVudHJ5LnByb2plY3Q7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcImFyZWFcIjpcblx0XHRcdFx0cmV0dXJuIChlbnRyeSkgPT4gZW50cnkuYXJlYTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9LFxuXG5cdG51bWJlclR5cGVUb1N0cmluZyh2YWwpOiBzdHJpbmcge1xuXHRcdHN3aXRjaCAodmFsLnR5cGUpIHtcblx0XHRcdGNhc2UgVHlwZXMuRmxlZXRpbmc6XG5cdFx0XHRcdHJldHVybiBcImZsZWV0aW5nXCI7XG5cdFx0XHRjYXNlIFR5cGVzLkxvZzpcblx0XHRcdFx0cmV0dXJuIFwibG9nXCI7XG5cdFx0XHRjYXNlIFR5cGVzLlByb2plY3Q6XG5cdFx0XHRcdHJldHVybiBcInByb2plY3RcIjtcblx0XHRcdGNhc2UgVHlwZXMuT3JnOlxuXHRcdFx0XHRyZXR1cm4gXCJvcmdcIjtcblx0XHRcdGNhc2UgVHlwZXMuRG9tYWluOlxuXHRcdFx0XHRyZXR1cm4gXCJkb21haW5cIjtcblx0XHRcdGNhc2UgVHlwZXMuQ29tcG9uZW50OlxuXHRcdFx0XHRyZXR1cm4gXCJjb21wb25lbnRcIjtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHRgbnVtYmVyVHlwZVRvU3RyaW5nOiB0eXBlOiBcIiR7dmFsLnR5cGV9XCIgbm90IGltcGxlbWVudGVkIFwiJHt2YWwudXVpZH1cImAsXG5cdFx0XHRcdCk7XG5cdFx0fVxuXHR9LFxuXG5cdHJvdW5kVG9PbmVEZWNpbWFsKHZhbDogbnVtYmVyKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCh2YWwgKiAxMCkgLyAxMDtcblx0fSxcblxuXHRpc0NoaWxkVGFnKHBhcmVudCwgY2hpbGQpIHtcblx0XHRpZiAoY2hpbGQubGVuZ3RoIDw9IHBhcmVudC5sZW5ndGggKyAxKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSBlbHNlIGlmIChjaGlsZC5zbGljZSgwLCBwYXJlbnQubGVuZ3RoICsgMSkgIT0gYCR7cGFyZW50fS9gKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdGdldEZpZWxkKGZpZWxkLCBkZWZhdWx0VmFsdWUpIHtcblx0XHRpZiAoZmllbGQgPT09IHVuZGVmaW5lZCB8fCBmaWVsZCA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIGRlZmF1bHRWYWx1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGZpZWxkO1xuXHRcdH1cblx0fSxcblxuXHRnZXREYXRlKGR0KSB7XG5cdFx0aWYgKGR0ID09PSBcIlwiIHx8IGR0ID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSBpZiAoZHQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0ZHQgPSBuZXcgRGF0ZShkdCk7XG5cdFx0XHRpZiAoaXNOYU4oZHQpKSB7XG5cdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gZHQ7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9LFxuXG5cdGdldFRhZyhmbSwgdHlwZSwgZW1wdHlEZWZhdWx0ID0gdW5kZWZpbmVkKSB7XG5cdFx0bGV0IG5hbWUgPSBcIlwiO1xuXHRcdGxldCBkZWZhdWx0VmFsdWUgPSBcIlwiO1xuXG5cdFx0aWYgKHR5cGUgPT09IFwiYXJlYVwiKSB7XG5cdFx0XHRuYW1lID0gTmFtZXNwYWNlLkFyZWE7XG5cdFx0XHRkZWZhdWx0VmFsdWUgPSBEZWZhdWx0LkFyZWE7XG5cdFx0fSBlbHNlIGlmICh0eXBlID09PSBcImNvbnRleHRcIikge1xuXHRcdFx0bmFtZSA9IE5hbWVzcGFjZS5Db250ZXh0O1xuXHRcdFx0ZGVmYXVsdFZhbHVlID0gRGVmYXVsdC5Db250ZXh0O1xuXHRcdH0gZWxzZSBpZiAodHlwZSA9PT0gXCJsYXllclwiKSB7XG5cdFx0XHRuYW1lID0gTmFtZXNwYWNlLkxheWVyO1xuXHRcdFx0ZGVmYXVsdFZhbHVlID0gRGVmYXVsdC5MYXllcjtcblx0XHR9IGVsc2UgaWYgKHR5cGUgPT09IFwib3JnXCIpIHtcblx0XHRcdG5hbWUgPSBOYW1lc3BhY2UuT3JnO1xuXHRcdFx0ZGVmYXVsdFZhbHVlID0gRGVmYXVsdC5Pcmc7XG5cdFx0fSBlbHNlIGlmICh0eXBlID09PSBcInByb2plY3RcIikge1xuXHRcdFx0bmFtZSA9IE5hbWVzcGFjZS5Qcm9qZWN0O1xuXHRcdFx0ZGVmYXVsdFZhbHVlID0gRGVmYXVsdC5Qcm9qZWN0O1xuXHRcdH0gZWxzZSBpZiAodHlwZSA9PSBcImRvbWFpblwiKSB7XG5cdFx0XHRuYW1lID0gXCJkb21haW5cIjtcblx0XHRcdGRlZmF1bHRWYWx1ZSA9IFwibm9uZVwiO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYGdldFRhZyBnb3QgdW5zdXBvcnRlZCB0eXBlOiAnJHt0eXBlfSdgKTtcblx0XHR9XG5cblx0XHRjb25zdCBsZW4gPSBuYW1lLmxlbmd0aCArIDE7XG5cdFx0Y29uc3QgZGVmYXVsdFRhZyA9IGAke25hbWV9LyR7ZGVmYXVsdFZhbHVlfWA7XG5cblx0XHRsZXQgZGVmYXVsdFJldFZhbCA9IGRlZmF1bHRUYWc7XG5cdFx0aWYgKGVtcHR5RGVmYXVsdCkge1xuXHRcdFx0ZGVmYXVsdFJldFZhbCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRpZiAoZm0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIGRlZmF1bHRSZXRWYWw7XG5cdFx0fVxuXG5cdFx0Y29uc3QgdGFncyA9IGZtLnRhZ3M7XG5cdFx0aWYgKHRhZ3MgPT09IHVuZGVmaW5lZCB8fCB0YWdzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIGRlZmF1bHRSZXRWYWw7XG5cdFx0fVxuXHRcdC8vIC0+IHRhZyBuJ2V4aXN0ZSBwYXMgLT4gdmFsZXVyIHBhciBkZWZhdXRcblx0XHQvLyAtPiB0YWcgZXhpc3RlIG1haXMgaWwgYSB1bmUgdmFsZXVyIHBhciBkZWZhdXQgLT4gdmFsZXVyIHBhciBkZWZhdXRcblx0XHRmb3IgKGNvbnN0IHRhZyBvZiB0YWdzKSB7XG5cdFx0XHRpZiAodGFnID09IGRlZmF1bHRUYWcpIHtcblx0XHRcdFx0cmV0dXJuIGRlZmF1bHRSZXRWYWw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0YWcubGVuZ3RoID4gbGVuICYmIHRhZy5zbGljZSgwLCBsZW4pID09IGAke25hbWV9L2ApIHtcblx0XHRcdFx0cmV0dXJuIHRhZztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZGVmYXVsdFJldFZhbDtcblx0fSxcblxuXHRnZXROYW1lKGZtKTogc3RyaW5nIHtcblx0XHRjb25zdCBjb21wb25lbnRzID0gSGVscGVyLmdldENvbXBvbmVudHMoZm0pO1xuXHRcdGlmIChjb21wb25lbnRzLmxlbmd0aCA8IDEpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSGVscGVyLmdldE5hbWUoKSAke2ZtfWApO1xuXHRcdH1cblxuXHRcdGxldCBuYW1lID0gdW5kZWZpbmVkO1xuXHRcdGxldCBvY2N1cmVuY2VzID0gMDtcblx0XHRmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiBjb21wb25lbnRzKSB7XG5cdFx0XHRpZiAoY29tcG9uZW50LnNsaWNlKDAsIDE1KSA9PT0gXCJjb21wb25lbnQvbmFtZS9cIikge1xuXHRcdFx0XHRuYW1lID0gY29tcG9uZW50LnNsaWNlKDE1KTtcblx0XHRcdFx0b2NjdXJlbmNlcyArPSAxO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChvY2N1cmVuY2VzID4gMSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRgSGVscGVyLmdldE5hbWUoKSAke2ZtfSBtdWx0aXBsZSBvY2N1cmVuY2VzIG9mICdjb21wb25lbnQvbmFtZSdgLFxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRpZiAobmFtZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRcdGBIZWxwZXIuZ2V0TmFtZSgpICR7Zm19ICdjb21wb25lbnQvbmFtZScgdW5kZWZpbmVkYCxcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5hbWU7XG5cdH0sXG5cblx0Z2V0Q29tcG9uZW50cyhmbSkge1xuXHRcdGNvbnN0IGNvbXBvbmVudHMgPSBbXTtcblx0XHRpZiAoSGVscGVyLm5pbENoZWNrKGZtLnRhZ3MpKSB7XG5cdFx0XHRyZXR1cm4gW107XG5cdFx0fVxuXHRcdGZvciAoY29uc3QgdGFnIG9mIGZtLnRhZ3MpIHtcblx0XHRcdGlmICh0YWcubGVuZ3RoID4gMTAgJiYgdGFnLnNsaWNlKDAsIDEwKSA9PT0gXCJjb21wb25lbnQvXCIpIHtcblx0XHRcdFx0Y29tcG9uZW50cy5wdXNoKHRhZyk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjb21wb25lbnRzO1xuXHR9LFxuXG5cdGdldEFyZWEoZm0sIGVtcHR5RGVmYXVsdCA9IGZhbHNlKSB7XG5cdFx0cmV0dXJuIEhlbHBlci5nZXRUYWcoZm0sIFwiYXJlYVwiLCBlbXB0eURlZmF1bHQpO1xuXHR9LFxuXG5cdGdldENvbnRleHQoZm0sIGVtcHR5RGVmYXVsdCA9IGZhbHNlKSB7XG5cdFx0cmV0dXJuIEhlbHBlci5nZXRUYWcoZm0sIFwiY29udGV4dFwiLCBlbXB0eURlZmF1bHQpO1xuXHR9LFxuXG5cdGdldERvbWFpbihmbSwgZW1wdHlEZWZhdWx0ID0gZmFsc2UpIHtcblx0XHRyZXR1cm4gSGVscGVyLmdldFRhZyhmbSwgXCJkb21haW5cIiwgZW1wdHlEZWZhdWx0KTtcblx0fSxcblxuXHRnZXRMYXllcihmbSwgZW1wdHlEZWZhdWx0ID0gZmFsc2UpIHtcblx0XHRyZXR1cm4gSGVscGVyLmdldFRhZyhmbSwgXCJsYXllclwiLCBlbXB0eURlZmF1bHQpO1xuXHR9LFxuXG5cdGdldE9yZyhmbSwgZW1wdHlEZWZhdWx0ID0gZmFsc2UpIHtcblx0XHRyZXR1cm4gSGVscGVyLmdldFRhZyhmbSwgXCJvcmdcIiwgZW1wdHlEZWZhdWx0KTtcblx0fSxcblxuXHRnZXRQcm9qZWN0KGZtLCBlbXB0eURlZmF1bHQgPSBmYWxzZSkge1xuXHRcdHJldHVybiBIZWxwZXIuZ2V0VGFnKGZtLCBcInByb2plY3RcIiwgZW1wdHlEZWZhdWx0KTtcblx0fSxcblxuXHRkdXJhdGlvblN0cmluZ1RvU2VjKHZhbCkge1xuXHRcdGlmICh2YWwgPT09IHVuZGVmaW5lZCB8fCB2YWwubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cdFx0Y29uc3QgbXVsdCA9IHZhbC5zbGljZSgtMSk7XG5cdFx0bGV0IG0gPSAwO1xuXHRcdGlmIChtdWx0ID09PSBcImhcIikge1xuXHRcdFx0bSA9IDYwICogNjA7XG5cdFx0fSBlbHNlIGlmIChtdWx0ID09PSBcIm1cIikge1xuXHRcdFx0bSA9IDYwO1xuXHRcdH0gZWxzZSBpZiAobXVsdCA9PT0gXCJkXCIpIHtcblx0XHRcdG0gPSAyNCAqIDYwICogNjA7XG5cdFx0fSBlbHNlIGlmIChtdWx0ID09IFwid1wiKSB7XG5cdFx0XHRtID0gMjQgKiA2MCAqIDYwICogNztcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKGBVbmhhbmRsZWQgY2FzZSB2YWw6ICR7dmFsfWApO1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbSAqIHBhcnNlSW50KHZhbC5zbGljZSgwLCAtMSkpO1xuXHR9LFxuXG5cdG1zZWNUb1N0cmluZ0R1cmF0aW9uKHZhbDogbnVtYmVyKSB7XG5cdFx0Y29uc3Qgb25lSG91ckluTXNlYyA9IDM2MDAwMDA7IC8vIDEgaG91ciBpbiBtc2VjXG5cdFx0Y29uc3Qgb25lRGF5SW5Nc2VjID0gODY0MDAwMDA7IC8vIDEgZGF5IGluIG1zZWNcblx0XHRpZiAodmFsID49IDI0ICogb25lSG91ckluTXNlYykge1xuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0U3RyaW5nKEhlbHBlci5yb3VuZFRvT25lRGVjaW1hbCh2YWwgLyBvbmVEYXlJbk1zZWMpKS5wYWRTdGFydChcblx0XHRcdFx0XHQyLFxuXHRcdFx0XHRcdFwiMFwiLFxuXHRcdFx0XHQpICsgXCIgZFwiXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRTdHJpbmcoSGVscGVyLnJvdW5kVG9PbmVEZWNpbWFsKHZhbCAvIG9uZUhvdXJJbk1zZWMpKS5wYWRTdGFydChcblx0XHRcdFx0XHQyLFxuXHRcdFx0XHRcdFwiMFwiLFxuXHRcdFx0XHQpICsgXCIgaFwiXG5cdFx0XHQpO1xuXHRcdH1cblx0fSxcblxuXHRpc1VVSUQodmFsOiBzdHJpbmcpOiBib29sZWFuIHtcblx0XHRpZiAodHlwZW9mIHZhbCAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsLmxlbmd0aCA9PT0gMzY7XG5cdH0sXG5cblx0c29ydEJ5QWdlKGEsIGIpIHtcblx0XHRjb25zdCBmbUEgPSBuZXcgRnJvbnRtYXR0ZXJKUyhhKTtcblx0XHRjb25zdCBmbUIgPSBuZXcgRnJvbnRtYXR0ZXJKUyhiKTtcblxuXHRcdHJldHVybiBmbUEuY3JlYXRlZEF0LmdldFRpbWUoKSAtIGZtQi5jcmVhdGVkQXQuZ2V0VGltZSgpO1xuXHR9LFxuXG5cdHNvcnRCeVByaW9yaXR5KGEsIGIpIHtcblx0XHRjb25zdCBmbUEgPSBuZXcgRnJvbnRtYXR0ZXJKUyhhKTtcblx0XHRjb25zdCBmbUIgPSBuZXcgRnJvbnRtYXR0ZXJKUyhiKTtcblxuXHRcdHJldHVybiBmbUIuZm0ucHJpb3JpdHkgLSBmbUEuZm0ucHJpb3JpdHk7XG5cdH0sXG5cblx0c29ydEJ5UHJpb3JpdHlBbmRBZ2UoYSwgYikge1xuXHRcdGNvbnN0IGZtQSA9IG5ldyBGcm9udG1hdHRlckpTKGEpO1xuXHRcdGNvbnN0IGZtQiA9IG5ldyBGcm9udG1hdHRlckpTKGIpO1xuXG5cdFx0aWYgKGZtQS5mbS5wcmlvcml0eSAhPT0gZm1CLmZtLnByaW9yaXR5LnByaW9yaXR5KSB7XG5cdFx0XHRyZXR1cm4gSGVscGVyLnNvcnRCeVByaW9yaXR5KGEsIGIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gSGVscGVyLnNvcnRCeUFnZShhLCBiKTtcblx0XHR9XG5cdH0sXG5cblx0c29ydEJ5RHVyYXRpb24oYSwgYikge1xuXHRcdGNvbnN0IGZtQSA9IG5ldyBGcm9udG1hdHRlckpTKGEpO1xuXHRcdGNvbnN0IGZtQiA9IG5ldyBGcm9udG1hdHRlckpTKGIpO1xuXHRcdHJldHVybiAoXG5cdFx0XHRIZWxwZXIuZHVyYXRpb25TdHJpbmdUb1NlYyhmbUEuZm0udGltZV9lc3RpbWF0ZSkgLVxuXHRcdFx0SGVscGVyLmR1cmF0aW9uU3RyaW5nVG9TZWMoZm1CLmZtLnRpbWVfZXN0aW1hdGUpXG5cdFx0KTtcblx0fSxcblxuXHRzb3J0QnlQcmlvcml0eUFuZER1cmF0aW9uKGEsIGIpIHtcblx0XHRjb25zdCBmbUEgPSBuZXcgRnJvbnRtYXR0ZXJKUyhhKTtcblx0XHRjb25zdCBmbUIgPSBuZXcgRnJvbnRtYXR0ZXJKUyhiKTtcblxuXHRcdGlmIChmbUEuZm0ucHJpb3JpdHkgIT09IGZtQi5mbS5wcmlvcml0eSkge1xuXHRcdFx0cmV0dXJuIEhlbHBlci5zb3J0QnlQcmlvcml0eShhLCBiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIEhlbHBlci5zb3J0QnlEdXJhdGlvbihhLCBiKTtcblx0XHR9XG5cdH0sXG5cblx0c29ydEJ5UHJpb3JpdHlBbmREdXJhdGlvbkFuZEFnZShhLCBiKSB7XG5cdFx0Y29uc3QgZm1BID0gbmV3IEZyb250bWF0dGVySlMoYSk7XG5cdFx0Y29uc3QgZm1CID0gbmV3IEZyb250bWF0dGVySlMoYik7XG5cblx0XHRpZiAoZm1BLmZtLnByaW9yaXR5ICE9PSBmbUIuZm0ucHJpb3JpdHkpIHtcblx0XHRcdHJldHVybiBIZWxwZXIuc29ydEJ5UHJpb3JpdHkoYSwgYik7XG5cdFx0fSBlbHNlIGlmIChmbUEuZm0udGltZV9lc3RpbWF0ZSAhPT0gZm1CLmZtLnRpbWVfZXN0aW1hdGUpIHtcblx0XHRcdHJldHVybiBIZWxwZXIuc29ydEJ5RHVyYXRpb24oYSwgYik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBIZWxwZXIuc29ydEJ5QWdlKGEsIGIpO1xuXHRcdH1cblx0fSxcbn07XG5cbmV4cG9ydCBjb25zdCBBdXRvRmllbGQgPSB7XG5cdHRhZ3MoZHYsIGZtLCBsZXZlbCA9IDIpIHtcblx0XHRjb25zdCB0YWdzID0gZm0udGFncztcblx0XHRpZiAodGFncyA9PSB1bmRlZmluZWQgfHwgdGFncy5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0YWdzLnNvcnQoKTtcblx0XHRkdi5oZWFkZXIobGV2ZWwsIFwiVGFnc1wiKTtcblx0XHRsZXQgcyA9IFwiXCI7XG5cdFx0Zm9yIChjb25zdCB0YWcgb2YgdGFncykge1xuXHRcdFx0cyArPSBgICMke3RhZ31gO1xuXHRcdH1cblx0XHRkdi5wYXJhZ3JhcGgocyk7XG5cdH0sXG5cblx0aGVhbG1vbihkdikge1xuXHRcdGNvbnN0IGZtID0gbmV3IEZyb250bWF0dGVySlMoZHYuY3VycmVudCgpKTtcblx0XHRjb25zdCBjdXJyZW50ID0gZm0uY3JlYXRlZEF0LnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApO1xuXG5cdFx0Y29uc3QgcGFnZXMgPSBkdi5wYWdlcyhgXCIke1BhdGhzLkpvdXJuYWx9XCJgKS53aGVyZSgocGFnZSkgPT4ge1xuXHRcdFx0Y29uc3QgakZtID0gbmV3IEZyb250bWF0dGVySlMocGFnZSk7XG5cdFx0XHRpZiAoakZtLmdldFByb2plY3QoKSAhPT0gXCJob21lY29va1wiKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0bGV0IGpDdXJyZW50ID0gbnVsbDtcblx0XHRcdC8vIGxhIGZpY2hlIGhvbWVjb29rIHNlIHRyb3V2ZSB0b3Vqb3VycyBcdTAwRTAgbGEgZGF0ZSBqLTFcblx0XHRcdGNvbnN0IGN1cnJlbnRNaW51c09uZSA9IG5ldyBEYXRlKFxuXHRcdFx0XHRmbS5jcmVhdGVkQXQuZ2V0VGltZSgpIC0gMjQgKiA2MCAqIDYwICogMTAwMCxcblx0XHRcdCk7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBvbiBzJ2ludFx1MDBFOXJlc3NlIGF1IHJlcGFzIGRlIGxhIHZlaWxsZSBkYW5zIGhlYWxtb25cblx0XHRcdFx0Ly8gbmUgY291dnJlIHBhcyBvdSBsZSByZXBhcyBlc3QgcHJpcyBhcHJlcyAwMGggbGUgam91ciBlbiBjb3Vyc1xuXHRcdFx0XHQvLyBzZXJhIGdcdTAwRTlyXHUwMEU5IGF2ZWMgbGEgZmljaGUgZGlyZWN0ZW1lbnQgcG91ciBsZSBtb21lbnRcblx0XHRcdFx0akN1cnJlbnQgPSBqRm0uY3JlYXRlZEF0LnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApO1xuXHRcdFx0fSBjYXRjaCB7XG5cdFx0XHRcdGR2LnBhcmFncmFwaChcblx0XHRcdFx0XHRgSW52YWxpZCBkYXRlOiAke1JlbmRlcmVyLm1ha2VMaW5rU2hvcnRVVUlEKGR2LCBwYWdlLmZpbGUpfWAsXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoakZtKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGN1cnJlbnRNaW51c09uZS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKSAhPT0gakN1cnJlbnQpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9KTtcblxuXHRcdGR2LmhlYWRlcig0LCBcInJlcGFzICh2ZWlsbGUpXCIpO1xuXHRcdGlmIChwYWdlcy5sZW5ndGgpIHtcblx0XHRcdGZvciAoY29uc3QgcGFnZSBvZiBwYWdlcykge1xuXHRcdFx0XHRkdi5wYXJhZ3JhcGgoUmVuZGVyZXIubWFrZUxpbmtTaG9ydFVVSUQoZHYsIHBhZ2UuZmlsZSkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRhdXRob3JzKGR2LCBmbSkge1xuXHRcdGNvbnN0IGF1dGhvcnMgPSBmbS5hdXRob3JzO1xuXHRcdGlmIChhdXRob3JzID09PSB1bmRlZmluZWQgfHwgYXV0aG9ycy5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkdi5oZWFkZXIoMywgXCJBdXRob3JzXCIpO1xuXHRcdGR2Lmxpc3QoYXV0aG9ycyk7XG5cdH0sXG5cblx0dGl0bGUoZHYsIGZtKSB7XG5cdFx0Y29uc3QgdGl0bGUgPSBmbS5hbGlhcztcblx0XHRpZiAodGl0bGUgPT09IHVuZGVmaW5lZCB8fCB0aXRsZS5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkdi5oZWFkZXIoMywgdGl0bGUpO1xuXHR9LFxuXG5cdGxvZ3MoZHYsIGVudHJpZXMpIHtcblx0XHRjb25zb2xlLmxvZyhcImNvdWNvdSwgdHUgdmV1eCB2b2lyIG1hIGJpdGU/XCIpO1xuXHRcdGNvbnN0IGJ1ZmYgPSBbXTtcblx0XHRsZXQgdG90YWxUaW1lID0gMDtcblxuXHRcdGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuXHRcdFx0Y29uc3QgZm1lID0gZW50cnkuZmlsZS5mcm9udG1hdHRlcjtcblx0XHRcdGNvbnN0IGUgPSBbXTtcblx0XHRcdGxldCBzdGFydDogYW55ID0gMDtcblx0XHRcdGxldCBzdG9wOiBhbnkgPSAwO1xuXHRcdFx0aWYgKGZtZSA9PT0gdW5kZWZpbmVkIHx8IGZtZS5jcmVhdGVkX2F0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGZyb250bWF0dGVyOiAke2ZtZS51dWlkfWApO1xuXHRcdFx0fVxuXG5cdFx0XHRzdGFydCA9IG5ldyBEYXRlKGZtZS5jcmVhdGVkX2F0KTtcblx0XHRcdGUucHVzaChzdGFydC50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKSk7XG5cdFx0XHRpZiAoZm1lLmRvbmVfYXQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRzdG9wID0gRGF0ZS5ub3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHN0b3AgPSBuZXcgRGF0ZShmbWUuZG9uZV9hdCk7XG5cdFx0XHR9XG5cdFx0XHR0b3RhbFRpbWUgKz0gc3RvcCAtIHN0YXJ0O1xuXHRcdFx0ZS5wdXNoKFxuXHRcdFx0XHRkdi5zZWN0aW9uTGluayhcblx0XHRcdFx0XHRmbWUudXVpZCxcblx0XHRcdFx0XHRcIiMjIENvbnRlbnRcIixcblx0XHRcdFx0XHRmYWxzZSxcblx0XHRcdFx0XHRmbWUudXVpZC5zbGljZSgwLCA4KSxcblx0XHRcdFx0KSxcblx0XHRcdCk7XG5cdFx0XHRlLnB1c2goTWF0aC5yb3VuZCgoKHN0b3AgLSBzdGFydCkgLyAoMTAwMCAqIDYwICogNjApKSAqIDEwKSAvIDEwKTtcblx0XHRcdGlmIChmbWUucmV2aWV3ZWQgPT09IHVuZGVmaW5lZCB8fCBmbWUucmV2aWV3ZWQgPT09IDApIHtcblx0XHRcdFx0ZS5wdXNoKDApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZS5wdXNoKGZtZS5yZXZpZXdlZCk7XG5cdFx0XHR9XG5cdFx0XHRidWZmLnB1c2goZSk7XG5cdFx0fVxuXG5cdFx0aWYgKGJ1ZmYubGVuZ3RoID4gMCkge1xuXHRcdFx0ZHYuaGVhZGVyKDIsIFwiTG9nc1wiKTtcblx0XHRcdGR2LnRhYmxlKFtcImNyZWF0ZWRfYXRcIiwgXCJ1dWlkXCIsIFwic2Vzc2lvblwiLCBcInJldmlld2VkXCJdLCBidWZmKTtcblx0XHRcdGlmICh0b3RhbFRpbWUgPiAwKSB7XG5cdFx0XHRcdGR2LnBhcmFncmFwaChcblx0XHRcdFx0XHRgX3RvdGFsVGltZSAoaCk6XyAke01hdGgucm91bmQoKHRvdGFsVGltZSAvICgxMDAwICogNjAgKiA2MCkpICogMTApIC8gMTBcblx0XHRcdFx0XHR9YCxcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0bWVkaWEoZHYpIHtcblx0XHRjb25zdCBjdXJyZW50ID0gZHYuY3VycmVudCgpO1xuXHRcdGNvbnN0IGZtID0gY3VycmVudC5maWxlLmZyb250bWF0dGVyO1xuXHRcdGNvbnN0IHBhZ2VzID0gZHYucGFnZXMoYFwiJHtQYXRocy5SZWZzfS8ke2ZtLnJlZl9pZH1cImApLmFycmF5KCk7XG5cdFx0aWYgKHBhZ2VzLmxlbmd0aCAhPT0gMSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCBtZWRpYSA9IHBhZ2VzWzBdO1xuXHRcdGNvbnN0IG1lZGlhRm0gPSBtZWRpYS5maWxlLmZyb250bWF0dGVyO1xuXHRcdEF1dG9GaWVsZC50aXRsZShkdiwgbWVkaWFGbSk7XG5cdFx0ZHYucGFyYWdyYXBoKFJlbmRlcmVyLm1ha2VMaW5rQWxpYXMoZHYsIG1lZGlhLmZpbGUpKTtcblx0XHRBdXRvRmllbGQuYXV0aG9ycyhkdiwgbWVkaWFGbSk7XG5cdFx0QXV0b0ZpZWxkLnRhZ3MoZHYsIG1lZGlhRm0sIDMpO1xuXG5cdFx0Y29uc3QgbG9nRW50cmllcyA9IGR2XG5cdFx0XHQucGFnZXMoYFwiJHtQYXRocy5Mb2dzfS8ke2ZtLnV1aWR9XCJgKVxuXHRcdFx0LndoZXJlKChwKSA9PiBwLnR5cGUgPT09IDYpXG5cdFx0XHQuc29ydCgoaykgPT4gay5jcmVhdGVkX2F0LCBcImRlc2NcIik7XG5cdFx0QXV0b0ZpZWxkLmxvZ3MoZHYsIGxvZ0VudHJpZXMpO1xuXHR9LFxuXG5cdGF1dG9GaWVsZFRpdGxlKGR2LCBmbSkge1xuXHRcdGNvbnN0IHRpdGxlID0gZm0uYWxpYXM7XG5cdFx0aWYgKHRpdGxlID09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGR2LmhlYWRlcigxLCB0aXRsZSk7XG5cdH0sXG5cblx0YXV0b0ZpZWxkQXV0aG9ycyhkdiwgZm0pIHtcblx0XHRjb25zdCBhdXRob3JzID0gZm0uYXV0aG9ycztcblx0XHRpZiAoYXV0aG9ycyA9PT0gdW5kZWZpbmVkIHx8IGF1dGhvcnMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGR2LmhlYWRlcigyLCBcIkF1dGhvcnNcIik7XG5cdFx0ZHYubGlzdChhdXRob3JzKTtcblx0fSxcblxuXHRhdXRvRmllbGRUYWdzKGR2LCBmbSkge1xuXHRcdGNvbnN0IHRhZ3MgPSBmbS50YWdzO1xuXHRcdGlmICh0YWdzID09IHVuZGVmaW5lZCB8fCB0YWdzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRhZ3Muc29ydCgpO1xuXHRcdGR2LmhlYWRlcigyLCBcIlRhZ3NcIik7XG5cdFx0bGV0IHMgPSBcIlwiO1xuXHRcdGZvciAoY29uc3QgdGFnIG9mIHRhZ3MpIHtcblx0XHRcdHMgKz0gYCAjJHt0YWd9YDtcblx0XHR9XG5cdFx0ZHYucGFyYWdyYXBoKHMpO1xuXHR9LFxuXG5cdGxpdGVyYXR1cmUoZHYpIHtcblx0XHRjb25zdCBjdXJyZW50ID0gZHYuY3VycmVudCgpO1xuXHRcdGNvbnN0IGZtID0gY3VycmVudC5maWxlLmZyb250bWF0dGVyO1xuXHRcdGlmIChmbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmIChIZWxwZXIubmlsQ2hlY2soZm0uYXV0aG9ycykpIHtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5hdXRvRmllbGRUaXRsZShkdiwgZm0pO1xuXHRcdFx0dGhpcy5hdXRvRmllbGRBdXRob3JzKGR2LCBmbSk7XG5cdFx0XHR0aGlzLmF1dG9GaWVsZFRhZ3MoZHYsIGZtKTtcblx0XHR9XG5cdH0sXG5cblx0Z29hbChkdikge1xuXHRcdGNvbnN0IGN1cnJlbnQgPSBkdi5jdXJyZW50KCk7XG5cdFx0Y29uc3QgZm0gPSBjdXJyZW50LmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0aWYgKGZtID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnNvbGUud2FybihcImZtIGlzIHJlcXVpcmVkXCIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIHRoaXMuYXV0b0ZpZWxkTmVlZChkdiwgZm0pO1xuXHRcdC8vIHRoaXMuYXV0b0ZpZWxkTmVlZGVkQnkoZHYsIGN1cnJlbnQpO1xuXHRcdC8vIHRoaXMuYXV0b0ZpZWxkVGFncyhkdiwgZm0pO1xuXHRcdC8vXG5cdFx0Y29uc3QgY3JlYXRlZF9hdCA9IG5ldyBEYXRlKGZtLmNyZWF0ZWRfYXQpO1xuXHRcdGNvbnN0IGxvZ0VudHJpZXMgPSBkdlxuXHRcdFx0LnBhZ2VzKGBcIiR7UGF0aHMuTG9nc30vJHtmbS51dWlkfVwiYClcblx0XHRcdC53aGVyZSgocCkgPT4gcC50eXBlID09PSA2KVxuXHRcdFx0LnNvcnQoKGspID0+IGsuY3JlYXRlZF9hdCwgXCJkZXNjXCIpO1xuXG5cdFx0Y29uc3QgYnVmZiA9IFtdO1xuXHRcdGZvciAoY29uc3QgZW50cnkgb2YgbG9nRW50cmllcykge1xuXHRcdFx0Y29uc3QgZm1lID0gZW50cnkuZmlsZS5mcm9udG1hdHRlcjtcblx0XHRcdGNvbnN0IGUgPSBbXTtcblxuXHRcdFx0aWYgKGZtZSA9PT0gdW5kZWZpbmVkIHx8IGZtZS5jcmVhdGVkX2F0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGZyb250bWF0dGVyOiAke2ZtZS51dWlkfWApO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzdGFydCA9IG5ldyBEYXRlKGZtZS5jcmVhdGVkX2F0KTtcblx0XHRcdGUucHVzaChzdGFydC50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKSk7XG5cblx0XHRcdGUucHVzaChcblx0XHRcdFx0ZHYuc2VjdGlvbkxpbmsoXG5cdFx0XHRcdFx0Zm1lLnV1aWQsXG5cdFx0XHRcdFx0XCIjIyBDb250ZW50XCIsXG5cdFx0XHRcdFx0ZmFsc2UsXG5cdFx0XHRcdFx0Zm1lLnV1aWQuc2xpY2UoMCwgOCksXG5cdFx0XHRcdCksXG5cdFx0XHQpO1xuXG5cdFx0XHRidWZmLnB1c2goZSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgYmVmb3JlID0gbmV3IERhdGUoZm0uYmVmb3JlKTtcblx0XHQvLyBkYXlzXG5cdFx0Y29uc3QgdGltZWZyYW1lID1cblx0XHRcdChiZWZvcmUuZ2V0VGltZSgpIC0gY3JlYXRlZF9hdC5nZXRUaW1lKCkpIC8gKDEwMDAgKiAzNjAwICogMjQpO1xuXHRcdGxldCB0aW1lZnJhbWVUZXh0ID0gXCJcIjtcblx0XHQvLyAxIGpvdXJcblx0XHQvLyAxIHNlbWFpbmVcblx0XHQvLyAyIHNlbWFpbmVcblx0XHQvLyAxIG1vaXNcblx0XHQvLyAyIG1vaXNcblx0XHQvLyA2IG1vaXNcblx0XHQvLyAxIGFuXG5cdFx0Ly8gMiBhbnNcblx0XHQvLyA1IGFuc1xuXHRcdGR2LmhlYWRlcigzLCBcIlRpbWVmcmFtZVwiKTtcblx0XHRpZiAodGltZWZyYW1lID4gMCAmJiB0aW1lZnJhbWUgPCAzMCkge1xuXHRcdFx0dGltZWZyYW1lVGV4dCA9IFwicnVuYXdheVwiO1xuXHRcdH0gZWxzZSBpZiAodGltZWZyYW1lIDwgNjApIHtcblx0XHRcdHRpbWVmcmFtZVRleHQgPSBcIjEwLDAwMCBmZWV0XCI7XG5cdFx0fSBlbHNlIGlmICh0aW1lZnJhbWUgPCAzNjApIHtcblx0XHRcdHRpbWVmcmFtZVRleHQgPSBcIjIwLDAwMCBmZWV0XCI7XG5cdFx0fSBlbHNlIGlmICh0aW1lZnJhbWUgPCA3MjApIHtcblx0XHRcdHRpbWVmcmFtZVRleHQgPSBcIjMwLDAwMCBmZWV0XCI7XG5cdFx0fSBlbHNlIGlmICh0aW1lZnJhbWUgPCAxMDgwKSB7XG5cdFx0XHR0aW1lZnJhbWVUZXh0ID0gXCI0MCwwMDAgZmVldFwiO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aW1lZnJhbWVUZXh0ID0gXCI1MCwwMDAgZmVldFwiO1xuXHRcdH1cblxuXHRcdGR2LnBhcmFncmFwaCh0aW1lZnJhbWVUZXh0KTtcblxuXHRcdGlmIChidWZmLmxlbmd0aCA+IDApIHtcblx0XHRcdGR2LmhlYWRlcigyLCBcIlJldmlld3NcIik7XG5cdFx0XHRkdi50YWJsZShbXCJyZXZpZXdlZF9hdFwiLCBcInV1aWRcIl0sIGJ1ZmYpO1xuXHRcdH1cblx0fSxcblxuXHRkYWlseShkdikge1xuXHRcdGNvbnN0IGN1cnJlbnQgPSBkdi5jdXJyZW50KCkuZmlsZS5mcm9udG1hdHRlcjtcblx0XHRjb25zdCBjdXJyZW50QXQgPSBuZXcgRGF0ZShjdXJyZW50LmF0KTtcblx0XHRjb25zdCBjdXJyZW50QXRTaG9ydCA9IGN1cnJlbnRBdC50b0lTT1N0cmluZygpLnNsaWNlKDAsIDcpO1xuXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGNvbnN0IGdvbmV4dCA9IGFwcC5wbHVnaW5zLnBsdWdpbnMub2JzaWRpYW5fZ29uZXh0O1xuXHRcdGNvbnN0IG5vdGVIZWxwZXIgPSBuZXcgTm90ZUhlbHBlcihnb25leHQsIGR2LCBuZXcgRnJvbnRtYXR0ZXIoZ29uZXh0KSk7XG5cblx0XHRjb25zdCBwYWdlcyA9IGR2XG5cdFx0XHQucGFnZXMoYFwiJHtQYXRocy5UYXNrc31cImApXG5cdFx0XHQud2hlcmUoKHBhZ2UpID0+IHtcblx0XHRcdFx0Ly8gaWYgKHBhZ2UuZmlsZS5mcm9udG1hdHRlci5hdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdC8vIFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHQvLyB9XG5cblx0XHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdFx0aWYgKGN1cnJlbnQudXVpZCA9PT0gZm0udXVpZCkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChmbS5mbS5zdGF0dXMgIT09IFwidG9kb1wiIHx8IGZtLmdldFByb2plY3QoKSA9PT0gXCJkYWlseVwiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcblx0XHRcdFx0Y29uc3Qgbm93ID0gY3VycmVudEF0O1xuXHRcdFx0XHRsZXQgZm1BdFNob3J0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZtQXRTaG9ydCA9IGZtLmF0LnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApO1xuXHRcdFx0XHR9IGNhdGNoIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYCR7Zm0udXVpZH1gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghbm90ZUhlbHBlci5pc0RvYWJsZShwYWdlLCBjdXJyZW50QXQpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgKGZtLnV1aWQgPT09IFwiMmE5N2RlMzUtY2E4Ny00MjY3LTkxNTktNmMwOTZkNDE2M2YxXCIpIHtcblx0XHRcdFx0Ly8gXHRjb25zb2xlLmxvZyhgdXVpZDogJHtmbS51dWlkfWApO1xuXHRcdFx0XHQvLyBcdGNvbnNvbGUubG9nKGBub3c6ICR7bm93fWApO1xuXHRcdFx0XHQvLyBcdGNvbnNvbGUubG9nKGBmbS5hdDogJHtmbS5hdH1gKTtcblx0XHRcdFx0Ly8gXHRjb25zb2xlLmxvZyhgZm1BdFNob3J0OiAke2ZtQXRTaG9ydH1gKTtcblx0XHRcdFx0Ly8gXHRjb25zb2xlLmxvZyhgY3VycmVudEF0U2hvcnQ6ICR7Y3VycmVudEF0U2hvcnR9YCk7XG5cdFx0XHRcdC8vIFx0Y29uc29sZS5sb2coYGNvbmRpdGlvbjogJHtmbS5hdCAhPT0gdW5kZWZpbmVkICYmIGZtQXRTaG9ydCA9PT0gY3VycmVudEF0U2hvcnR9YCk7XG5cdFx0XHRcdC8vIH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cGFnZS5maWxlLmZyb250bWF0dGVyLmF0ICE9PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0XHRmbUF0U2hvcnQgPT09IGN1cnJlbnRBdFNob3J0XG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHBhZ2UuZmlsZS5mcm9udG1hdHRlci5hdCAhPT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdFx0Zm0uYXQuZ2V0VGltZSgpIDwgbm93LmdldFRpbWUoKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRwYWdlLmZpbGUuZnJvbnRtYXR0ZXIuYmVmb3JlICE9PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0XHRmbS5iZWZvcmUuZ2V0VGltZSgpID4gbm93LmdldFRpbWUoKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRwYWdlLmZpbGUuZnJvbnRtYXR0ZXIuYWZ0ZXIgIT09IHVuZGVmaW5lZCAmJlxuXHRcdFx0XHRcdGZtLmFmdGVyLmdldFRpbWUoKSA8IG5vdy5nZXRUaW1lKClcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9KVxuXHRcdFx0LnNvcnQoKGspID0+IGsuYXQsIFwiYXNjXCIpO1xuXG5cdFx0aWYgKHBhZ2VzLmxlbmd0aCA+IDApIHtcblx0XHRcdGNvbnN0IGJ1ZmYgPSBbXTtcblx0XHRcdGZvciAoY29uc3QgcGFnZSBvZiBwYWdlcykge1xuXHRcdFx0XHRjb25zdCBmbSA9IG5ldyBGcm9udG1hdHRlckpTKHBhZ2UpO1xuXHRcdFx0XHRjb25zdCBoID0gU3RyaW5nKGZtLmF0LmdldEhvdXJzKCkpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcblx0XHRcdFx0Y29uc3QgbSA9IFN0cmluZyhmbS5hdC5nZXRNaW51dGVzKCkpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcblx0XHRcdFx0aWYgKHBhZ2UuZmlsZS5mcm9udG1hdHRlci5zdGF0dXMgPT09IFwiZG9uZVwiKSB7XG5cdFx0XHRcdFx0YnVmZi5wdXNoKFtcblx0XHRcdFx0XHRcdGB+fiR7UmVuZGVyZXIubWFrZUxpbmtTaG9ydFVVSUQoZHYsIHBhZ2UuZmlsZSwgXCJUYXNrXCIpfX5+YCxcblx0XHRcdFx0XHRcdGB+fiR7aH06JHttfX5+YCxcblx0XHRcdFx0XHRdKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRidWZmLnB1c2goW1xuXHRcdFx0XHRcdFx0YCR7UmVuZGVyZXIubWFrZUxpbmtTaG9ydFVVSUQoZHYsIHBhZ2UuZmlsZSwgXCJUYXNrXCIpfWAsXG5cdFx0XHRcdFx0XHRgJHtofToke219YCxcblx0XHRcdFx0XHRdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZHYudGFibGUoW1widXVpZFwiLCBcImF0XCJdLCBidWZmKTtcblxuXHRcdH1cblxuXHRcdEF1dG9GaWVsZC5kYWlseUpvdXJhbChkdik7XG5cdFx0Ly8gQXV0b0ZpZWxkLm1vbnRobHlKb3VyYWwoZHYpO1xuXG5cdH0sXG5cblx0bW9udGhseUpvdXJhbChkdikge1xuXHRcdGNvbnN0IGN1cnJlbnQgPSBuZXcgRnJvbnRtYXR0ZXJKUyhkdi5jdXJyZW50KCkpO1xuXHRcdGNvbnN0IGN1cnJlbnRBdFNob3J0ID0gY3VycmVudC5hdC50b0lTT1N0cmluZygpLnNsaWNlKDAsIDcpO1xuXG5cdFx0Y29uc3QgcGFnZXMgPSBkdlxuXHRcdFx0LnBhZ2VzKGBcIkpvdXJuYWxcImApXG5cdFx0XHQud2hlcmUoKHBhZ2UpID0+IHtcblx0XHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdFx0Y29uc3QgYXRTaG9ydCA9IGZtLmNyZWF0ZWRBdC50b0lTT1N0cmluZygpLnNsaWNlKDAsIDcpO1xuXHRcdFx0XHRpZiAoYXRTaG9ydCA9PT0gY3VycmVudEF0U2hvcnQgJiYgZm0uZ2V0UHJvamVjdCgpID09PSBcIm1vbnRobHlcIikge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSlcblx0XHRcdC5zb3J0KChrKSA9PiBrLmNyZWF0ZWRfYXQsIFwiYXNjXCIpO1xuXG5cdFx0ZHYuaGVhZGVyKDIsIFwiSm91cm5hbFwiKTtcblx0XHRmb3IgKGNvbnN0IHBhZ2Ugb2YgcGFnZXMpIHtcblx0XHRcdGNvbnN0IGZtID0gbmV3IEZyb250bWF0dGVySlMocGFnZSk7XG5cdFx0XHRpZiAocGFnZS5maWxlLmZyb250bWF0dGVyLmFsaWFzICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cGFnZS5maWxlLmZyb250bWF0dGVyLm5hbWUgPSBwYWdlLmZpbGUuZnJvbnRtYXR0ZXIuYWxpYXM7XG5cdFx0XHR9IGVsc2UgaWYgKGZtLmdldFByb2plY3QoKSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHBhZ2UuZmlsZS5mcm9udG1hdHRlci5uYW1lID0gZm0uZ2V0UHJvamVjdCgpO1xuXHRcdFx0fSBlbHNlIGlmIChmbS5nZXREb21haW4oKSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHBhZ2UuZmlsZS5mcm9udG1hdHRlci5uYW1lID0gZm0uZ2V0RG9tYWluKCk7XG5cdFx0XHR9XG5cblx0XHRcdGR2LnBhcmFncmFwaChSZW5kZXJlci5tYWtlTGlua05hbWUoZHYsIHBhZ2UuZmlsZSkpO1xuXHRcdH1cblx0fSxcblxuXHRkYWlseUpvdXJhbChkdikge1xuXHRcdGNvbnN0IGN1cnJlbnQgPSBuZXcgRnJvbnRtYXR0ZXJKUyhkdi5jdXJyZW50KCkpO1xuXHRcdGNvbnN0IGN1cnJlbnRBdFNob3J0ID0gY3VycmVudC5hdC50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKTtcblx0XHRjb25zb2xlLmxvZyhjdXJyZW50QXRTaG9ydCk7XG5cdFx0Y29uc3QgcGFnZXMgPSBkdlxuXHRcdFx0LnBhZ2VzKGBcIkpvdXJuYWxcImApXG5cdFx0XHQud2hlcmUoKHBhZ2UpID0+IHtcblx0XHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdFx0Y29uc3QgYXRTaG9ydCA9IGZtLmNyZWF0ZWRBdC50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKTtcblx0XHRcdFx0aWYgKGF0U2hvcnQgPT09IGN1cnJlbnRBdFNob3J0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9KVxuXHRcdFx0LnNvcnQoKGspID0+IGsuY3JlYXRlZF9hdCwgXCJhc2NcIik7XG5cblx0XHRkdi5oZWFkZXIoMiwgXCJKb3VybmFsXCIpO1xuXHRcdGZvciAoY29uc3QgcGFnZSBvZiBwYWdlcykge1xuXHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdGlmIChwYWdlLmZpbGUuZnJvbnRtYXR0ZXIuYWxpYXMgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRwYWdlLmZpbGUuZnJvbnRtYXR0ZXIubmFtZSA9IHBhZ2UuZmlsZS5mcm9udG1hdHRlci5hbGlhcztcblx0XHRcdH0gZWxzZSBpZiAoZm0uZ2V0UHJvamVjdCgpICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cGFnZS5maWxlLmZyb250bWF0dGVyLm5hbWUgPSBmbS5nZXRQcm9qZWN0KCk7XG5cdFx0XHR9IGVsc2UgaWYgKGZtLmdldERvbWFpbigpICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cGFnZS5maWxlLmZyb250bWF0dGVyLm5hbWUgPSBmbS5nZXREb21haW4oKTtcblx0XHRcdH1cblxuXHRcdFx0ZHYucGFyYWdyYXBoKFJlbmRlcmVyLm1ha2VMaW5rTmFtZShkdiwgcGFnZS5maWxlKSk7XG5cdFx0XHQvLyBkdi5wYXJhZ3JhcGgoUmVuZGVyZXIubWFrZUxpbmtBbGlhcyhkdiwgcGFnZS5maWxlKSk7XG5cdFx0fVxuXHR9LFxuXG5cdGRhaWx5R29hbHMoZHYpIHtcblx0XHRjb25zdCBjdXJyZW50ID0gZHYuY3VycmVudCgpLmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0Y29uc3QgY3VycmVudEF0ID0gbmV3IERhdGUoY3VycmVudC5hdCk7XG5cblx0XHRjb25zdCBwYWdlcyA9IGR2XG5cdFx0XHQucGFnZXMoYFwiJHtQYXRocy5Hb2Fsc31cImApXG5cdFx0XHQud2hlcmUoKHBhZ2UpID0+IHtcblx0XHRcdFx0aWYgKHBhZ2UuZmlsZS5mcm9udG1hdHRlci5zdGF0dXMgIT09IFwiYWN0aXZlXCIpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0XHQuc29ydCgoaykgPT4gay5hdCwgXCJhc2NcIik7XG5cblx0XHRpZiAocGFnZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Zm9yIChjb25zdCBwYWdlIG9mIHBhZ2VzKSB7XG5cdFx0XHRkdi5wYXJhZ3JhcGgoUmVuZGVyZXIubWFrZUxpbmtTaG9ydFVVSUQoZHYsIHBhZ2UuZmlsZSkpO1xuXHRcdH1cblx0fSxcblxuXHR0YXNrKGR2KSB7XG5cdFx0Y29uc3QgZHZMaWIgPSBuZXcgRHZMaWIoKTtcblx0XHRkdkxpYi5hdXRvRmllbGRUYXNrKGR2KTtcblx0fSxcblxuXHRsb2coZHYpIHtcblx0XHRjb25zdCBjdXJyZW50ID0gZHYuY3VycmVudCgpO1xuXHRcdGNvbnN0IGN1ckZtID0gbmV3IEZyb250bWF0dGVySlMoY3VycmVudCk7XG5cdFx0Y29uc3QgY3VycmVudElkID0gY3VyRm0udXVpZDtcblx0XHRjb25zdCBjdXJyZW50UGFyZW50SWQgPSBjdXJyZW50LmZpbGUucGF0aC5zcGxpdChcIi9cIilbMV07XG5cdFx0QXNzZXJ0LlRydWUoXG5cdFx0XHRjdXJyZW50UGFyZW50SWQgIT09IHVuZGVmaW5lZCxcblx0XHRcdGBjdXJyZW50UGFyZW50SWQgdW5kZWZpbmVkIGZvciAke2N1ckZtLnV1aWR9YCxcblx0XHQpO1xuXG5cdFx0Y29uc3QgcGFnZXMgPSBkdlxuXHRcdFx0LnBhZ2VzKGBcIiR7UGF0aHMuTG9nc31cImApXG5cdFx0XHQud2hlcmUoKHBhZ2UpID0+IHtcblx0XHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdFx0Y29uc3QgcGFyZW50SWQgPSBwYWdlLmZpbGUucGF0aC5zcGxpdChcIi9cIilbMV07XG5cdFx0XHRcdEFzc2VydC5UcnVlKFxuXHRcdFx0XHRcdHBhcmVudElkICE9PSB1bmRlZmluZWQsXG5cdFx0XHRcdFx0YHBhcmVudElkIHVuZGVmaW5lZCBmb3IgJHtmbS51dWlkfWAsXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGlmIChwYXJlbnRJZCAhPT0gY3VycmVudFBhcmVudElkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9KVxuXHRcdFx0LnNvcnQoKGspID0+IGsuY3JlYXRlZF9hdCwgXCJhc2NcIik7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHBhZ2VzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBwYWdlID0gcGFnZXNbaV07XG5cdFx0XHRBc3NlcnQuVHJ1ZShwYWdlICE9PSB1bmRlZmluZWQsIFwiYXNzIGVydCBmYWlsZWRcIik7XG5cdFx0XHRjb25zdCBmbSA9IG5ldyBGcm9udG1hdHRlckpTKHBhZ2UpO1xuXHRcdFx0aWYgKGZtLnV1aWQgPT09IGN1cnJlbnRJZCkge1xuXHRcdFx0XHQvLyBnb3RjaGFcblx0XHRcdFx0aWYgKGkgPT09IDApIHtcblx0XHRcdFx0XHRjb25zdCBkdkxpYiA9IG5ldyBEdkxpYigpO1xuXHRcdFx0XHRcdGR2TGliLmF1dG9GaWVsZExvZyhkdik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZHYucGFyYWdyYXBoKFJlbmRlcmVyLm1ha2VMaW5rU2hvcnRVVUlEKGR2LCBwYWdlc1tpIC0gMV0uZmlsZSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxufTtcblxuLy8gdGhpcyBtdXN0IGJlIGNhbGxlZCBmcm9tIGBkYXRhdmlld2pzYCBjb2RlYmxvY2tzXG5leHBvcnQgY29uc3QgUmVuZGVyZXIgPSB7XG5cdG1ha2VMaW5rTmFtZShkdiwgZiwgYW5jaG9yID0gXCJDb250ZW50XCIpIHtcblx0XHRpZiAoSGVscGVyLm5pbENoZWNrKGYuZnJvbnRtYXR0ZXIubmFtZSkpIHtcblx0XHRcdHJldHVybiBSZW5kZXJlci5tYWtlTGlua1Nob3J0VVVJRChkdiwgZiwgYW5jaG9yKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZHYuc2VjdGlvbkxpbmsoZi5wYXRoLCBhbmNob3IsIGZhbHNlLCBgJHtmLmZyb250bWF0dGVyLm5hbWV9YCk7XG5cdH0sXG5cblx0bWFrZUxpbmtBbGlhcyhkdiwgZiwgYW5jaG9yID0gXCJDb250ZW50XCIpIHtcblx0XHRpZiAoSGVscGVyLm5pbENoZWNrKGYuZnJvbnRtYXR0ZXIuYWxpYXMpKSB7XG5cdFx0XHRyZXR1cm4gUmVuZGVyZXIubWFrZUxpbmtTaG9ydFVVSUQoZHYsIGYsIGFuY2hvcik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGR2LnNlY3Rpb25MaW5rKGYucGF0aCwgYW5jaG9yLCBmYWxzZSwgYCR7Zi5mcm9udG1hdHRlci5hbGlhc31gKTtcblx0fSxcblxuXHRtYWtlTGlua1Nob3J0VVVJRChkdiwgZiwgYW5jaG9yID0gXCJDb250ZW50XCIpIHtcblx0XHRyZXR1cm4gZHYuc2VjdGlvbkxpbmsoXG5cdFx0XHRmLnBhdGgsXG5cdFx0XHRhbmNob3IsXG5cdFx0XHRmYWxzZSxcblx0XHRcdGAke2YuZnJvbnRtYXR0ZXIudXVpZC5zbGljZSgwLCA4KX1gLFxuXHRcdCk7XG5cdH0sXG5cblx0bWFrZUxpbmsoZHYsIGYsIG5hbWUgPSB1bmRlZmluZWQsIGFuY2hvciA9IFwiQ29udGVudFwiKSB7XG5cdFx0cmV0dXJuIGR2LnNlY3Rpb25MaW5rKGYucGF0aCwgYW5jaG9yLCBmYWxzZSwgbmFtZSk7XG5cdH0sXG5cblx0cHJvamVjdExvZ3MoZHYsIGRhdGEpIHtcblx0XHRjb25zdCBjb2xzID0gW1widHlwZVwiLCBcInRhc2tfaWRcIiwgXCJsb2dfaWRcIiwgXCJ0b29rXCIsIFwicmV2aWV3ZWRcIl07XG5cdFx0Y29uc3QgYnVmZiA9IFtdO1xuXHRcdGxldCB0b3RhbFRpbWUgPSAwO1xuXG5cdFx0Zm9yIChjb25zdCBkIG9mIGRhdGEpIHtcblx0XHRcdGNvbnN0IGYgPSBkLmZpbGU7XG5cdFx0XHRjb25zdCBmbSA9IGQuZmlsZS5mcm9udG1hdHRlcjtcblx0XHRcdEFzc2VydC5UcnVlKFxuXHRcdFx0XHQhSGVscGVyLm5pbENoZWNrKGZtLnV1aWQpLFxuXHRcdFx0XHRgXCJ1dWlkXCIgaWQgbm90IGRlZmluZWQgZm9yOiAke2YucGF0aH1gLFxuXHRcdFx0KTtcblx0XHRcdEFzc2VydC5UcnVlKFxuXHRcdFx0XHQhSGVscGVyLm5pbENoZWNrKGZtLnR5cGUpLFxuXHRcdFx0XHRgXCJ0eXBlXCIgaWQgbm90IGRlZmluZWQgZm9yOiAke2YucGF0aH1gLFxuXHRcdFx0KTtcblxuXHRcdFx0Y29uc3QgY3JlYXRlZEF0ID0gbmV3IERhdGUoZm0uY3JlYXRlZF9hdCk7XG5cdFx0XHRjb25zdCBkb25lQXQgPSBuZXcgRGF0ZShmbS5kb25lX2F0KTtcblx0XHRcdGNvbnN0IGRlbHRhID0gZG9uZUF0LmdldFRpbWUoKSAtIGNyZWF0ZWRBdC5nZXRUaW1lKCk7XG5cblx0XHRcdHRvdGFsVGltZSArPSBkZWx0YTtcblx0XHRcdGNvbnN0IHJlY29yZCA9IHtcblx0XHRcdFx0dGFza0lkOiBcIlwiLFxuXHRcdFx0XHRsb2dJZDogUmVuZGVyZXIubWFrZUxpbmtBbGlhcyhkdiwgZiksXG5cdFx0XHRcdHRvb2s6IE1hdGgucm91bmQoKGRlbHRhIC8gKDEwMDAgKiA2MCAqIDYwKSkgKiAxMCkgLyAxMCxcblx0XHRcdFx0cmV2aWV3ZWQ6IEhlbHBlci5uaWxDaGVjayhmbS5yZXZpZXdlZCkgPyAwIDogZm0ucmV2aWV3ZWQsXG5cdFx0XHRcdHR5cGU6IHVuZGVmaW5lZCxcblx0XHRcdH07XG5cdFx0XHRjb25zdCBwYWdlcyA9IGR2LnBhZ2VzKGBcIiR7UGF0aHMuVGFza3N9LyR7Zm0ucGFyZW50X2lkfVwiYCkuYXJyYXkoKTtcblx0XHRcdGlmIChwYWdlcy5sZW5ndGggIT09IDEpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRcdGBwYXJlbnQgdGFzayB3aXRoIGlkOiBcIiR7Zm0ucGFyZW50X2lkfVwiIGRvZXMgbm90IGV4aXN0c2AsXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBwYXJlbnQgPSBwYWdlc1swXTtcblx0XHRcdHN3aXRjaCAocGFyZW50LmZpbGUuZnJvbnRtYXR0ZXIudHlwZSkge1xuXHRcdFx0XHRjYXNlIFR5cGVzLlRhc2s6XG5cdFx0XHRcdFx0cmVjb3JkLnR5cGUgPSBgPGZvbnQgY29sb3I9OEIwMDAwPnRhc2s8L2ZvbnQ+YDtcblx0XHRcdFx0XHRyZWNvcmQudGFza0lkID0gUmVuZGVyZXIubWFrZUxpbmtTaG9ydFVVSUQoXG5cdFx0XHRcdFx0XHRkdixcblx0XHRcdFx0XHRcdHBhcmVudC5maWxlLFxuXHRcdFx0XHRcdFx0XCJUYXNrXCIsXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBUeXBlcy5NZWRpYTpcblx0XHRcdFx0XHRyZWNvcmQudHlwZSA9IGA8Zm9udCBjb2xvcj0wMDAwOEI+bWVkaWE8L2ZvbnQ+YDtcblx0XHRcdFx0XHRyZWNvcmQudGFza0lkID0gUmVuZGVyZXIubWFrZUxpbmtTaG9ydFVVSUQoXG5cdFx0XHRcdFx0XHRkdixcblx0XHRcdFx0XHRcdHBhcmVudC5maWxlLFxuXHRcdFx0XHRcdFx0XCJDb250ZW50XCIsXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBUeXBlcy5QcmF4aXM6XG5cdFx0XHRcdFx0cmVjb3JkLnR5cGUgPSBgPGZvbnQgY29sb3I9RkY4QzAwPnByYXhpczwvZm9udD5gO1xuXHRcdFx0XHRcdHJlY29yZC50YXNrSWQgPSBSZW5kZXJlci5tYWtlTGlua1Nob3J0VVVJRChcblx0XHRcdFx0XHRcdGR2LFxuXHRcdFx0XHRcdFx0cGFyZW50LmZpbGUsXG5cdFx0XHRcdFx0XHRcIkNvbnRlbnRcIixcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFR5cGVzLlByb3Zpc2lvbjpcblx0XHRcdFx0XHRyZWNvcmQudHlwZSA9IGA8Zm9udCBjb2xvcj1EQzE0M0M+cHJvdmlzaW9uPC9mb250PmA7XG5cdFx0XHRcdFx0cmVjb3JkLnRhc2tJZCA9IFJlbmRlcmVyLm1ha2VMaW5rU2hvcnRVVUlEKFxuXHRcdFx0XHRcdFx0ZHYsXG5cdFx0XHRcdFx0XHRwYXJlbnQuZmlsZSxcblx0XHRcdFx0XHRcdFwiQ29udGVudFwiLFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0YFJlbmRlcmVyLnByb2plY3RMb2dzOiB0eXBlIFwiJHtwYXJlbnQuZmlsZS5mcm9udG1hdHRlci50eXBlfVwiIG5vdCBpbXBsZW1lbnRlZGAsXG5cdFx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdGJ1ZmYucHVzaChbXG5cdFx0XHRcdHJlY29yZC50eXBlLFxuXHRcdFx0XHRyZWNvcmQudGFza0lkLFxuXHRcdFx0XHRyZWNvcmQubG9nSWQsXG5cdFx0XHRcdHJlY29yZC50b29rLFxuXHRcdFx0XHRyZWNvcmQucmV2aWV3ZWQsXG5cdFx0XHRdKTtcblx0XHR9XG5cblx0XHRkdi50YWJsZShjb2xzLCBidWZmKTtcblx0XHQvLyBNYXRoLnJvdW5kKCh0b3RhbFRpbWUgLyAoMTAwMCAqIDYwICogNjApKSAqIDEwKSAvIDEwLFxuXHR9LFxuXG5cdGdvYWwoZHYsIGRhdGEpIHtcblx0XHRjb25zdCBidWZmID0gW107XG5cdFx0Zm9yIChjb25zdCBmbSBvZiBkYXRhKSB7XG5cdFx0XHRjb25zdCBjcmVhdGVkX2F0ID0gZm0uY3JlYXRlZEF0O1xuXHRcdFx0Y29uc3QgbG9nRW50cmllcyA9IGR2XG5cdFx0XHRcdC5wYWdlcyhgXCIke1BhdGhzLkxvZ3N9LyR7Zm0udXVpZH1cImApXG5cdFx0XHRcdC53aGVyZSgocCkgPT4gcC50eXBlID09PSA2KVxuXHRcdFx0XHQuc29ydCgoaykgPT4gay5jcmVhdGVkX2F0LCBcImRlc2NcIik7XG5cdFx0XHRjb25zdCBiZWZvcmUgPSBuZXcgRGF0ZShmbS5mbS5iZWZvcmUpO1xuXG5cdFx0XHRjb25zdCB0aW1lZnJhbWUgPVxuXHRcdFx0XHQoYmVmb3JlLmdldFRpbWUoKSAtIGNyZWF0ZWRfYXQuZ2V0VGltZSgpKSAvICgxMDAwICogMzYwMCAqIDI0KTtcblx0XHRcdGxldCB0aW1lZnJhbWVUZXh0ID0gXCJcIjtcblx0XHRcdGlmICh0aW1lZnJhbWUgPiAwICYmIHRpbWVmcmFtZSA8IDMwKSB7XG5cdFx0XHRcdHRpbWVmcmFtZVRleHQgPSBcInJ1bmF3YXlcIjtcblx0XHRcdH0gZWxzZSBpZiAodGltZWZyYW1lIDwgNjApIHtcblx0XHRcdFx0dGltZWZyYW1lVGV4dCA9IFwiMTAsMDAwIGZlZXRcIjtcblx0XHRcdH0gZWxzZSBpZiAodGltZWZyYW1lIDwgMzYwKSB7XG5cdFx0XHRcdHRpbWVmcmFtZVRleHQgPSBcIjIwLDAwMCBmZWV0XCI7XG5cdFx0XHR9IGVsc2UgaWYgKHRpbWVmcmFtZSA8IDcyMCkge1xuXHRcdFx0XHR0aW1lZnJhbWVUZXh0ID0gXCIzMCwwMDAgZmVldFwiO1xuXHRcdFx0fSBlbHNlIGlmICh0aW1lZnJhbWUgPCAxMDgwKSB7XG5cdFx0XHRcdHRpbWVmcmFtZVRleHQgPSBcIjQwLDAwMCBmZWV0XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aW1lZnJhbWVUZXh0ID0gXCI1MCwwMDAgZmVldFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRidWZmLnB1c2goW1xuXHRcdFx0XHRiZWZvcmUudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCksXG5cdFx0XHRcdGR2LnNlY3Rpb25MaW5rKFxuXHRcdFx0XHRcdGZtLnV1aWQsXG5cdFx0XHRcdFx0XCIjIyBDb250ZW50XCIsXG5cdFx0XHRcdFx0ZmFsc2UsXG5cdFx0XHRcdFx0Zm0udXVpZC5zbGljZSgwLCA4KSxcblx0XHRcdFx0KSxcblx0XHRcdFx0Zm0uZ2V0RG9tYWluKCksXG5cdFx0XHRcdHRpbWVmcmFtZVRleHQsXG5cdFx0XHRdKTtcblx0XHR9XG5cblx0XHRkdi50YWJsZShbXCJkZWFkbGluZVwiLCBcInV1aWRcIiwgXCJkb21haW5cIiwgXCJ0aW1lZnJhbWVcIl0sIGJ1ZmYpO1xuXHR9LFxuXG5cdGluYm94RW50cnkoZHYsIGRhdGEpIHtcblx0XHRjb25zdCBjb2xzID0gW1xuXHRcdFx0XCJ1dWlkXCIsXG5cdFx0XHQvLyBcInR5cGVcIixcblx0XHRcdC8vIFwiYWdlXCIsXG5cdFx0XHQvLyBcInNpemVcIixcblx0XHRcdFwibmFtZVwiLFxuXHRcdFx0Ly8gXCJwcm9qZWN0XCIsXG5cdFx0XHQvLyBcImRvbWFpblwiLFxuXHRcdFx0Ly8gXCJjb21wb25lbnRzXCIsXG5cdFx0XTtcblx0XHRjb25zdCBidWZmID0gW107XG5cdFx0Zm9yIChjb25zdCBkIG9mIGRhdGEpIHtcblx0XHRcdGNvbnN0IGYgPSBkLmZpbGU7XG5cdFx0XHRjb25zdCBmbSA9IGQuZmlsZS5mcm9udG1hdHRlcjtcblx0XHRcdEFzc2VydC5UcnVlKFxuXHRcdFx0XHQhSGVscGVyLm5pbENoZWNrKGZtLnV1aWQpLFxuXHRcdFx0XHRgXCJ1dWlkXCIgaWQgbm90IGRlZmluZWQgZm9yOiAke2YucGF0aH1gLFxuXHRcdFx0KTtcblx0XHRcdEFzc2VydC5UcnVlKFxuXHRcdFx0XHQhSGVscGVyLm5pbENoZWNrKGZtLnR5cGUpLFxuXHRcdFx0XHRgXCJ0eXBlXCIgaWQgbm90IGRlZmluZWQgZm9yOiAke2YucGF0aH1gLFxuXHRcdFx0KTtcblxuXHRcdFx0Y29uc3Qgbm93ID0gbmV3IERhdGUoKTtcblx0XHRcdGNvbnN0IGRlbHRhID0gbm93LmdldFRpbWUoKSAtIGZtLmNyZWF0ZWRBdC5nZXRUaW1lKCk7XG5cdFx0XHRjb25zdCBzaW5jZSA9IEhlbHBlci5tc2VjVG9TdHJpbmdEdXJhdGlvbihkZWx0YSk7XG5cdFx0XHRsZXQgbmFtZSA9IFwiXCI7XG5cblx0XHRcdGlmIChmbS5kb21haW4gIT09IFwiZG9tYWluL3VuZGVmaW5lZFwiKSB7XG5cdFx0XHRcdG5hbWUgPSBmbS5kb21haW47XG5cdFx0XHR9IGVsc2UgaWYgKGZtLnByb2plY3QgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRuYW1lID0gZm0ucHJvamVjdDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG5hbWUgPSBcIlxcXFwtXCI7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHJlY29yZCA9IHtcblx0XHRcdFx0dXVpZDpcblx0XHRcdFx0XHRIZWxwZXIubnVtYmVyVHlwZVRvU3RyaW5nKGZtKSA9PT0gXCJmbGVldGluZ1wiXG5cdFx0XHRcdFx0XHQ/IGAmIzEyODE5NiAke1JlbmRlcmVyLm1ha2VMaW5rQWxpYXMoZHYsIGYpfWBcblx0XHRcdFx0XHRcdDogUmVuZGVyZXIubWFrZUxpbmtBbGlhcyhkdiwgZiksXG5cdFx0XHRcdC8vIHV1aWQ6IGAmIzk3MjggJHtSZW5kZXJlci5tYWtlTGlua0FsaWFzKGR2LCBmKX1gLFxuXHRcdFx0XHR0eXBlOiBIZWxwZXIubnVtYmVyVHlwZVRvU3RyaW5nKGZtKSxcblx0XHRcdFx0c2luY2U6IGAke3NpbmNlfWAsXG5cdFx0XHRcdHNpemU6IGYuc2l6ZSxcblx0XHRcdFx0cHJvamVjdDogZm0ucHJvamVjdCA9PT0gdW5kZWZpbmVkID8gXCJcXFxcLVwiIDogZm0ucHJvamVjdC5zbGljZSg4KSxcblx0XHRcdFx0ZG9tYWluOiBmbS5kb21haW4gPT09IHVuZGVmaW5lZCA/IFwiXFxcXC1cIiA6IGZtLmRvbWFpbi5zbGljZSg3KSwgLy9SZW5kZXJlci5kb21haW5CYXNlKGR2LCBmbS5kb21haW4pLFxuXHRcdFx0XHRuYW1lOiBuYW1lLFxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKHJlY29yZC50eXBlID09PSBcImxvZ1wiKSB7XG5cdFx0XHRcdGNvbnN0IHBhZ2VzID0gZHZcblx0XHRcdFx0XHQucGFnZXMoYFwiJHtQYXRocy5UYXNrc30vJHtmbS5wYXJlbnRfaWR9XCJgKVxuXHRcdFx0XHRcdC5hcnJheSgpO1xuXHRcdFx0XHRpZiAocGFnZXMubGVuZ3RoICE9PSAxKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGAke2ZtLnBhcmVudF9pZH0gJHtmbS5pZH1gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBwYXJlbnQgPSBwYWdlc1swXTtcblx0XHRcdFx0c3dpdGNoIChwYXJlbnQudHlwZSkge1xuXHRcdFx0XHRcdGNhc2UgVHlwZXMuVGFzazpcblx0XHRcdFx0XHRcdHJlY29yZC51dWlkID0gYCYjMTI4MjExICR7cmVjb3JkLnV1aWR9YDtcblx0XHRcdFx0XHRcdHJlY29yZC50eXBlID0gYDxmb250IGNvbG9yPThCMDAwMD50YXNrPC9mb250PmA7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFR5cGVzLlByYXhpczpcblx0XHRcdFx0XHRcdHJlY29yZC51dWlkID0gYCYjMTI4MTg4ICR7cmVjb3JkLnV1aWR9YDtcblx0XHRcdFx0XHRcdHJlY29yZC50eXBlID0gYDxmb250IGNvbG9yPUZGOEMwMD5wcmF4aXM8L2ZvbnQ+YDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgVHlwZXMuTWVkaWE6XG5cdFx0XHRcdFx0XHRyZWNvcmQudXVpZCA9IGAmIzEyODE5MSAke3JlY29yZC51dWlkfWA7XG5cdFx0XHRcdFx0XHRyZWNvcmQudHlwZSA9IGA8Zm9udCBjb2xvcj0wMDAwOEI+bWVkaWE8L2ZvbnQ+YDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgVHlwZXMuUHJvdmlzaW9uOlxuXHRcdFx0XHRcdFx0cmVjb3JkLnR5cGUgPSBgPGZvbnQgY29sb3I9REMxNDNDPnByb3Zpc2lvbjwvZm9udD5gO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGJ1ZmYucHVzaChbXG5cdFx0XHRcdHJlY29yZC51dWlkLFxuXHRcdFx0XHQvLyByZWNvcmQudHlwZSxcblx0XHRcdFx0Ly8gcmVjb3JkLnNpbmNlLFxuXHRcdFx0XHQvLyByZWNvcmQuc2l6ZSxcblx0XHRcdFx0cmVjb3JkLm5hbWUsXG5cdFx0XHRcdC8vIHJlY29yZC5wcm9qZWN0LFxuXHRcdFx0XHQvLyByZWNvcmQuZG9tYWluLFxuXHRcdFx0XSk7XG5cdFx0fVxuXG5cdFx0ZHYudGFibGUoY29scywgYnVmZik7XG5cdH0sXG5cblx0cmVzb3VyY2VCYXNlKGR2LCBkYXRhKSB7XG5cdFx0Y29uc3QgY29scyA9IFtcInV1aWRcIl07XG5cdFx0Y29uc3QgYnVmZiA9IFtdO1xuXHRcdGZvciAoY29uc3QgZCBvZiBkYXRhKSB7XG5cdFx0XHRjb25zdCBmID0gZC5maWxlO1xuXHRcdFx0Y29uc3QgZm0gPSBkLmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0XHRBc3NlcnQuVHJ1ZShcblx0XHRcdFx0IUhlbHBlci5uaWxDaGVjayhmbS51dWlkKSxcblx0XHRcdFx0YFwidXVpZFwiIGlkIG5vdCBkZWZpbmVkIGZvcjogJHtmLnBhdGh9YCxcblx0XHRcdCk7XG5cdFx0XHRidWZmLnB1c2goW1JlbmRlcmVyLm1ha2VMaW5rQWxpYXMoZHYsIGYpXSk7XG5cdFx0fVxuXG5cdFx0ZHYudGFibGUoY29scywgYnVmZik7XG5cdH0sXG5cblx0YmFzaWNSZWxhdGlvbihkdiwgZGF0YSkge1xuXHRcdGNvbnN0IGNvbHMgPSBbXCJ1dWlkXCIsIFwibmFtZVwiXTtcblx0XHRjb25zdCBidWZmID0gW107XG5cdFx0Zm9yIChjb25zdCBkIG9mIGRhdGEpIHtcblx0XHRcdGNvbnN0IGYgPSBkLmZpbGU7XG5cdFx0XHRjb25zdCBmbSA9IGQuZmlsZS5mcm9udG1hdHRlcjtcblx0XHRcdEFzc2VydC5UcnVlKFxuXHRcdFx0XHQhSGVscGVyLm5pbENoZWNrKGZtLnV1aWQpLFxuXHRcdFx0XHRgXCJ1dWlkXCIgaWQgbm90IGRlZmluZWQgZm9yOiAke2YucGF0aH1gLFxuXHRcdFx0KTtcblx0XHRcdGJ1ZmYucHVzaChbUmVuZGVyZXIubWFrZUxpbmtBbGlhcyhkdiwgZiksIGZtLm5hbWVdKTtcblx0XHR9XG5cblx0XHRkdi50YWJsZShjb2xzLCBidWZmKTtcblx0fSxcblxuXHRwcmF4aXNCYXNlKGR2LCBkYXRhKSB7XG5cdFx0Y29uc3QgYnVmZiA9IFtdO1xuXHRcdGNvbnN0IGNvbHMgPSBbXCJ0YXNrc1wiLCBcInV1aWRcIiwgXCJlc3RpbWF0ZVwiXTtcblx0XHRmb3IgKGNvbnN0IGQgb2YgZGF0YSkge1xuXHRcdFx0Y29uc3QgZiA9IGQuZmlsZTtcblx0XHRcdGNvbnN0IGZtID0gZi5mcm9udG1hdHRlcjtcblx0XHRcdGJ1ZmYucHVzaChbXG5cdFx0XHRcdGR2Lm1hcmtkb3duVGFza0xpc3QoZi50YXNrcyksXG5cdFx0XHRcdGR2LmZpbGVMaW5rKGYucGF0aCwgZmFsc2UsIGYubmFtZS5zbGljZSgwLCA4KSksXG5cdFx0XHRcdGZtLnRpbWVfZXN0aW1hdGUsXG5cdFx0XHRdKTtcblx0XHR9XG5cblx0XHRkdi50YWJsZShjb2xzLCBidWZmKTtcblx0fSxcblxuXHR3YWl0aW5nVGFzayhkdiwgZGF0YSkge1xuXHRcdGNvbnN0IGJ1ZmYgPSBbXTtcblx0XHRjb25zdCBjb2xzID0gW1widGFza3NcIiwgXCJ1dWlkXCIsIFwiZXN0aW1hdGVcIiwgXCJjYXVzZVwiXTtcblx0XHRmb3IgKGNvbnN0IGQgb2YgZGF0YSkge1xuXHRcdFx0Y29uc3QgZiA9IGQuZmlsZTtcblx0XHRcdGNvbnN0IGZtID0gZi5mcm9udG1hdHRlcjtcblx0XHRcdGJ1ZmYucHVzaChbXG5cdFx0XHRcdGR2Lm1hcmtkb3duVGFza0xpc3QoZi50YXNrcyksXG5cdFx0XHRcdGR2LmZpbGVMaW5rKGYucGF0aCwgZmFsc2UsIGYubmFtZS5zbGljZSgwLCA4KSksXG5cdFx0XHRcdGZtLnRpbWVfZXN0aW1hdGUsXG5cdFx0XHRcdGZtLmNhdXNlLFxuXHRcdFx0XSk7XG5cdFx0fVxuXG5cdFx0ZHYudGFibGUoY29scywgYnVmZik7XG5cdH0sXG5cblx0cmVhZHlUYXNrKGR2LCBkYXRhKSB7XG5cdFx0Y29uc3QgYnVmZiA9IFtdO1xuXHRcdGNvbnN0IGNvbHMgPSBbXCJ1dWlkXCIsIFwidGFza1wiLCBcImVzdGltYXRlXCIsIFwiYXJlYVwiXTtcblx0XHRmb3IgKGNvbnN0IGQgb2YgZGF0YSkge1xuXHRcdFx0Y29uc3QgZiA9IGQuZmlsZTtcblx0XHRcdGNvbnN0IGZtID0gZi5mcm9udG1hdHRlcjtcblxuXHRcdFx0YnVmZi5wdXNoKFtcblx0XHRcdFx0UmVuZGVyZXIubWFrZUxpbmtBbGlhcyhkdiwgZiwgXCJUYXNrXCIpLFxuXHRcdFx0XHRkdi5tYXJrZG93blRhc2tMaXN0KGYudGFza3MpLFxuXHRcdFx0XHRmbS50aW1lX2VzdGltYXRlLFxuXHRcdFx0XHRIZWxwZXIuZ2V0RmllbGQoSGVscGVyLmdldEFyZWEoZm0sIHRydWUpLCBcIlxcXFwtXCIpLFxuXHRcdFx0XSk7XG5cdFx0fVxuXHRcdGR2LnRhYmxlKGNvbHMsIGJ1ZmYpO1xuXHR9LFxuXG5cdHByb3Zpc2lvbkJhc2UoZHYsIGRhdGEpIHtcblx0XHRjb25zdCBidWZmID0gW107XG5cdFx0Y29uc3QgY29scyA9IFtcInV1aWRcIiwgXCJzdXBwbGllclwiLCBcImNvbnRlbnRcIiwgXCJlc3RpbWF0ZVwiXTtcblx0XHRmb3IgKGNvbnN0IGQgb2YgZGF0YSkge1xuXHRcdFx0Y29uc3QgZiA9IGQuZmlsZTtcblx0XHRcdGNvbnN0IGZtID0gZi5mcm9udG1hdHRlcjtcblx0XHRcdGJ1ZmYucHVzaChbXG5cdFx0XHRcdGR2LmZpbGVMaW5rKGYucGF0aCwgZmFsc2UsIGZtLnV1aWQuc2xpY2UoMCwgOCkpLFxuXHRcdFx0XHRmbS5zdXBwbGllcixcblx0XHRcdFx0ZHYubWFya2Rvd25UYXNrTGlzdChmLnRhc2tzKSxcblx0XHRcdFx0Zm0udGltZV9lc3RpbWF0ZSxcblx0XHRcdF0pO1xuXHRcdH1cblx0XHRkdi50YWJsZShjb2xzLCBidWZmKTtcblx0fSxcblxuXHRiYXNpY1Rhc2tKb3VybmFsTmV4dEFjdGlvbihkdiwgZGF0YSkge1xuXHRcdGNvbnN0IGJ1ZmYgPSBbXTtcblx0XHQvLyBjb25zdCBjb2xzID0gW1wiam91cm5hbFwiLCBcInV1aWRcIiwgXCJ0YXNrc1wiLCBcImVzdGltYXRlXCJdO1xuXHRcdGNvbnN0IGNvbHMgPSBbXCJ1dWlkXCIsIFwicHJpb3JpdHlcIiwgXCJlc3RpbWF0ZVwiLCBcInRhc2tzXCJdO1xuXHRcdC8vIGNvbnN0IGpvdXJuYWwgPSBkdi5wYWdlcyhgXCIke1BhdGhzLkpvdXJuYWx9XCJgKS5hcnJheSgpWzBdLmZpbGVcblx0XHQvLyBcdC5mcm9udG1hdHRlci50YXNrcztcblxuXHRcdGZvciAoY29uc3QgZCBvZiBkYXRhKSB7XG5cdFx0XHRjb25zdCBmID0gZC5maWxlO1xuXHRcdFx0Y29uc3QgZm0gPSBmLmZyb250bWF0dGVyO1xuXHRcdFx0Y29uc3QgZG9tYWluID1cblx0XHRcdFx0SGVscGVyLmdldERvbWFpbihmbSwgdHJ1ZSkgPT09IHVuZGVmaW5lZFxuXHRcdFx0XHRcdD8gXCJcXFxcLVwiXG5cdFx0XHRcdFx0OiBIZWxwZXIuZ2V0RG9tYWluKGZtKTtcblxuXHRcdFx0aWYgKGZtLnJlZl9pZCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKGBuYW1lOiAke2QuZmlsZS5wYXRofWApXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKGB0YXNrczogJHtkLmZpbGUudGFza3MubGVuZ3RofWApXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKGB0YXNrc0I6ICR7Zi50YXNrcy5sZW5ndGh9YClcblx0XHRcdFx0YnVmZi5wdXNoKFtcblx0XHRcdFx0XHQvLyBqb3VybmFsLmNvbnRhaW5zKGZtLnV1aWQpID8gXCItPlwiIDogXCJcXFxcLVwiLFxuXHRcdFx0XHRcdGR2LmZpbGVMaW5rKGYucGF0aCwgZmFsc2UsIGZtLnV1aWQuc2xpY2UoMCwgOCkpLFxuXHRcdFx0XHRcdGZtLnByaW9yaXR5LFxuXHRcdFx0XHRcdGZtLnRpbWVfZXN0aW1hdGUsXG5cdFx0XHRcdFx0ZHYubWFya2Rvd25UYXNrTGlzdChmLnRhc2tzKSxcblx0XHRcdFx0XSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zdCByZWYgPSBkdi5wYWdlcyhgXCIke1BhdGhzLlJlZnN9LyR7Zm0ucmVmX2lkfVwiYCkuYXJyYXkoKTtcblx0XHRcdFx0aWYgKHJlZi5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRgdGFzazogJyR7Zm0udXVpZH0nIGhhcyBhbiB1bmRlZmluZWQgcmVmX2lkOiAnJHtmbS5yZWZfaWR9J2AsXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRidWZmLnB1c2goW1xuXHRcdFx0XHRcdFx0ZHYuZmlsZUxpbmsoZi5wYXRoLCBmYWxzZSwgZm0udXVpZC5zbGljZSgwLCA4KSksXG5cdFx0XHRcdFx0XHRSZW5kZXJlci5tYWtlTGlua0FsaWFzKGR2LCByZWZbMF0uZmlsZSksXG5cdFx0XHRcdFx0XHRmbS50aW1lX2VzdGltYXRlLFxuXHRcdFx0XHRcdFx0ZG9tYWluLFxuXHRcdFx0XHRcdF0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGR2LnRhYmxlKGNvbHMsIGJ1ZmYpO1xuXHR9LFxuXG5cdGJhc2ljVGFza0pvdXJuYWxXYWl0aW5nKGR2LCBkYXRhKSB7XG5cdFx0Y29uc3QgYnVmZiA9IFtdO1xuXHRcdGNvbnN0IGNvbHMgPSBbXCJ1dWlkXCIsIFwiY2F1c2VcIiwgXCJ0YXNrc1wiXTtcblxuXHRcdGZvciAoY29uc3QgZCBvZiBkYXRhKSB7XG5cdFx0XHRjb25zdCBmID0gZC5maWxlO1xuXHRcdFx0Y29uc3QgZm0gPSBmLmZyb250bWF0dGVyO1xuXHRcdFx0Y29uc3QgZG9tYWluID1cblx0XHRcdFx0SGVscGVyLmdldERvbWFpbihmbSwgdHJ1ZSkgPT09IHVuZGVmaW5lZFxuXHRcdFx0XHRcdD8gXCJcXFxcLVwiXG5cdFx0XHRcdFx0OiBIZWxwZXIuZ2V0RG9tYWluKGZtKTtcblxuXHRcdFx0aWYgKGZtLnJlZl9pZCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKGBuYW1lOiAke2QuZmlsZS5wYXRofWApXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKGB0YXNrczogJHtkLmZpbGUudGFza3MubGVuZ3RofWApXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKGB0YXNrc0I6ICR7Zi50YXNrcy5sZW5ndGh9YClcblx0XHRcdFx0YnVmZi5wdXNoKFtcblx0XHRcdFx0XHQvLyBqb3VybmFsLmNvbnRhaW5zKGZtLnV1aWQpID8gXCItPlwiIDogXCJcXFxcLVwiLFxuXHRcdFx0XHRcdGR2LmZpbGVMaW5rKGYucGF0aCwgZmFsc2UsIGZtLnV1aWQuc2xpY2UoMCwgOCkpLFxuXHRcdFx0XHRcdGQuY2F1c2UsXG5cdFx0XHRcdFx0ZHYubWFya2Rvd25UYXNrTGlzdChmLnRhc2tzKSxcblx0XHRcdFx0XSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zdCByZWYgPSBkdi5wYWdlcyhgXCIke1BhdGhzLlJlZnN9LyR7Zm0ucmVmX2lkfVwiYCkuYXJyYXkoKTtcblx0XHRcdFx0aWYgKHJlZi5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRgdGFzazogJyR7Zm0udXVpZH0nIGhhcyBhbiB1bmRlZmluZWQgcmVmX2lkOiAnJHtmbS5yZWZfaWR9J2AsXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRidWZmLnB1c2goW1xuXHRcdFx0XHRcdFx0ZHYuZmlsZUxpbmsoZi5wYXRoLCBmYWxzZSwgZm0udXVpZC5zbGljZSgwLCA4KSksXG5cdFx0XHRcdFx0XHRSZW5kZXJlci5tYWtlTGlua0FsaWFzKGR2LCByZWZbMF0uZmlsZSksXG5cdFx0XHRcdFx0XHRmbS50aW1lX2VzdGltYXRlLFxuXHRcdFx0XHRcdFx0ZG9tYWluLFxuXHRcdFx0XHRcdF0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGR2LnRhYmxlKGNvbHMsIGJ1ZmYpO1xuXHR9LFxuXHRiYXNpY1Rhc2tKb3VybmFsKGR2LCBkYXRhKSB7XG5cdFx0Y29uc3QgYnVmZiA9IFtdO1xuXHRcdC8vIGNvbnN0IGNvbHMgPSBbXCJqb3VybmFsXCIsIFwidXVpZFwiLCBcInRhc2tzXCIsIFwiZXN0aW1hdGVcIl07XG5cdFx0Y29uc3QgY29scyA9IFtcInV1aWRcIiwgXCJ0YXNrc1wiLCBcImVzdGltYXRlXCJdO1xuXHRcdC8vIGNvbnN0IGpvdXJuYWwgPSBkdi5wYWdlcyhgXCIke1BhdGhzLkpvdXJuYWx9XCJgKS5hcnJheSgpWzBdLmZpbGVcblx0XHQvLyBcdC5mcm9udG1hdHRlci50YXNrcztcblxuXHRcdGZvciAoY29uc3QgZCBvZiBkYXRhKSB7XG5cdFx0XHRjb25zdCBmID0gZC5maWxlO1xuXHRcdFx0Y29uc3QgZm0gPSBmLmZyb250bWF0dGVyO1xuXHRcdFx0Y29uc3QgZG9tYWluID1cblx0XHRcdFx0SGVscGVyLmdldERvbWFpbihmbSwgdHJ1ZSkgPT09IHVuZGVmaW5lZFxuXHRcdFx0XHRcdD8gXCJcXFxcLVwiXG5cdFx0XHRcdFx0OiBIZWxwZXIuZ2V0RG9tYWluKGZtKTtcblxuXHRcdFx0aWYgKGZtLnJlZl9pZCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKGBuYW1lOiAke2QuZmlsZS5wYXRofWApXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKGB0YXNrczogJHtkLmZpbGUudGFza3MubGVuZ3RofWApXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKGB0YXNrc0I6ICR7Zi50YXNrcy5sZW5ndGh9YClcblx0XHRcdFx0YnVmZi5wdXNoKFtcblx0XHRcdFx0XHQvLyBqb3VybmFsLmNvbnRhaW5zKGZtLnV1aWQpID8gXCItPlwiIDogXCJcXFxcLVwiLFxuXHRcdFx0XHRcdGR2LmZpbGVMaW5rKGYucGF0aCwgZmFsc2UsIGZtLnV1aWQuc2xpY2UoMCwgOCkpLFxuXHRcdFx0XHRcdGR2Lm1hcmtkb3duVGFza0xpc3QoZi50YXNrcyksXG5cdFx0XHRcdFx0Zm0udGltZV9lc3RpbWF0ZSxcblx0XHRcdFx0XSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zdCByZWYgPSBkdi5wYWdlcyhgXCIke1BhdGhzLlJlZnN9LyR7Zm0ucmVmX2lkfVwiYCkuYXJyYXkoKTtcblx0XHRcdFx0aWYgKHJlZi5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRgdGFzazogJyR7Zm0udXVpZH0nIGhhcyBhbiB1bmRlZmluZWQgcmVmX2lkOiAnJHtmbS5yZWZfaWR9J2AsXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRidWZmLnB1c2goW1xuXHRcdFx0XHRcdFx0ZHYuZmlsZUxpbmsoZi5wYXRoLCBmYWxzZSwgZm0udXVpZC5zbGljZSgwLCA4KSksXG5cdFx0XHRcdFx0XHRSZW5kZXJlci5tYWtlTGlua0FsaWFzKGR2LCByZWZbMF0uZmlsZSksXG5cdFx0XHRcdFx0XHRmbS50aW1lX2VzdGltYXRlLFxuXHRcdFx0XHRcdFx0ZG9tYWluLFxuXHRcdFx0XHRcdF0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGR2LnRhYmxlKGNvbHMsIGJ1ZmYpO1xuXHR9LFxuXHRhY3RpdmVUYXNrKGR2LCBkYXRhKSB7XG5cdFx0Y29uc3QgYnVmZiA9IFtdO1xuXHRcdGNvbnN0IGNvbHMgPSBbXCJ1dWlkXCIsIFwidGFza3NcIiwgXCJzZXNzaW9uXCJdO1xuXHRcdGZvciAoY29uc3QgZCBvZiBkYXRhKSB7XG5cdFx0XHRjb25zdCBmID0gZC5maWxlO1xuXHRcdFx0Y29uc3QgZm0gPSBmLmZyb250bWF0dGVyO1xuXHRcdFx0Y29uc3QgbG9ncyA9IGR2XG5cdFx0XHRcdC5wYWdlcyhgXCIke1BhdGhzLkxvZ3N9LyR7Zm0udXVpZH1cImApXG5cdFx0XHRcdC53aGVyZSgocCkgPT4gcC50eXBlID09PSA2KVxuXHRcdFx0XHQuc29ydCgoaykgPT4gay5jcmVhdGVkX2F0LCBcImRlc2NcIik7XG5cdFx0XHRjb25zdCBsYXN0ID0gbG9nc1swXTtcblx0XHRcdGNvbnN0IGNyZWF0ZWRBdCA9IG5ldyBEYXRlKGxhc3QuY3JlYXRlZF9hdCk7XG5cdFx0XHRjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuXHRcdFx0YnVmZi5wdXNoKFtcblx0XHRcdFx0ZHYuZmlsZUxpbmsoZi5wYXRoLCBmYWxzZSwgZm0udXVpZC5zbGljZSgwLCA4KSksXG5cdFx0XHRcdGR2Lm1hcmtkb3duVGFza0xpc3QoZi50YXNrcyksXG5cdFx0XHRcdCgodCkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBNYXRoLnJvdW5kKCh0IC8gKDM2MDAgKiAxMDAwKSkgKiAxMCkgLyAxMDtcblx0XHRcdFx0fSkobm93LmdldFRpbWUoKSAtIGNyZWF0ZWRBdC5nZXRUaW1lKCkpLFxuXHRcdFx0XSk7XG5cdFx0fVxuXHRcdGR2LnRhYmxlKGNvbHMsIGJ1ZmYpO1xuXHR9LFxuXG5cdGJhc2ljVGFzayhkdiwgZGF0YSkge1xuXHRcdGNvbnN0IGJ1ZmYgPSBbXTtcblx0XHRjb25zdCBjb2xzID0gW1widXVpZFwiLCBcInRhc2tzXCIsIFwiZXN0aW1hdGVcIiwgXCJkb21haW5cIl07XG5cdFx0Zm9yIChjb25zdCBkIG9mIGRhdGEpIHtcblx0XHRcdGNvbnN0IGYgPSBkLmZpbGU7XG5cdFx0XHRjb25zdCBmbSA9IGYuZnJvbnRtYXR0ZXI7XG5cdFx0XHRjb25zdCBkb21haW4gPVxuXHRcdFx0XHRIZWxwZXIuZ2V0RG9tYWluKGZtLCB0cnVlKSA9PT0gdW5kZWZpbmVkXG5cdFx0XHRcdFx0PyBcIlxcXFwtXCJcblx0XHRcdFx0XHQ6IEhlbHBlci5nZXREb21haW4oZm0pO1xuXG5cdFx0XHRpZiAoZm0ucmVmX2lkID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Ly8gY29uc29sZS5sb2coYG5hbWU6ICR7ZC5maWxlLnBhdGh9YClcblx0XHRcdFx0Ly8gY29uc29sZS5sb2coYHRhc2tzOiAke2QuZmlsZS50YXNrcy5sZW5ndGh9YClcblx0XHRcdFx0Ly8gY29uc29sZS5sb2coYHRhc2tzQjogJHtmLnRhc2tzLmxlbmd0aH1gKVxuXHRcdFx0XHRidWZmLnB1c2goW1xuXHRcdFx0XHRcdGR2LmZpbGVMaW5rKGYucGF0aCwgZmFsc2UsIGZtLnV1aWQuc2xpY2UoMCwgOCkpLFxuXHRcdFx0XHRcdGR2Lm1hcmtkb3duVGFza0xpc3QoZi50YXNrcyksXG5cdFx0XHRcdFx0Zm0udGltZV9lc3RpbWF0ZSxcblx0XHRcdFx0XHRkb21haW4sXG5cdFx0XHRcdF0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc3QgcmVmID0gZHYucGFnZXMoYFwiJHtQYXRocy5SZWZzfS8ke2ZtLnJlZl9pZH1cImApLmFycmF5KCk7XG5cdFx0XHRcdGlmIChyZWYubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0YHRhc2s6ICcke2ZtLnV1aWR9JyBoYXMgYW4gdW5kZWZpbmVkIHJlZl9pZDogJyR7Zm0ucmVmX2lkfSdgLFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YnVmZi5wdXNoKFtcblx0XHRcdFx0XHRcdGR2LmZpbGVMaW5rKGYucGF0aCwgZmFsc2UsIGZtLnV1aWQuc2xpY2UoMCwgOCkpLFxuXHRcdFx0XHRcdFx0UmVuZGVyZXIubWFrZUxpbmtBbGlhcyhkdiwgcmVmWzBdLmZpbGUpLFxuXHRcdFx0XHRcdFx0Zm0udGltZV9lc3RpbWF0ZSxcblx0XHRcdFx0XHRcdGRvbWFpbixcblx0XHRcdFx0XHRdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkdi50YWJsZShjb2xzLCBidWZmKTtcblx0fSxcblxuXHRsb2dzKGR2LCBlbnRyaWVzKSB7XG5cdFx0Y29uc3QgYnVmZiA9IFtdO1xuXHRcdGxldCB0b3RhbFRpbWUgPSAwO1xuXG5cdFx0Zm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG5cdFx0XHRjb25zdCBmbWUgPSBlbnRyeS5maWxlLmZyb250bWF0dGVyO1xuXHRcdFx0Y29uc3QgZSA9IFtdO1xuXHRcdFx0bGV0IHN0YXJ0OiBhbnkgPSAwO1xuXHRcdFx0bGV0IHN0b3A6IGFueSA9IDA7XG5cdFx0XHRpZiAoZm1lID09PSB1bmRlZmluZWQgfHwgZm1lLmNyZWF0ZWRfYXQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZnJvbnRtYXR0ZXI6ICR7Zm1lLnV1aWR9YCk7XG5cdFx0XHR9XG5cblx0XHRcdHN0YXJ0ID0gbmV3IERhdGUoZm1lLmNyZWF0ZWRfYXQpO1xuXHRcdFx0ZS5wdXNoKHN0YXJ0LnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApKTtcblx0XHRcdGlmIChmbWUuZG9uZV9hdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHN0b3AgPSBEYXRlLm5vdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c3RvcCA9IG5ldyBEYXRlKGZtZS5kb25lX2F0KTtcblx0XHRcdH1cblx0XHRcdHRvdGFsVGltZSArPSBzdG9wIC0gc3RhcnQ7XG5cdFx0XHRlLnB1c2goXG5cdFx0XHRcdGR2LnNlY3Rpb25MaW5rKFxuXHRcdFx0XHRcdGZtZS51dWlkLFxuXHRcdFx0XHRcdFwiIyMgQ29udGVudFwiLFxuXHRcdFx0XHRcdGZhbHNlLFxuXHRcdFx0XHRcdGZtZS51dWlkLnNsaWNlKDAsIDgpLFxuXHRcdFx0XHQpLFxuXHRcdFx0KTtcblx0XHRcdGUucHVzaChNYXRoLnJvdW5kKCgoc3RvcCAtIHN0YXJ0KSAvICgxMDAwICogNjAgKiA2MCkpICogMTApIC8gMTApO1xuXHRcdFx0aWYgKGZtZS5yZXZpZXdlZCA9PT0gdW5kZWZpbmVkIHx8IGZtZS5yZXZpZXdlZCA9PT0gMCkge1xuXHRcdFx0XHRlLnB1c2goMCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlLnB1c2goZm1lLnJldmlld2VkKTtcblx0XHRcdH1cblx0XHRcdGJ1ZmYucHVzaChlKTtcblx0XHR9XG5cblx0XHRpZiAoYnVmZi5sZW5ndGggPiAwKSB7XG5cdFx0XHRkdi5oZWFkZXIoMiwgXCJMb2dzXCIpO1xuXHRcdFx0ZHYudGFibGUoW1wiY3JlYXRlZF9hdFwiLCBcInV1aWRcIiwgXCJzZXNzaW9uXCIsIFwicmV2aWV3ZWRcIl0sIGJ1ZmYpO1xuXHRcdFx0aWYgKHRvdGFsVGltZSA+IDApIHtcblx0XHRcdFx0ZHYucGFyYWdyYXBoKFxuXHRcdFx0XHRcdGBfdG90YWxUaW1lIChoKTpfICR7TWF0aC5yb3VuZCgodG90YWxUaW1lIC8gKDEwMDAgKiA2MCAqIDYwKSkgKiAxMCkgLyAxMFxuXHRcdFx0XHRcdH1gLFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRtZWRpYVdpdGhMb2dzKGR2LCBkYXRhKSB7XG5cdFx0Y29uc3QgYnVmZiA9IFtdO1xuXHRcdGNvbnN0IGNvbHMgPSBbXCJ1dWlkXCIsIFwidGFza3NcIiwgXCJlc3RpbWF0ZVwiLCBcImN1cnJlbnRcIiwgXCJkb21haW5cIl07XG5cblx0XHRmb3IgKGNvbnN0IGQgb2YgZGF0YSkge1xuXHRcdFx0Y29uc3QgZiA9IGQuZmlsZTtcblx0XHRcdGNvbnN0IGZtID0gZi5mcm9udG1hdHRlcjtcblx0XHRcdGNvbnN0IHJlZiA9IGR2LnBhZ2VzKGBcIiR7UGF0aHMuUmVmc30vJHtmbS5yZWZfaWR9XCJgKS5hcnJheSgpO1xuXHRcdFx0aWYgKHJlZi5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRcdGB0YXNrOiAnJHtmbS51dWlkfScgaGFzIGFuIHVuZGVmaW5lZCByZWZfaWQ6ICcke2ZtLnJlZl9pZH0nYCxcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdGNvbnN0IGRvbWFpbiA9XG5cdFx0XHRcdEhlbHBlci5nZXREb21haW4oZm0sIHRydWUpID09PSB1bmRlZmluZWRcblx0XHRcdFx0XHQ/IFwiXFxcXC1cIlxuXHRcdFx0XHRcdDogSGVscGVyLmdldERvbWFpbihmbSk7XG5cdFx0XHRjb25zdCBsb2dFbnRyaWVzID0gZHZcblx0XHRcdFx0LnBhZ2VzKGBcIiR7UGF0aHMuTG9nc30vJHtmbS51dWlkfVwiYClcblx0XHRcdFx0LndoZXJlKChwKSA9PiBwLnR5cGUgPT09IFR5cGVzLkxvZylcblx0XHRcdFx0LnNvcnQoKGspID0+IGsuY3JlYXRlZF9hdCwgXCJkZXNjXCIpO1xuXHRcdFx0bGV0IHRvdGFsVGltZSA9IDA7XG5cdFx0XHRmb3IgKGNvbnN0IGVudHJ5IG9mIGxvZ0VudHJpZXMpIHtcblx0XHRcdFx0Y29uc3QgZm1lID0gZW50cnkuZmlsZS5mcm9udG1hdHRlcjtcblx0XHRcdFx0Y29uc3QgZSA9IFtdO1xuXHRcdFx0XHRsZXQgc3RhcnQ6IGFueSA9IDA7XG5cdFx0XHRcdGxldCBzdG9wOiBhbnkgPSAwO1xuXHRcdFx0XHRpZiAoZm1lID09PSB1bmRlZmluZWQgfHwgZm1lLmNyZWF0ZWRfYXQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBmcm9udG1hdHRlcjogJHtmbWUudXVpZH1gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXJ0ID0gbmV3IERhdGUoZm1lLmNyZWF0ZWRfYXQpO1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGUucHVzaChzdGFydC50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKSk7XG5cdFx0XHRcdH0gY2F0Y2gge1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoZW50cnkudXVpZCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGZtZS5kb25lX2F0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRzdG9wID0gRGF0ZS5ub3coKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdG9wID0gbmV3IERhdGUoZm1lLmRvbmVfYXQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRvdGFsVGltZSArPSBzdG9wIC0gc3RhcnQ7XG5cdFx0XHR9XG5cblx0XHRcdGJ1ZmYucHVzaChbXG5cdFx0XHRcdGR2LmZpbGVMaW5rKGYucGF0aCwgZmFsc2UsIGZtLnV1aWQuc2xpY2UoMCwgOCkpLFxuXHRcdFx0XHRSZW5kZXJlci5tYWtlTGlua0FsaWFzKGR2LCByZWZbMF0uZmlsZSksXG5cdFx0XHRcdGZtLnRpbWVfZXN0aW1hdGUsXG5cdFx0XHRcdGAke01hdGgucm91bmQoKHRvdGFsVGltZSAvICgxMDAwICogNjAgKiA2MCkpICogMTApIC8gMTB9aGAsXG5cdFx0XHRcdGRvbWFpbixcblx0XHRcdF0pO1xuXHRcdH1cblxuXHRcdGR2LnRhYmxlKGNvbHMsIGJ1ZmYpO1xuXHR9LFxuXG5cdHRhc2tEb25lV2l0aExvZ3MoZHYsIGRhdGEpIHtcblx0XHRjb25zdCBidWZmID0gW107XG5cdFx0Y29uc3QgY29scyA9IFtcblx0XHRcdFwidGFza0lkXCIsXG5cdFx0XHRcImxvZ0lkXCIsXG5cdFx0XHRcImNyZWF0ZWRBdFwiLFxuXHRcdFx0XCJkb25lQXRcIixcblx0XHRcdFwidGltZUVzdGltYXRlXCIsXG5cdFx0XHRcInRvb2tcIixcblx0XHRcdFwicHJvamVjdFwiLFxuXHRcdF07XG5cdFx0Zm9yIChjb25zdCBkIG9mIGRhdGEpIHtcblx0XHRcdGNvbnN0IGYgPSBkLmZpbGU7XG5cdFx0XHRjb25zdCBmbSA9IGQuZmlsZS5mcm9udG1hdHRlcjtcblx0XHRcdGNvbnN0IGNyZWF0ZWRBdDogYW55ID0gbmV3IERhdGUoZm0uY3JlYXRlZF9hdCk7XG5cdFx0XHRjb25zdCBkb25lQXQ6IGFueSA9IG5ldyBEYXRlKGZtLmRvbmVfYXQpO1xuXHRcdFx0Y29uc3QgdGltZUVzdGltYXRlID0gXCJcIjtcblx0XHRcdGNvbnN0IHRvb2sgPSAoZG9uZUF0IC0gY3JlYXRlZEF0KSAvICgxMDAwICogMzYwMCk7XG5cdFx0XHRjb25zdCBwYWdlcyA9IGR2XG5cdFx0XHRcdC5wYWdlcyhgXCIke1BhdGhzLlRhc2tzfVwiYClcblx0XHRcdFx0LndoZXJlKChwYWdlKSA9PiBwYWdlLmZpbGUuZnJvbnRtYXR0ZXIudXVpZCA9PT0gZm0ucGFyZW50X2lkKTtcblx0XHRcdGlmIChwYWdlcy5sZW5ndGggIT09IDEpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCk7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBwYXJlbnQgPSBwYWdlc1swXTtcblx0XHRcdGNvbnN0IHBhcmVudEZtID0gcGFyZW50LmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0XHRjb25zdCBwYXJlbnRGID0gcGFyZW50LmZpbGU7XG5cdFx0XHRidWZmLnB1c2goW1xuXHRcdFx0XHRSZW5kZXJlci5tYWtlTGlua1Nob3J0VVVJRChkdiwgcGFyZW50LmZpbGUsIFwiVGFza1wiKSxcblx0XHRcdFx0UmVuZGVyZXIubWFrZUxpbmtTaG9ydFVVSUQoZHYsIGYpLFxuXHRcdFx0XHRjcmVhdGVkQXQudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCksXG5cdFx0XHRcdGRvbmVBdC50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKSxcblx0XHRcdFx0dGltZUVzdGltYXRlLFxuXHRcdFx0XHQoKHQpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCh0ICogMTApIC8gMTA7XG5cdFx0XHRcdH0pKHRvb2spLFxuXHRcdFx0XHRIZWxwZXIuZ2V0UHJvamVjdChwYXJlbnRGbSksXG5cdFx0XHRdKTtcblx0XHR9XG5cblx0XHRkdi50YWJsZShjb2xzLCBidWZmKTtcblx0fSxcblxuXHRwcm9qZWN0cyhkdiwgcGFnZXMpIHtcblx0XHRjb25zdCBjb2xzID0gW1wibmFtZVwiXTtcblx0XHRjb25zdCBidWZmID0gW107XG5cblx0XHRmb3IgKGNvbnN0IHBhZ2Ugb2YgcGFnZXMpIHtcblx0XHRcdGNvbnN0IGZtID0gbmV3IEZyb250bWF0dGVySlMocGFnZSk7XG5cdFx0XHRidWZmLnB1c2goW1JlbmRlcmVyLm1ha2VMaW5rKGR2LCBwYWdlLmZpbGUsIGZtLmdldE5hbWUoKSldKTtcblx0XHR9XG5cblx0XHRkdi50YWJsZShjb2xzLCBidWZmKTtcblx0fSxcblxuXHRiYXNpY0RvbmVUYXNrV2l0aExvZ3MoZHYsIGRhdGEpIHtcblx0XHRjb25zdCBjb2xzID0gW1xuXHRcdFx0XCJ1dWlkXCIsXG5cdFx0XHRcImNyZWF0ZWRBdFwiLFxuXHRcdFx0XCJkb25lQXRcIixcblx0XHRcdFwidGltZUVzdGltYXRlXCIsXG5cdFx0XHRcInRvb2tcIixcblx0XHRcdFwiZGVsdGFcIixcblx0XHRcdFwicHJvamVjdFwiLFxuXHRcdFx0XCJhcmVhXCIsXG5cdFx0XTtcblx0XHRkdi50YWJsZShjb2xzLCBkYXRhKTtcblx0fSxcblxuXHRiYXNpY0RvbmVUYXNrV2l0aG91dExvZ3MoZHYsIGRhdGEpIHtcblx0XHRjb25zdCBjb2xzID0gW1widGFza0lkXCIsIFwiY3JlYXRlZEF0XCIsIFwicHJvamVjdFwiLCBcImFyZWFcIl07XG5cdFx0ZHYudGFibGUoY29scywgZGF0YSk7XG5cdH0sXG5cblx0YmFzaWNQcm9ncmVzc2VkVGFza1dpdGhMb2coZHYsIGRhdGEpIHtcblx0XHRjb25zdCBjb2xzID0gW1xuXHRcdFx0XCJ0YXNrSWRcIixcblx0XHRcdFwibG9nSWRcIixcblx0XHRcdC8vIFwiY3JlYXRlZEF0XCIsXG5cdFx0XHQvLyBcImRvbmVBdFwiLFxuXHRcdFx0XCJ0b29rXCIsXG5cdFx0XHQvLyBcInRvb2tBY2NcIixcblx0XHRcdFwicHJvamVjdFwiLFxuXHRcdFx0Ly8gXCJkb21haW5cIixcblx0XHRdO1xuXHRcdGR2LnRhYmxlKGNvbHMsIGRhdGEpO1xuXHR9LFxuXG5cdC8vIGRhaWx5VGFzayhkdiwgZGF0YSkge1xuXHQvLyBcdFJlbmRlcmVyLm1ha2VMaW5rU2hvcnRVVUlEKHRoaXMuZHYsIHBhZ2UuZmlsZSksXG5cdC8vIFx0ZHYuXG5cdC8vIFx0XHRcdFx0cnMucHVzaChbXG5cdC8vIFx0XHRcdFx0XHRcInBhcmFncmFwaFwiLFxuXHQvLyBcdFx0XHRcdFx0UmVuZGVyZXIubWFrZUxpbmtTaG9ydFVVSUQodGhpcy5kdiwgcGFnZS5maWxlKSxcblx0Ly8gXHRcdFx0XHRdKTtcblx0Ly8gfVxuXG5cdGRvKGR2LCBycykge1xuXHRcdGZvciAoY29uc3Qgcm93IG9mIHJzKSB7XG5cdFx0XHRzd2l0Y2ggKHJvd1swXSkge1xuXHRcdFx0XHRjYXNlIFwiaGVhZGVyXCI6XG5cdFx0XHRcdFx0Y29uc3QgWywgbGV2ZWwsIGhlYWRpbmddID0gcm93O1xuXHRcdFx0XHRcdGR2LmhlYWRlcihsZXZlbCwgaGVhZGluZyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJwYXJhZ3JhcGhcIjpcblx0XHRcdFx0XHRjb25zdCBbLCB0ZXh0XSA9IHJvdztcblx0XHRcdFx0XHRkdi5wYXJhZ3JhcGgodGV4dCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJhcnJheVwiOlxuXHRcdFx0XHRcdGNvbnN0IFssIHJlbmRlcmVyLCBkYXRhXSA9IHJvdztcblx0XHRcdFx0XHRyZW5kZXJlcihkdiwgZGF0YSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJzdGF0c1wiOlxuXHRcdFx0XHRcdGNvbnN0IFssIG5hbWUsIHVuaXQsIHZhbHVlXSA9IHJvdztcblx0XHRcdFx0XHRkdi5wYXJhZ3JhcGgoYCR7bmFtZX0gKCR7dW5pdH0pOiAke3ZhbHVlfWApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5zdXBvcnRlZCBvcGNvZGU6IFwiZnVja29mZlwiYCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxufTtcblxuZXhwb3J0IGNsYXNzIEZyb250bWF0dGVyIHtcblx0Z29uZXh0OiBhbnk7XG5cblx0Y29uc3RydWN0b3IoZ29uZXh0KSB7XG5cdFx0dGhpcy5nb25leHQgPSBnb25leHQ7XG5cdH1cblxuXHRwcm9qZWN0UGFyc2VNZXRhKGR2KSB7XG5cdFx0Ly8gZmF1dGUgZGUgbWlldXggcG91ciBsZSBtb21lbnRcblx0XHRjb25zdCBjdXJyZW50ID0gZHYuY3VycmVudCgpO1xuXHRcdGNvbnN0IHByb2plY3ROYW1lID0gY3VycmVudC5maWxlLmZvbGRlci5zbGljZShcblx0XHRcdFBhdGhzLlByb2plY3RzLmxlbmd0aCArIDEsXG5cdFx0KTtcblx0XHRjb25zdCBwcm9qZWN0RGlyID0gY3VycmVudC5maWxlLmZvbGRlcjtcblx0XHRpZiAocHJvamVjdE5hbWUuY29udGFpbnMoXCIvXCIpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRcdGBwcm9qZWN0RGlyOiAke3Byb2plY3REaXJ9IGZvbGRlcjogJHtjdXJyZW50LmZpbGUuZm9sZGVyfWAsXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdGNvbnN0IHBhZ2VzID0gZHYucGFnZXMoYFwiJHtwcm9qZWN0RGlyfS9tZXRhXCJgKS5hcnJheSgpO1xuXHRcdGlmIChwYWdlcy5sZW5ndGggIT09IDEpIHtcblx0XHRcdC8vIGNvbnNvbGUubG9nKHBhZ2VzKTtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgbGVuOiAke3BhZ2VzLmxlbmd0aH1gKTtcblx0XHR9XG5cblx0XHRjb25zdCBmbSA9IHBhZ2VzWzBdLmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0Y29uc3QgdXVpZCA9IGZtLnV1aWQ7XG5cdFx0aWYgKEhlbHBlci5uaWxDaGVjayh1dWlkKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBwcm9qZWN0ICd1dWlkJyBpcyBub3QgZGVmaW5lZGApO1xuXHRcdH1cblxuXHRcdGNvbnN0IG5hbWUgPSBmbS5uYW1lO1xuXHRcdGlmIChIZWxwZXIubmlsQ2hlY2sobmFtZSkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgJ25hbWUnIGlzIG5vdCBkZWZpbmVkYCk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgZG9tYWlucyA9IGZtLmRvbWFpbnM7XG5cdFx0aWYgKCFBcnJheS5pc0FycmF5KGRvbWFpbnMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYCdkb21haW5zJyBtdXN0IGJlIG9mIGFycmF5IHR5cGVgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dXVpZDogdXVpZCxcblx0XHRcdG5hbWU6IG5hbWUsXG5cdFx0XHRkb21haW5zOiBkb21haW5zLFxuXHRcdH07XG5cdH1cblxuXHRnZXRDcmVhdGVkQXQoZik6IERhdGUge1xuXHRcdHJldHVybiBIZWxwZXIubmlsQ2hlY2soZi5mcm9udG1hdHRlci5jcmVhdGVkX2F0KVxuXHRcdFx0PyBuZXcgRGF0ZShmLmN0aW1lLnRzKVxuXHRcdFx0OiBuZXcgRGF0ZShmLmZyb250bWF0dGVyLmNyZWF0ZWRfYXQpO1xuXHR9XG5cblx0Z2V0Q3VycmVudEZyb250bWF0dGVyKCkge1xuXHRcdGNvbnN0IGZpbGUgPSB0aGlzLmdvbmV4dC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuXHRcdGNvbnN0IGZpbGVDb250ZW50ID0gdGhpcy5nb25leHQubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XG5cdFx0aWYgKGZpbGVDb250ZW50ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdC8vIGNvbnNvbGUud2FybihcIidmaWxlQ29udGVudCcgaXMgdW5kZWZpbmVkXCIpO1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRjb25zdCBmbSA9IGZpbGVDb250ZW50LmZyb250bWF0dGVyO1xuXHRcdGlmIChmbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHQvLyBjb25zb2xlLndhcm4oXCInZm0nIGlzIHVuZGVmaW5lZFwiKTtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZtO1xuXHR9XG5cblx0cGFyc2VMaXN0QnlOYW1lc3BhY2UoZm0pIHtcblx0XHRjb25zdCBieUFyZWFzID0gZm0uYnlfYXJlYXMgPT09IHVuZGVmaW5lZCA/IFtdIDogZm0uYnlfYXJlYXM7XG5cdFx0Y29uc3QgYnlDb250ZXh0cyA9IGZtLmJ5X2NvbnRleHRzID09PSB1bmRlZmluZWQgPyBbXSA6IGZtLmJ5X2NvbnRleHRzO1xuXHRcdGNvbnN0IGJ5TGF5ZXJzID0gZm0uYnlfbGF5ZXJzID09PSB1bmRlZmluZWQgPyBbXSA6IGZtLmJ5X2xheWVycztcblx0XHRjb25zdCBieU9yZ3MgPSBmbS5ieV9vcmdzID09PSB1bmRlZmluZWQgPyBbXSA6IGZtLmJ5X29yZ3M7XG5cdFx0Y29uc3QgYnlQcm9qZWN0cyA9IGZtLmJ5X3Byb2plY3RzID09PSB1bmRlZmluZWQgPyBbXSA6IGZtLmJ5X3Byb2plY3RzO1xuXG5cdFx0cmV0dXJuIFtieUFyZWFzLCBieUNvbnRleHRzLCBieUxheWVycywgYnlPcmdzLCBieVByb2plY3RzXTtcblx0fVxuXG5cdHBhcnNlTGlzdEJlZm9yZUFmdGVyKGZtKSB7XG5cdFx0Y29uc3QgYmVmb3JlID0gSGVscGVyLmdldERhdGUoZm0uYmVmb3JlKTtcblx0XHRjb25zdCBhZnRlciA9IEhlbHBlci5nZXREYXRlKGZtLmFmdGVyKTtcblx0XHRyZXR1cm4gW2JlZm9yZSwgYWZ0ZXJdO1xuXHR9XG5cblx0cGFyc2VMaXN0RmlsdGVyQnkoZm0pIHtcblx0XHRpZiAoZm0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH1cblxuXHRcdGNvbnN0IGZpbHRlckJ5ID0gZm0uZmlsdGVyX2J5O1xuXHRcdGlmICghQXJyYXkuaXNBcnJheShmaWx0ZXJCeSkpIHtcblx0XHRcdHJldHVybiBbXTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmlsdGVyQnk7XG5cdH1cblxuXHRwYXJzZUxpc3RHcm91cEJ5KGZtKSB7XG5cdFx0aWYgKGZtID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiBcIlwiO1xuXHRcdH1cblxuXHRcdGNvbnN0IGdyb3VwQnkgPSBmbS5ncm91cF9ieTtcblx0XHRpZiAoXG5cdFx0XHQhKHR5cGVvZiBncm91cEJ5ID09PSBcInVuZGVmaW5lZFwiKSAmJlxuXHRcdFx0ISh0eXBlb2YgZ3JvdXBCeSA9PT0gXCJzdHJpbmdcIilcblx0XHQpIHtcblx0XHRcdHJldHVybiBcIlwiO1xuXHRcdH1cblxuXHRcdHJldHVybiBncm91cEJ5O1xuXHR9XG5cblx0cGFyc2VBbGxQcm9ncmVzc2VkVGFza3MoKSB7XG5cdFx0Y29uc3QgZm0gPSB0aGlzLmdldEN1cnJlbnRGcm9udG1hdHRlcigpO1xuXHRcdGlmIChmbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZnJvbnRtYXR0ZXIsIGNhbm5vdCBwcm9jZWVkYCk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgZ3JvdXBCeSA9IHRoaXMucGFyc2VMaXN0R3JvdXBCeShmbSk7XG5cdFx0Y29uc3QgZmlsdGVyQnkgPSB0aGlzLnBhcnNlTGlzdEZpbHRlckJ5KGZtKTtcblx0XHRjb25zdCBbYmVmb3JlLCBhZnRlcl0gPSB0aGlzLnBhcnNlTGlzdEJlZm9yZUFmdGVyKGZtKTtcblxuXHRcdHJldHVybiBbZ3JvdXBCeSwgZmlsdGVyQnksIGJlZm9yZSwgYWZ0ZXJdO1xuXHR9XG5cblx0cGFyc2VBbGxEb25lVGFza3MoKSB7XG5cdFx0cmV0dXJuIHRoaXMucGFyc2VBbGxQcm9ncmVzc2VkVGFza3MoKTtcblx0fVxuXG5cdHBhcnNlQWxsRG9uZVRhc2tXaXRob3V0TG9nKCkge1xuXHRcdHJldHVybiB0aGlzLnBhcnNlQWxsUHJvZ3Jlc3NlZFRhc2tzKCk7XG5cdH1cblxuXHRwYXJzZUFsbFRvZG9BZEhvYygpIHtcblx0XHRjb25zdCBmbSA9IHRoaXMuZ2V0Q3VycmVudEZyb250bWF0dGVyKCk7XG5cdFx0aWYgKGZtID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBmcm9udG1hdHRlciwgY2Fubm90IHByb2NlZWRgKTtcblx0XHR9XG5cblx0XHRjb25zdCBncm91cEJ5ID0gdGhpcy5wYXJzZUxpc3RHcm91cEJ5KGZtKTtcblx0XHRjb25zdCBmaWx0ZXJCeSA9IHRoaXMucGFyc2VMaXN0RmlsdGVyQnkoZm0pO1xuXHRcdGNvbnN0IFtiZWZvcmUsIGFmdGVyXSA9IHRoaXMucGFyc2VMaXN0QmVmb3JlQWZ0ZXIoZm0pO1xuXHRcdGNvbnN0IG1pblByaW9yaXR5ID0gSGVscGVyLmdldEZpZWxkKGZtLm1pbl9wcmlvcml0eSwgMCk7XG5cblx0XHRyZXR1cm4gW2dyb3VwQnksIGZpbHRlckJ5LCBiZWZvcmUsIGFmdGVyLCBtaW5Qcmlvcml0eV07XG5cdH1cblxuXHRwYXJzZUluYm94KCkge1xuXHRcdGNvbnN0IGZtID0gdGhpcy5nZXRDdXJyZW50RnJvbnRtYXR0ZXIoKTtcblx0XHRpZiAoZm0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIFtbXSwgW10sIDAsIDB4ZmZmZmZmZmZdO1xuXHRcdH1cblxuXHRcdGNvbnN0IHNvdXJjZSA9IEhlbHBlci5uaWxDaGVjayhmbS5zb3VyY2UpXG5cdFx0XHQ/IFtcImxvZ3NcIiwgXCJmbGVldGluZ1wiXVxuXHRcdFx0OiBmbS5zb3VyY2U7XG5cdFx0Y29uc3QgZ3JvdXBCeSA9IEhlbHBlci5uaWxDaGVjayhmbS5ncm91cF9ieSkgPyBcIm5vbmVcIiA6IGZtLmdyb3VwX2J5O1xuXHRcdGNvbnN0IGZpbHRlckJ5ID0gdGhpcy5wYXJzZUxpc3RGaWx0ZXJCeShmbSk7XG5cdFx0Y29uc3QgbWluU2l6ZSA9IEhlbHBlci5uaWxDaGVjayhmbS5taW5fc2l6ZSkgPyAwIDogZm0ubWluX3NpemU7XG5cdFx0Y29uc3QgbWF4U2l6ZSA9IEhlbHBlci5uaWxDaGVjayhmbS5tYXhfc2l6ZSkgPyAweGZmZmZmZmZmIDogZm0ubWF4X3NpemU7XG5cblx0XHRyZXR1cm4gW3NvdXJjZSwgZ3JvdXBCeSwgZmlsdGVyQnksIG1pblNpemUsIG1heFNpemVdO1xuXHR9XG5cblx0cGFyc2VUb2RvTGlzdCgpIHtcblx0XHRjb25zdCBmbSA9IHRoaXMuZ2V0Q3VycmVudEZyb250bWF0dGVyKCk7XG5cdFx0aWYgKGZtID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiBbW10sIFtdLCBbXSwgW10sIFtdLCAwXTtcblx0XHR9XG5cblx0XHRjb25zdCBbYnlBcmVhcywgYnlDb250ZXh0cywgYnlMYXllcnMsIGJ5T3JncywgYnlQcm9qZWN0c10gPVxuXHRcdFx0dGhpcy5wYXJzZUxpc3RCeU5hbWVzcGFjZShmbSk7XG5cdFx0Y29uc3QgbWluUHJpb3JpdHkgPSBIZWxwZXIuZ2V0RmllbGQoZm0ubWluX3ByaW9yaXR5LCAwKTtcblxuXHRcdHJldHVybiBbYnlBcmVhcywgYnlDb250ZXh0cywgYnlMYXllcnMsIGJ5T3JncywgYnlQcm9qZWN0cywgbWluUHJpb3JpdHldO1xuXHR9XG5cblx0cGFyc2VEb25lTGlzdCgpIHtcblx0XHRjb25zdCBmbSA9IHRoaXMuZ2V0Q3VycmVudEZyb250bWF0dGVyKCk7XG5cdFx0aWYgKGZtID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiBbW10sIFtdLCBbXSwgW10sIFtdLCBbXSwgW11dO1xuXHRcdH1cblxuXHRcdGNvbnN0IFtieUFyZWFzLCBieUNvbnRleHRzLCBieUxheWVycywgYnlPcmdzLCBieVByb2plY3RzXSA9XG5cdFx0XHR0aGlzLnBhcnNlTGlzdEJ5TmFtZXNwYWNlKGZtKTtcblx0XHRjb25zdCBbYmVmb3JlLCBhZnRlcl0gPSB0aGlzLnBhcnNlTGlzdEJlZm9yZUFmdGVyKGZtKTtcblx0XHRjb25zdCBmaWVsZHMgPSBIZWxwZXIuZ2V0RmllbGQoZm0uZmllbGRzLCBbXSk7XG5cdFx0Y29uc3Qgc3RhdHMgPSBIZWxwZXIuZ2V0RmllbGQoZm0uc3RhdHMsIFtdKTtcblxuXHRcdHJldHVybiBbXG5cdFx0XHRieUFyZWFzLFxuXHRcdFx0YnlDb250ZXh0cyxcblx0XHRcdGJ5TGF5ZXJzLFxuXHRcdFx0YnlPcmdzLFxuXHRcdFx0YnlQcm9qZWN0cyxcblx0XHRcdGZpZWxkcyxcblx0XHRcdHN0YXRzLFxuXHRcdFx0YmVmb3JlLFxuXHRcdFx0YWZ0ZXIsXG5cdFx0XTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgTm90ZUhlbHBlciB7XG5cdGR2OiBhbnk7XG5cdGdvbmV4dDogYW55O1xuXHRmcm9udG1hdHRlcjogRnJvbnRtYXR0ZXI7XG5cblx0Y29uc3RydWN0b3IoZ29uZXh0LCBkdiwgZnJvbnRtYXR0ZXIpIHtcblx0XHR0aGlzLmdvbmV4dCA9IGdvbmV4dDtcblx0XHR0aGlzLmR2ID0gZHY7XG5cdFx0dGhpcy5mcm9udG1hdHRlciA9IGZyb250bWF0dGVyO1xuXHR9XG5cblx0aXNEb2FibGUodGFzaywgYXQgPSB1bmRlZmluZWQpIHtcblx0XHRjb25zdCBmbSA9IHRhc2suZmlsZS5mcm9udG1hdHRlcjtcblx0XHRpZiAoZm0uc3RhdHVzICE9PSBTdGF0dXMuVG9kbykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmIChmbS5hZnRlciAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRjb25zdCBhZnRlciA9IG5ldyBEYXRlKGZtLmFmdGVyKTtcblx0XHRcdGlmIChEYXRlLm5vdygpIDw9IGFmdGVyLmdldFRpbWUoKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGF0ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnN0IGZtQXQgPSBuZXcgRGF0ZShmbS5hdCk7XG5cdFx0XHRmbUF0LnNldEhvdXJzKDApO1xuXHRcdFx0Zm1BdC5zZXRNaW51dGVzKDApO1xuXHRcdFx0Zm1BdC5zZXRTZWNvbmRzKDApO1xuXG5cdFx0XHQvLyBpZiAoZm0udXVpZCA9PT0gXCIyYTk3ZGUzNS1jYTg3LTQyNjctOTE1OS02YzA5NmQ0MTYzZjFcIikge1xuXHRcdFx0Ly8gXHRjb25zb2xlLmxvZyhgdXVpZDogJHtmbS51dWlkfWApO1xuXHRcdFx0Ly8gXHRjb25zb2xlLmxvZyhgYXQ6ICR7YXQuZ2V0VGltZSgpfWApO1xuXHRcdFx0Ly8gXHRjb25zb2xlLmxvZyhgZm1BdDogJHtmbUF0LmdldFRpbWUoKX1gKTtcblx0XHRcdC8vIFx0Y29uc29sZS5sb2coYGlmOiAke2F0LmdldFRpbWUoKSA8IGZtQXQuZ2V0VGltZSgpfWApO1xuXHRcdFx0Ly8gfVxuXG5cdFx0XHRpZiAoYXQuZ2V0VGltZSgpIDwgZm1BdC5nZXRUaW1lKCkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoZm0uYXQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRjb25zdCBhdCA9IG5ldyBEYXRlKGZtLmF0KTtcblx0XHRcdFx0aWYgKERhdGUubm93KCkgPD0gYXQuZ2V0VGltZSgpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y29uc3QgZGVwcyA9IGZtLm5lZWRzO1xuXHRcdGlmIChkZXBzID09PSB1bmRlZmluZWQgfHwgZGVwcy5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmhhc1BlbmRpbmdEZXBlbmRlbmNpZXMoZGVwcykpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGhhc1BlbmRpbmdEZXBlbmRlbmNpZXMoZGVwcykge1xuXHRcdGZvciAoY29uc3QgZGVwIG9mIGRlcHMpIHtcblx0XHRcdGNvbnN0IHRhc2sgPSB0aGlzLmR2LnBhZ2VzKGBcIiR7UGF0aHMuVGFza3N9LyR7ZGVwfVwiYCkuYXJyYXkoKTtcblx0XHRcdGlmICh0YXNrLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdFx0YGhhc1BlbmRpbmdEZXBlbmRlbmNpZXM6IFwiJHtQYXRocy5UYXNrc30vJHtkZXB9XCIgdGFzayBkb2VzIG5vdCBleGlzdHNgLFxuXHRcdFx0XHQpO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgZm0gPSB0YXNrWzBdLmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdGZtLnR5cGUgIT09IFR5cGVzLlRhc2sgJiZcblx0XHRcdFx0Zm0udHlwZSAhPT0gVHlwZXMuUHJvdmlzaW9uICYmXG5cdFx0XHRcdGZtLnR5cGUgIT09IFR5cGVzLlByYXhpc1xuXHRcdFx0KSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZm0uc3RhdHVzID09PSBTdGF0dXMuVG9kbykge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpc0NoaWxkVGFnKHBhcmVudCwgY2hpbGQpIHtcblx0XHRpZiAoY2hpbGQubGVuZ3RoIDw9IHBhcmVudC5sZW5ndGggKyAxKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSBlbHNlIGlmIChjaGlsZC5zbGljZSgwLCBwYXJlbnQubGVuZ3RoICsgMSkgIT0gYCR7cGFyZW50fS9gKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Z2V0TmFtZXNwYWNlQ29udGVudChuczogc3RyaW5nKSB7XG5cdFx0Y29uc3QgY2hpbGRyZW4gPSBbXTtcblx0XHRjb25zdCBwYWdlcyA9IHRoaXMuZHYucGFnZXMoYCMke25zfWApO1xuXHRcdGZvciAoY29uc3QgcCBvZiBwYWdlcykge1xuXHRcdFx0Y29uc3QgdGFncyA9IHAuZmlsZS5mcm9udG1hdHRlci50YWdzO1xuXG5cdFx0XHRpZiAodGFncyA9PT0gdW5kZWZpbmVkIHx8IHRhZ3MubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKGNvbnN0IHRhZyBvZiB0YWdzKSB7XG5cdFx0XHRcdGlmICh0aGlzLmlzQ2hpbGRUYWcobnMsIHRhZykpIHtcblx0XHRcdFx0XHRjb25zdCB0ID0gdGFnLnNsaWNlKG5zLmxlbmd0aCArIDEpO1xuXHRcdFx0XHRcdGlmICghY2hpbGRyZW4uY29udGFpbnModCkpIHtcblx0XHRcdFx0XHRcdGNoaWxkcmVuLnB1c2godCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNoaWxkcmVuO1xuXHR9XG5cblx0aXNMYXN0UmV2aXNpb24ocGFnZSk6IGJvb2xlYW4ge1xuXHRcdGNvbnN0IHJldmlzaW9uTGlzdCA9IChkdiwgcm9vdDogc3RyaW5nLCBjdXJyZW50KSA9PiB7XG5cdFx0XHRsZXQgaGVhZCA9IGN1cnJlbnQ7XG5cdFx0XHR3aGlsZSAodHJ1ZSkge1xuXHRcdFx0XHRjb25zdCBwYWdlcyA9IGR2XG5cdFx0XHRcdFx0LnBhZ2VzKGBcIiR7cm9vdH1cImApXG5cdFx0XHRcdFx0LndoZXJlKFxuXHRcdFx0XHRcdFx0KHBhZ2UpID0+XG5cdFx0XHRcdFx0XHRcdHBhZ2UuZmlsZS5mcm9udG1hdHRlci5uZXh0ID09PVxuXHRcdFx0XHRcdFx0XHRoZWFkLmZpbGUuZnJvbnRtYXR0ZXIudXVpZCxcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRpZiAocGFnZXMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcigpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHBhZ2VzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGhlYWQgPSBwYWdlc1swXTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgYnVmZiA9IFtdO1xuXHRcdFx0bGV0IGN1ciA9IGhlYWQ7XG5cdFx0XHR3aGlsZSAodHJ1ZSkge1xuXHRcdFx0XHRidWZmLnB1c2goY3VyKTtcblx0XHRcdFx0Y29uc3QgZm0gPSBjdXIuZmlsZS5mcm9udG1hdHRlcjtcblx0XHRcdFx0aWYgKGZtLm5leHQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnN0IHBhZ2VzID0gZHYucGFnZXMoYFwiJHtyb290fS8ke2ZtLm5leHR9XCJgKTtcblx0XHRcdFx0aWYgKHBhZ2VzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGN1ciA9IHBhZ2VzWzBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYnVmZjtcblx0XHR9O1xuXG5cdFx0Y29uc3Qgbm90ZSA9IHBhZ2U7XG5cdFx0Y29uc3QgZm0gPSBub3RlLmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0bGV0IHJldmlzaW9ucyA9IFtdO1xuXHRcdHN3aXRjaCAoZm0udHlwZSkge1xuXHRcdFx0Y2FzZSBUeXBlcy5QZXJtYW5lbnQ6XG5cdFx0XHRcdHJldmlzaW9ucyA9IHJldmlzaW9uTGlzdCh0aGlzLmR2LCBQYXRocy5TbGlwYm94LCBub3RlKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFR5cGVzLlJlc291cmNlOlxuXHRcdFx0XHRyZXZpc2lvbnMgPSByZXZpc2lvbkxpc3QodGhpcy5kdiwgUGF0aHMuUmVzb3VyY2VzLCBub3RlKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoKTtcblx0XHR9XG5cblx0XHRpZiAocmV2aXNpb25zLmxlbmd0aCA8PSAxKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmV2aXNpb25zWzBdLmZpbGUuZnJvbnRtYXR0ZXIudXVpZCA9PT0gZm0udXVpZDtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgR2VuZXJhdG9yIHtcblx0YXBwOiBhbnk7XG5cdGR2OiBhbnk7XG5cdGdvbmV4dDogYW55O1xuXG5cdGNvbnN0cnVjdG9yKGFwcCkge1xuXHRcdHRoaXMuYXBwID0gYXBwO1xuXHRcdHRoaXMuZHYgPSBhcHAuZHY7XG5cdFx0dGhpcy5nb25leHQgPSBhcHAuZ29uZXh0O1xuXHR9XG5cblx0am91cm5hbERhaWx5KCkge1xuXHRcdGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG5cdFx0Y29uc3Qgbm93RGF0ZSA9IG5vdy50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKTtcblx0XHQvLyBkb2l0IFx1MDBFQXRyZSBleGVjdXRcdTAwRTkgZGVwdWlzIGxhIHRhc2sgcmF0YWNoXHUwMEU5IFx1MDBFMCBsYSBkYWlseSwgcmFwcGVsIGRhaWx5ID0gbG9nIGVudHJ5IHBvdXIgdGFzayBwcm9qZWN0L2RhaWx5XG5cdFx0Ly8gVGFza3MvXG5cdFx0Ly9cdFx0OGFjNDdkNTAtNGI3My00MWFjLWExODMtMGMzYTVmNDFmZjE5Lm1kXG5cdFx0Ly9cdFx0OGFjNDdkNTAtNGI3My00MWFjLWExODMtMGMzYTVmNDFmZjE5L1xuXHRcdC8vXHRcdFx0M2U0M2NhNzEtZGZjMS00ODU2LWIxYzMtMTBjMDdhZTZmM2VmLm1kXG5cdFx0Y29uc3QgcGFnZXMgPSB0aGlzLmR2LnBhZ2VzKGBcIiR7UGF0aHMuSm91cm5hbH1cImApLndoZXJlKChwYWdlKSA9PiB7XG5cdFx0XHRjb25zdCBmbXAgPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdGlmIChmbXAuZ2V0UHJvamVjdCgpICE9PSBcImRhaWx5XCIpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZm1wLmNyZWF0ZWRBdC50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKSAhPT0gbm93RGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0pO1xuXG5cdFx0Zm9yIChjb25zdCBwYWdlIG9mIHBhZ2VzKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhwYWdlKTtcblx0XHR9XG5cdH1cblxuXHRmbGVldGluZygpIHtcblx0XHRjb25zdCBkdCA9IG5ldyBEYXRlKCk7XG5cdFx0Y29uc3Qgbm90ZSA9IHtcblx0XHRcdHV1aWQ6IHV1aWR2NCgpLFxuXHRcdFx0dHlwZTogMTMsXG5cdFx0XHR2ZXJzaW9uOiBcIjAuMC40XCIsXG5cdFx0XHRjcmVhdGVkX2F0OiBkdC50b0lTT1N0cmluZygpLFxuXHRcdFx0cGF0aDogXCJcIixcblx0XHRcdGRhdGE6IFwiXCIsXG5cdFx0fTtcblxuXHRcdG5vdGUucGF0aCA9IGA4MDAgSW5ib3gvJHtub3RlLnV1aWR9Lm1kYDtcblx0XHRub3RlLmRhdGEgPSBgLS0tXFxudHlwZTogMTNcXG51dWlkOiBcIiR7bm90ZS51dWlkfVwiXFxuY3JlYXRlZF9hdDogXCIke25vdGUuY3JlYXRlZF9hdH1cIlxcbnZlcnNpb246IFwiMC4wLjRcIlxcbi0tLVxcbiMjIENvbnRlbnRcXG5gO1xuXG5cdFx0Y29uc3QgZiA9IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZShub3RlLnBhdGgsIG5vdGUuZGF0YSkudGhlbigoZikgPT4ge1xuXHRcdFx0cmV0dXJuIGY7XG5cdFx0fSk7XG5cdFx0Y29uc3QgYWN0aXZlID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWY7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGNvbnN0IHJvb3QgPSBhY3RpdmUucGFyZW50O1xuXHRcdHRoaXMuYXBwLndvcmtzcGFjZS5jcmVhdGVMZWFmSW5QYXJlbnQocm9vdCwgcm9vdC5jaGlsZHJlbi5sZW5ndGggKyAxKTtcblx0XHRjb25zdCBsZWFmID0gcm9vdC5jaGlsZHJlbltyb290LmNoaWxkcmVuLmxlbmd0aCAtIDFdO1xuXHRcdGYudGhlbigoZmlsZSkgPT4ge1xuXHRcdFx0bGVhZi5vcGVuRmlsZShmaWxlLCB7IGFjdGl2ZTogdHJ1ZSB9KTtcblx0XHR9KTtcblx0fVxuXG5cdHBlcm1hbmVudChuYW1lOiBzdHJpbmcpIHtcblx0XHRjb25zdCBkdCA9IG5ldyBEYXRlKCk7XG5cdFx0Y29uc3Qgbm90ZSA9IHtcblx0XHRcdHV1aWQ6IHV1aWR2NCgpLFxuXHRcdFx0dHlwZTogMixcblx0XHRcdHZlcnNpb246IFwiMC4wLjNcIixcblx0XHRcdGNyZWF0ZWRfYXQ6IGR0LnRvSVNPU3RyaW5nKCksXG5cdFx0XHRwYXRoOiBcIlwiLFxuXHRcdFx0ZGF0YTogXCJcIixcblx0XHR9O1xuXG5cdFx0bm90ZS5wYXRoID0gYCR7UGF0aHMuU2xpcGJveH0vJHtub3RlLnV1aWR9Lm1kYDtcblx0XHRpZiAobmFtZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRub3RlLmRhdGEgPSBgLS0tXFxudHlwZTogMlxcbnV1aWQ6IFwiJHtub3RlLnV1aWR9XCJcXG5jcmVhdGVkX2F0OiBcIiR7bm90ZS5jcmVhdGVkX2F0fVwiXFxudmVyc2lvbjogXCIwLjAuM1wiXFxuLS0tXFxuIyMgQ29udGVudFxcbmA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG5vdGUuZGF0YSA9IGAtLS1cXG50eXBlOiAyXFxudXVpZDogXCIke25vdGUudXVpZH1cIlxcbmNyZWF0ZWRfYXQ6IFwiJHtub3RlLmNyZWF0ZWRfYXR9XCJcXG52ZXJzaW9uOiBcIjAuMC4zXCJcXG4tLS1cXG4jIyBDb250ZW50XFxuIyMjICR7bmFtZX1cXG5gO1xuXHRcdH1cblxuXHRcdGNvbnN0IGYgPSB0aGlzLmFwcC52YXVsdC5jcmVhdGUobm90ZS5wYXRoLCBub3RlLmRhdGEpLnRoZW4oKGYpID0+IHtcblx0XHRcdHJldHVybiBmO1xuXHRcdH0pO1xuXHRcdGNvbnN0IGFjdGl2ZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmO1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRjb25zdCByb290ID0gYWN0aXZlLnBhcmVudDtcblx0XHR0aGlzLmFwcC53b3Jrc3BhY2UuY3JlYXRlTGVhZkluUGFyZW50KHJvb3QsIHJvb3QuY2hpbGRyZW4ubGVuZ3RoICsgMSk7XG5cdFx0Y29uc3QgbGVhZiA9IHJvb3QuY2hpbGRyZW5bcm9vdC5jaGlsZHJlbi5sZW5ndGggLSAxXTtcblx0XHRmLnRoZW4oKGZpbGUpID0+IHtcblx0XHRcdGxlYWYub3BlbkZpbGUoZmlsZSwgeyBhY3RpdmU6IHRydWUgfSk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gQHRzLWlnbm9yZVxuXHRqb3VybmFsRW50cnkoZHQpIHtcblx0XHRpZiAoZHQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0ZHQgPSBuZXcgRGF0ZSgpO1xuXHRcdH1cblxuXHRcdGNvbnN0IG5vdGUgPSB7XG5cdFx0XHR1dWlkOiB1dWlkdjQoKSxcblx0XHRcdHR5cGU6IDIwLFxuXHRcdFx0dmVyc2lvbjogXCIwLjAuNFwiLFxuXHRcdFx0Y3JlYXRlZF9hdDogZHQudG9JU09TdHJpbmcoKSxcblx0XHRcdHBhdGg6IFwiXCIsXG5cdFx0XHRkYXRhOiBcIlwiLFxuXHRcdH07XG5cblx0XHRub3RlLnBhdGggPSBgSm91cm5hbC8ke25vdGUudXVpZH0ubWRgO1xuXHRcdG5vdGUuZGF0YSA9IGAtLS1cXG50eXBlOiAyMFxcbnV1aWQ6IFwiJHtub3RlLnV1aWR9XCJcXG5jcmVhdGVkX2F0OiBcIiR7bm90ZS5jcmVhdGVkX2F0fVwiXFxudmVyc2lvbjogXCIwLjAuNFwiXFxudGFnczpcXG4gICAgLSBwcm9qZWN0L2RhaWx5XFxuLS0tXFxuIyMgQ29udGVudFxcbiMjIyBlbnRyeVxcbmA7XG5cblx0XHRyZXR1cm4gdGhpcy5hcHAudmF1bHQuY3JlYXRlKG5vdGUucGF0aCwgbm90ZS5kYXRhKS50aGVuKChmKSA9PiB7XG5cdFx0XHRyZXR1cm4gZjtcblx0XHR9KTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgTGlzdE1ha2VyIHtcblx0ZHY6IGFueTtcblx0Z29uZXh0OiBhbnk7XG5cdGZyb250bWF0dGVyOiBGcm9udG1hdHRlcjtcblx0bm90ZUhlbHBlcjogTm90ZUhlbHBlcjtcblxuXHRjb25zdHJ1Y3Rvcihnb25leHQsIGR2LCBmcm9udG1hdHRlcikge1xuXHRcdHRoaXMuZ29uZXh0ID0gZ29uZXh0O1xuXHRcdHRoaXMuZHYgPSBkdjtcblx0XHR0aGlzLmZyb250bWF0dGVyID0gZnJvbnRtYXR0ZXI7XG5cdFx0dGhpcy5ub3RlSGVscGVyID0gbmV3IE5vdGVIZWxwZXIoZ29uZXh0LCBkdiwgZnJvbnRtYXR0ZXIpO1xuXHR9XG5cblx0bmFtZUluTmFtZXNwYWNlKGZtOiBhbnksIG5zOiBzdHJpbmdbXSkge1xuXHRcdGxldCBmb3VuZCA9IGZhbHNlO1xuXHRcdGlmIChucy5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGZvciAoY29uc3QgYSBvZiBucykge1xuXHRcdFx0Y29uc3Qgcm9vdCA9IGEuc3BsaXQoXCIvXCIpO1xuXHRcdFx0QXNzZXJ0LlRydWUocm9vdC5sZW5ndGggPT09IDIsIGBJbnZhbGlkIHRhZzogJyR7YX0nYCk7XG5cdFx0XHRjb25zdCBwYXJlbnQgPVxuXHRcdFx0XHRyb290WzBdLnNsaWNlKDAsIDEpID09PSBcIiFcIiA/IHJvb3RbMF0uc2xpY2UoMSkgOiByb290WzBdO1xuXHRcdFx0Ly8gY29uc29sZS5sb2cocGFyZW50KVxuXHRcdFx0Y29uc3QgbmFtZSA9IEhlbHBlci5nZXRUYWcoZm0sIHBhcmVudCk7XG5cblx0XHRcdGlmIChhLnNsaWNlKDAsIDEpID09PSBcIiFcIikge1xuXHRcdFx0XHQvLyBuZWdhdGl2ZSBtYXRjaCwgZGlzY2FyZCBlbnRyeVxuXHRcdFx0XHRpZiAobmFtZSA9PT0gYS5zbGljZSgxKSkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHQvLyBubyBtYXRjaCwgcmVpbml0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Zm91bmQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBwb3NpdGl2ZSBtYXRjaCwga2VlcCBlbnRyeVxuXHRcdFx0XHRpZiAobmFtZSA9PT0gYSkge1xuXHRcdFx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0XHQvLyBubyBtYXRjaCwgcmVpbml0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Zm91bmQgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmb3VuZDtcblx0fVxuXG5cdG15TmFtZUluTmFtZXNwYWNlKG5hbWU6IHN0cmluZywgbnM6IHN0cmluZ1tdKSB7XG5cdFx0bGV0IGZvdW5kID0gZmFsc2U7XG5cdFx0aWYgKG5zLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Zm9yIChjb25zdCBhIG9mIG5zKSB7XG5cdFx0XHRpZiAoYS5zbGljZSgwLCAxKSA9PT0gXCIhXCIpIHtcblx0XHRcdFx0Ly8gbmVnYXRpdmUgbWF0Y2gsIGRpc2NhcmQgZW50cnlcblx0XHRcdFx0aWYgKG5hbWUgPT09IGEuc2xpY2UoMSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0Ly8gbm8gbWF0Y2gsIHJlaW5pdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gcG9zaXRpdmUgbWF0Y2gsIGtlZXAgZW50cnlcblx0XHRcdFx0aWYgKG5hbWUgPT09IGEpIHtcblx0XHRcdFx0XHRmb3VuZCA9IHRydWU7XG5cdFx0XHRcdFx0Ly8gbm8gbWF0Y2gsIHJlaW5pdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGZvdW5kID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZm91bmQ7XG5cdH1cblxuXHRmaWx0ZXJCeU5hbWVzcGFjZShcblx0XHRmbTogYW55LFxuXHRcdGJ5QXJlYXM6IHN0cmluZ1tdLFxuXHRcdGJ5Q29udGV4dHM6IHN0cmluZ1tdLFxuXHRcdGJ5TGF5ZXJzOiBzdHJpbmdbXSxcblx0XHRieU9yZ3M6IHN0cmluZ1tdLFxuXHRcdGJ5UHJvamVjdHM6IHN0cmluZ1tdLFxuXHQpOiBib29sZWFuIHtcblx0XHQvLyBpZiAoYnlBcmVhcy5sZW5ndGggPiAwICYmICFieUFyZWFzLmNvbnRhaW5zKEhlbHBlci5nZXRBcmVhKGZtKSkpIHtcblx0XHQvLyBcdHJldHVybiBmYWxzZTtcblx0XHQvLyB9XG5cblx0XHRpZiAoIXRoaXMubXlOYW1lSW5OYW1lc3BhY2UoSGVscGVyLmdldEFyZWEoZm0pLCBieUFyZWFzKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGNvbnN0IGFyZWEgPSBIZWxwZXIuZ2V0QXJlYShmbSk7XG5cdFx0Ly8gbGV0IGZvdW5kID0gZmFsc2U7XG5cdFx0Ly8gZm9yIChjb25zdCBhIG9mIGJ5QXJlYXMpIHtcblx0XHQvLyBcdGlmIChhLnNsaWNlKDAsIDEpID09PSBcIiFcIikge1xuXHRcdC8vIFx0XHQvLyBuZWdhdGl2ZSBtYXRjaCwgZGlzY2FyZCBlbnRyeVxuXHRcdC8vIFx0XHRpZiAoYXJlYSA9PT0gYS5zbGljZSgxKSkge1xuXHRcdC8vIFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHQvLyBcdFx0XHQvLyBubyBtYXRjaCwgcmVpbml0XG5cdFx0Ly8gXHRcdH0gZWxzZSB7XG5cdFx0Ly8gXHRcdFx0Zm91bmQgPSB0cnVlO1xuXHRcdC8vIFx0XHR9XG5cdFx0Ly8gXHR9IGVsc2Uge1xuXHRcdC8vIFx0XHQvLyBwb3NpdGl2ZSBtYXRjaCwga2VlcCBlbnRyeVxuXHRcdC8vIFx0XHRpZiAoYXJlYSA9PT0gYSkge1xuXHRcdC8vIFx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHQvLyBcdFx0XHQvLyBubyBtYXRjaCwgcmVpbml0XG5cdFx0Ly8gXHRcdH0gZWxzZSB7XG5cdFx0Ly8gXHRcdFx0Zm91bmQgPSBmYWxzZTtcblx0XHQvLyBcdFx0fVxuXHRcdC8vIFx0fVxuXHRcdC8vIH1cblx0XHQvL1xuXHRcdC8vIGlmICghZm91bmQpIHtcblx0XHQvLyBcdHJldHVybiBmYWxzZTtcblx0XHQvLyB9XG5cblx0XHQvLyBpZiAoXG5cdFx0Ly8gXHRieUNvbnRleHRzLmxlbmd0aCA+IDAgJiZcblx0XHQvLyBcdCFieUNvbnRleHRzLmNvbnRhaW5zKEhlbHBlci5nZXRDb250ZXh0KGZtKSlcblx0XHQvLyApIHtcblx0XHQvLyBcdHJldHVybiBmYWxzZTtcblx0XHQvLyB9XG5cdFx0aWYgKCF0aGlzLm15TmFtZUluTmFtZXNwYWNlKEhlbHBlci5nZXRDb250ZXh0KGZtKSwgYnlDb250ZXh0cykpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBpZiAoYnlMYXllcnMubGVuZ3RoID4gMCAmJiAhYnlMYXllcnMuY29udGFpbnMoSGVscGVyLmdldExheWVyKGZtKSkpIHtcblx0XHQvLyBcdHJldHVybiBmYWxzZTtcblx0XHQvLyB9XG5cdFx0aWYgKCF0aGlzLm15TmFtZUluTmFtZXNwYWNlKEhlbHBlci5nZXRMYXllcihmbSksIGJ5TGF5ZXJzKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGlmIChieU9yZ3MubGVuZ3RoID4gMCAmJiAhYnlPcmdzLmNvbnRhaW5zKEhlbHBlci5nZXRPcmcoZm0pKSkge1xuXHRcdC8vIFx0cmV0dXJuIGZhbHNlO1xuXHRcdC8vIH1cblx0XHRpZiAoIXRoaXMubXlOYW1lSW5OYW1lc3BhY2UoSGVscGVyLmdldE9yZyhmbSksIGJ5T3JncykpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBpZiAoXG5cdFx0Ly8gXHRieVByb2plY3RzLmxlbmd0aCA+IDAgJiZcblx0XHQvLyBcdCFieVByb2plY3RzLmNvbnRhaW5zKEhlbHBlci5nZXRQcm9qZWN0KGZtKSlcblx0XHQvLyApIHtcblx0XHQvLyBcdHJldHVybiBmYWxzZTtcblx0XHQvLyB9XG5cdFx0aWYgKCF0aGlzLm15TmFtZUluTmFtZXNwYWNlKEhlbHBlci5nZXRQcm9qZWN0KGZtKSwgYnlQcm9qZWN0cykpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGZpbHRlckJ5RGF0ZShkdDogRGF0ZSwgYmVmb3JlOiBEYXRlLCBhZnRlcjogRGF0ZSk6IGJvb2xlYW4ge1xuXHRcdGlmIChiZWZvcmUgIT09IHVuZGVmaW5lZCAmJiBkdC5nZXRUaW1lKCkgPiBiZWZvcmUuZ2V0VGltZSgpKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKGFmdGVyICE9PSB1bmRlZmluZWQgJiYgZHQuZ2V0VGltZSgpIDwgYWZ0ZXIuZ2V0VGltZSgpKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRnb2FscygpIHtcblx0XHQvLyBjb25zdCBmbSA9IHRoaXMuZnJvbnRtYXR0ZXIuZ2V0Q3VycmVudEZyb250bWF0dGVyKCk7XG5cdFx0Y29uc3QgcnMgPSBbXTtcblx0XHRjb25zdCBiaW5zID0ge307XG5cdFx0Ymluc1tHb2FsU3RhdHVzLlJlZnJhbWVdID0gW107XG5cdFx0Ymluc1tHb2FsU3RhdHVzLlJlc2VhcmNoXSA9IFtdO1xuXHRcdGJpbnNbR29hbFN0YXR1cy5PcGVyYXRpb25hbGl6ZV0gPSBbXTtcblx0XHRiaW5zW0dvYWxTdGF0dXMuUGxhbmlmeV0gPSBbXTtcblx0XHRiaW5zW0dvYWxTdGF0dXMuRGVwZW5kYW50XSA9IFtdO1xuXHRcdGJpbnNbR29hbFN0YXR1cy5BY3RpdmVdID0gW107XG5cdFx0Ymluc1tHb2FsU3RhdHVzLlN1Y2Nlc3NdID0gW107XG5cdFx0Ymluc1tHb2FsU3RhdHVzLkZhaWxlZF0gPSBbXTtcblxuXHRcdGNvbnN0IHBhZ2VzID0gdGhpcy5kdi5wYWdlcyhgXCIke1BhdGhzLkdvYWxzfVwiYCkud2hlcmUoKHBhZ2UpID0+IHtcblx0XHRcdGNvbnN0IGZtcCA9IHBhZ2UuZmlsZS5mcm9udG1hdHRlcjtcblxuXHRcdFx0aWYgKGJpbnNbZm1wLnN0YXR1c10gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHQvLyBjb25zb2xlLmVycm9yKGBJbnZhbGlkIHN0YXR1cyBmb3IgZ29hbDogXCIke2ZtcC51dWlkfVwiYCk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdFx0Ymluc1tmbXAuc3RhdHVzXS5wdXNoKGZtKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGJpbnMpO1xuXHRcdGtleXMuc29ydCgpO1xuXHRcdGZvciAoY29uc3QgayBvZiBrZXlzKSB7XG5cdFx0XHRjb25zdCBidWZmID0gYmluc1trXTtcblx0XHRcdGJ1ZmYuc29ydCgoYSwgYikgPT4ge1xuXHRcdFx0XHRjb25zdCBkdGEgPSBuZXcgRGF0ZShhLmZtLmJlZm9yZSk7XG5cdFx0XHRcdGNvbnN0IGR0YiA9IG5ldyBEYXRlKGIuZm0uYmVmb3JlKTtcblx0XHRcdFx0cmV0dXJuIGR0YS5nZXRUaW1lKCkgLSBkdGIuZ2V0VGltZSgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgZGlzcGxheUdvYWxzID0gKGssIHJzKSA9PiB7XG5cdFx0XHRycy5wdXNoKFtcImhlYWRlclwiLCAzLCBrXSk7XG5cdFx0XHRjb25zdCBidWZmID0gYmluc1trXTtcblx0XHRcdHJzLnB1c2goW1wiYXJyYXlcIiwgUmVuZGVyZXIuZ29hbCwgYnVmZl0pO1xuXHRcdH07XG5cblx0XHRycy5wdXNoKFtcImhlYWRlclwiLCAyLCBcIm9wZXJhdGlvbmFsXCJdKTtcblx0XHRkaXNwbGF5R29hbHMoXCJhY3RpdmVcIiwgcnMpO1xuXHRcdGRpc3BsYXlHb2FscyhcInBsYW5pZnlcIiwgcnMpO1xuXG5cdFx0cnMucHVzaChbXCJoZWFkZXJcIiwgMiwgXCJub24tb3BlcmF0aW9uYWxcIl0pO1xuXHRcdGRpc3BsYXlHb2FscyhcInJlZnJhbWVcIiwgcnMpO1xuXHRcdGRpc3BsYXlHb2FscyhcInJlc2VhcmNoXCIsIHJzKTtcblx0XHRkaXNwbGF5R29hbHMoXCJvcGVyYXRpb25hbGl6ZVwiLCBycyk7XG5cdFx0Ly8gZGlzcGxheUdvYWxzKFwiZGVwZW5kYW50XCIsIHJzKTtcblxuXHRcdHJzLnB1c2goW1wiaGVhZGVyXCIsIDIsIFwiZG9uZVwiXSk7XG5cdFx0ZGlzcGxheUdvYWxzKFwic3VjY2Vzc1wiLCBycyk7XG5cdFx0ZGlzcGxheUdvYWxzKFwiZmFpbGVkXCIsIHJzKTtcblxuXHRcdHJldHVybiBycztcblx0fVxuXG5cdHByb2plY3RUYXNrc1NoZWV0UmVsYXRpb25Gcm9udG1hdHRlcihkdikge1xuXHRcdGNvbnN0IGN1cnJlbnQgPSBkdi5jdXJyZW50KCk7XG5cdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhjdXJyZW50KTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRuYW1lOiBmbS5nZXROYW1lKCksXG5cdFx0XHR1dWlkOiBmbS51dWlkLFxuXHRcdFx0YWN0aXZlOlxuXHRcdFx0XHRmbS5mbS5hY3RpdmUgPT09IHVuZGVmaW5lZCB8fCBmbS5mbS5hY3RpdmUgPT09IHRydWVcblx0XHRcdFx0XHQ/IHRydWVcblx0XHRcdFx0XHQ6IGZhbHNlLFxuXHRcdH07XG5cdH1cblxuXHRwcm9qZWN0VGFza3NTaGVldFJlbGF0aW9uKGR2KSB7XG5cdFx0Y29uc3QgcHJvamVjdCA9IHRoaXMucHJvamVjdFRhc2tzU2hlZXRSZWxhdGlvbkZyb250bWF0dGVyKGR2KTtcblxuXHRcdGNvbnN0IHJzID0gW107XG5cdFx0Y29uc3QgYmlucyA9IHtcblx0XHRcdG5leHRBY3Rpb246IFtdLFxuXHRcdFx0d2FpdGluZ0ZvcjogW10sXG5cdFx0XHRzb21lZGF5TWF5YmU6IFtdLFxuXHRcdH07XG5cblx0XHR7XG5cdFx0XHRjb25zdCBwYWdlcyA9IGR2XG5cdFx0XHRcdC5wYWdlcyhgXCJKb3VybmFsXCJgKVxuXHRcdFx0XHQud2hlcmUoKHBhZ2UpID0+IHtcblx0XHRcdFx0XHRjb25zdCBmbSA9IG5ldyBGcm9udG1hdHRlckpTKHBhZ2UpO1xuXHRcdFx0XHRcdHJldHVybiBmbS5nZXRQcm9qZWN0KCkgPT09IHByb2plY3QubmFtZTtcblx0XHRcdFx0fSlcblx0XHRcdFx0LnNvcnQoKGspID0+IGsuY3JlYXRlZF9hdCwgXCJkZXNjXCIpO1xuXG5cdFx0XHRpZiAocGFnZXMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRycy5wdXNoKFtcImhlYWRlclwiLCAyLCBgSm91cm5hbCAoJHtwYWdlcy5sZW5ndGh9KWBdKTtcblx0XHRcdFx0Zm9yIChjb25zdCBwYWdlIG9mIHBhZ2VzKSB7XG5cdFx0XHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdFx0XHRjb25zdCB0ZXh0ID0gUmVuZGVyZXIubWFrZUxpbmsoXG5cdFx0XHRcdFx0XHRkdixcblx0XHRcdFx0XHRcdGZtLmYsXG5cdFx0XHRcdFx0XHRgJHtmbS5jcmVhdGVkQXQudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCl9YCxcblx0XHRcdFx0XHRcdFwiZW50cnlcIixcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJzLnB1c2goW1wicGFyYWdyYXBoXCIsIHRleHRdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNvbnN0IHBhZ2VzID0gZHYucGFnZXMoYFwiJHtQYXRocy5UYXNrc31cImApLndoZXJlKChwYWdlKSA9PiB7XG5cdFx0XHRjb25zdCBmbSA9IG5ldyBGcm9udG1hdHRlckpTKHBhZ2UpO1xuXHRcdFx0aWYgKGZtLmZtLnN0YXR1cyA9PT0gXCJkb25lXCIpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoW1wiZGFpbHlcIiwgXCJ3ZWVrbHlcIiwgXCJtb250aGx5XCJdLmNvbnRhaW5zKHByb2plY3QubmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmIChcblx0XHRcdFx0cHJvamVjdC5uYW1lID09PSBcImFkaG9jXCIgJiZcblx0XHRcdFx0Zm0uZ2V0UHJvamVjdCgpID09PSB1bmRlZmluZWRcblx0XHRcdCkge1xuXHRcdFx0XHRwYWdlLmZpbGUuZnJvbnRtYXR0ZXIucHJvamVjdCA9IFwiYWRob2NcIjtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9IGVsc2UgaWYgKHByb2plY3QubmFtZSA9PT0gZm0uZ2V0UHJvamVjdCgpKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Zm9yIChjb25zdCBwYWdlIG9mIHBhZ2VzKSB7XG5cdFx0XHRjb25zdCBmbSA9IG5ldyBGcm9udG1hdHRlckpTKHBhZ2UpO1xuXG5cdFx0XHRpZiAodGhpcy5ub3RlSGVscGVyLmlzRG9hYmxlKHBhZ2UpKSB7XG5cdFx0XHRcdGlmIChmbS5mbS5wcmlvcml0eSA+IDApIHtcblx0XHRcdFx0XHRiaW5zLm5leHRBY3Rpb24ucHVzaChwYWdlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRiaW5zLnNvbWVkYXlNYXliZS5wdXNoKHBhZ2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0Zm0uZm0ubmVlZHMgIT09IHVuZGVmaW5lZCAmJlxuXHRcdFx0XHRcdHRoaXMubm90ZUhlbHBlci5oYXNQZW5kaW5nRGVwZW5kZW5jaWVzKGZtLmZtLm5lZWRzKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRwYWdlLmNhdXNlID0gXCJkZXBlbmRlbmNpZXNcIjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb25zdCBmbUF0ID0gZm0uYXQ7XG5cdFx0XHRcdFx0Y29uc3QgY3VycmVudEF0ID0gbmV3IERhdGUoKTtcblx0XHRcdFx0XHRjb25zdCBmbUFmdGVyID0gZm0uYWZ0ZXI7XG5cblx0XHRcdFx0XHRpZiAoZm0uZm0uYXQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0Zm1BdC5zZXRIb3VycygwKTtcblx0XHRcdFx0XHRcdGZtQXQuc2V0TWludXRlcygwKTtcblx0XHRcdFx0XHRcdGZtQXQuc2V0U2Vjb25kcygwKTtcblx0XHRcdFx0XHRcdGZtQXQuc2V0TWlsbGlzZWNvbmRzKDApO1xuXHRcdFx0XHRcdFx0Y3VycmVudEF0LnNldEhvdXJzKDApO1xuXHRcdFx0XHRcdFx0Y3VycmVudEF0LnNldE1pbnV0ZXMoMCk7XG5cdFx0XHRcdFx0XHRjdXJyZW50QXQuc2V0U2Vjb25kcygwKTtcblx0XHRcdFx0XHRcdGN1cnJlbnRBdC5zZXRNaWxsaXNlY29uZHMoMCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChmbS5hZnRlciAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRmbUFmdGVyLnNldEhvdXJzKDApO1xuXHRcdFx0XHRcdFx0Zm1BZnRlci5zZXRNaW51dGVzKDApO1xuXHRcdFx0XHRcdFx0Zm1BZnRlci5zZXRTZWNvbmRzKDApO1xuXHRcdFx0XHRcdFx0Zm1BZnRlci5zZXRNaWxsaXNlY29uZHMoMCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coYGN1cnJlbnQ6ICR7Y3VycmVudEF0LmdldFRpbWUoKX1gKTtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhgYXQ6ICR7Zm0uYXQuZ2V0VGltZSgpfWApO1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKGBhZnRlcjogJHtmbS5hZnRlci5nZXRUaW1lKCl9YCk7XG5cblx0XHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0XHRmbS5mbS5hdCAhPT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdFx0XHRmbUF0LmdldFRpbWUoKSA+IGN1cnJlbnRBdC5nZXRUaW1lKClcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdHBhZ2UuY2F1c2UgPSBcImF0XCI7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChcblx0XHRcdFx0XHRcdGZtLmZtLmFmdGVyICE9PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0XHRcdGZtQWZ0ZXIuZ2V0VGltZSgpIDwgY3VycmVudEF0LmdldFRpbWUoKVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0cGFnZS5jYXVzZSA9IFwiYWZ0ZXJcIjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cGFnZS5jYXVzZSA9IFwidW5rbm93blwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJpbnMud2FpdGluZ0Zvci5wdXNoKHBhZ2UpO1xuXHRcdFx0XHQvLyBhdFxuXHRcdFx0XHQvLyBhZnRlclxuXHRcdFx0XHQvLyBuZWVkc1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChiaW5zLm5leHRBY3Rpb24ubGVuZ3RoID4gMCkge1xuXHRcdFx0cnMucHVzaChbXCJoZWFkZXJcIiwgMiwgYE5leHQgQWN0aW9ucyAoJHtiaW5zLm5leHRBY3Rpb24ubGVuZ3RofSlgXSk7XG5cdFx0XHRiaW5zLm5leHRBY3Rpb24uc29ydChIZWxwZXIuc29ydEJ5UHJpb3JpdHlBbmREdXJhdGlvbkFuZEFnZSk7XG5cdFx0XHRycy5wdXNoKFtcblx0XHRcdFx0XCJhcnJheVwiLFxuXHRcdFx0XHRSZW5kZXJlci5iYXNpY1Rhc2tKb3VybmFsTmV4dEFjdGlvbixcblx0XHRcdFx0Ymlucy5uZXh0QWN0aW9uLFxuXHRcdFx0XSk7XG5cdFx0fVxuXG5cdFx0aWYgKGJpbnMud2FpdGluZ0Zvci5sZW5ndGggPiAwKSB7XG5cdFx0XHRycy5wdXNoKFtcImhlYWRlclwiLCAyLCBgV2FpdGluZyAoJHtiaW5zLndhaXRpbmdGb3IubGVuZ3RofSlgXSk7XG5cdFx0XHRiaW5zLndhaXRpbmdGb3Iuc29ydChIZWxwZXIuc29ydEJ5UHJpb3JpdHlBbmREdXJhdGlvbkFuZEFnZSk7XG5cdFx0XHRycy5wdXNoKFtcblx0XHRcdFx0XCJhcnJheVwiLFxuXHRcdFx0XHRSZW5kZXJlci5iYXNpY1Rhc2tKb3VybmFsV2FpdGluZyxcblx0XHRcdFx0Ymlucy53YWl0aW5nRm9yLFxuXHRcdFx0XSk7XG5cdFx0fVxuXG5cdFx0aWYgKGJpbnMuc29tZWRheU1heWJlLmxlbmd0aCA+IDApIHtcblx0XHRcdHJzLnB1c2goW1wiaGVhZGVyXCIsIDIsIGBNYXliZSAoJHtiaW5zLnNvbWVkYXlNYXliZS5sZW5ndGh9KWBdKTtcblx0XHRcdGJpbnMuc29tZWRheU1heWJlLnNvcnQoSGVscGVyLnNvcnRCeVByaW9yaXR5QW5kRHVyYXRpb25BbmRBZ2UpO1xuXHRcdFx0cnMucHVzaChbXCJhcnJheVwiLCBSZW5kZXJlci5iYXNpY1Rhc2tKb3VybmFsLCBiaW5zLnNvbWVkYXlNYXliZV0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBycztcblx0fVxuXG5cdHByb2plY3RMb2dzU2hlZXRSZWxhdGlvbihkdikge1xuXHRcdGNvbnN0IHByb2plY3QgPSB0aGlzLnByb2plY3RUYXNrc1NoZWV0UmVsYXRpb25Gcm9udG1hdHRlcihkdik7XG5cblx0XHRjb25zdCBmaWx0ZXJCeSA9IFtdO1xuXHRcdGNvbnN0IHJzID0gW107XG5cblx0XHRycy5wdXNoKFtcImhlYWRlclwiLCAyLCBcIkxvZ3NcIl0pO1xuXG5cdFx0Y29uc3QgbG9ncyA9IHRoaXMuZHYucGFnZXMoYFwiJHtQYXRocy5Mb2dzfVwiYCkud2hlcmUoKHBhZ2UpID0+IHtcblx0XHRcdGlmIChwYWdlLnR5cGUgIT09IFR5cGVzLkxvZykge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRpZiAocGFnZS5maWxlLmZyb250bWF0dGVyLnJldmlld2VkID4gMCkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9KTtcblxuXHRcdGNvbnN0IGJ1ZmYgPSB7fTtcblx0XHRmb3IgKGNvbnN0IGUgb2YgbG9ncykge1xuXHRcdFx0Y29uc3QgZm0gPSBlLmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0XHRpZiAoZmlsdGVyQnkubGVuZ3RoID4gMCAmJiAhdGhpcy5uYW1lSW5OYW1lc3BhY2UoZm0sIGZpbHRlckJ5KSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Zm0uY3JlYXRlZEF0ID0gdGhpcy5mcm9udG1hdHRlci5nZXRDcmVhdGVkQXQoZS5maWxlKTtcblx0XHRcdEFzc2VydC5UcnVlKFxuXHRcdFx0XHQhSGVscGVyLm5pbENoZWNrKGZtLnBhcmVudF9pZCksXG5cdFx0XHRcdGBNaXNzaW5nIGZpZWxkIFwicGFyZW50X2lkXCIgZnJvbSBsb2c6IFwiJHtmbS51dWlkfVwiYCxcblx0XHRcdCk7XG5cdFx0XHRjb25zdCBwYXJlbnQgPSB0aGlzLmR2XG5cdFx0XHRcdC5wYWdlcyhgXCIke1BhdGhzLlRhc2tzfS8ke2ZtLnBhcmVudF9pZH1cImApXG5cdFx0XHRcdC5hcnJheSgpO1xuXHRcdFx0aWYgKHBhcmVudC5sZW5ndGggIT09IDEpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRBc3NlcnQuVHJ1ZShcblx0XHRcdFx0cGFyZW50Lmxlbmd0aCA9PT0gMSxcblx0XHRcdFx0YFBhcmVudDogJHtmbS5wYXJlbnRfaWR9IG5vdCBmb3VuZCBmb3IgbG9nOiBcIiR7Zm0udXVpZH1cImAsXG5cdFx0XHQpO1xuXHRcdFx0Zm0ucHJvamVjdCA9IEhlbHBlci5nZXRQcm9qZWN0KHBhcmVudFswXS5maWxlLmZyb250bWF0dGVyKTtcblx0XHRcdGZtLmFyZWEgPSBIZWxwZXIuZ2V0QXJlYShwYXJlbnRbMF0uZmlsZS5mcm9udG1hdHRlciwgdHJ1ZSk7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdGZtLnByb2plY3QgIT09XG5cdFx0XHRcdGBwcm9qZWN0LyR7cHJvamVjdC5uYW1lID09PSBcImFkaG9jXCIgPyBcIm5vbmVcIiA6IHByb2plY3QubmFtZX1gXG5cdFx0XHQpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChIZWxwZXIubmlsQ2hlY2soZm0uZG9uZV9hdCkpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBkYXRlID0gZm0uZG9uZV9hdC5zbGljZSgwLCAxMCk7XG5cblx0XHRcdGlmIChidWZmW2RhdGVdID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0YnVmZltkYXRlXSA9IFtlXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1ZmZbZGF0ZV0ucHVzaChlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYnVmZik7XG5cdFx0a2V5cy5zb3J0KCk7XG5cdFx0Zm9yIChjb25zdCBkYXRlIG9mIGtleXMpIHtcblx0XHRcdGJ1ZmZbZGF0ZV0uc29ydChcblx0XHRcdFx0KGEsIGIpID0+XG5cdFx0XHRcdFx0Yi5maWxlLmZyb250bWF0dGVyLmNyZWF0ZWRBdC5nZXRUaW1lKCkgLVxuXHRcdFx0XHRcdGEuZmlsZS5mcm9udG1hdHRlci5jcmVhdGVkQXQuZ2V0VGltZSgpLFxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRmb3IgKGNvbnN0IGRhdGUgb2Yga2V5cy5yZXZlcnNlKCkpIHtcblx0XHRcdHJzLnB1c2goW1wiaGVhZGVyXCIsIDMsIGRhdGVdKTtcblx0XHRcdHJzLnB1c2goW1wiYXJyYXlcIiwgUmVuZGVyZXIucHJvamVjdExvZ3MsIGJ1ZmZbZGF0ZV1dKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcnM7XG5cdH1cblxuXHRnZXRQcm9qZWN0TG9ncyhkdiwgcHJvamVjdCkge1xuXHRcdGNvbnN0IGxvZ3MgPSB0aGlzLmR2LnBhZ2VzKGBcIiR7UGF0aHMuTG9nc31cImApLndoZXJlKChwYWdlKSA9PiB7XG5cdFx0XHRpZiAocGFnZS50eXBlICE9PSBUeXBlcy5Mb2cpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSk7XG5cblx0XHRjb25zdCBidWZmID0gW107XG5cdFx0Zm9yIChjb25zdCBlIG9mIGxvZ3MpIHtcblx0XHRcdGNvbnN0IGZtID0gZS5maWxlLmZyb250bWF0dGVyO1xuXHRcdFx0QXNzZXJ0LlRydWUoXG5cdFx0XHRcdCFIZWxwZXIubmlsQ2hlY2soZm0ucGFyZW50X2lkKSxcblx0XHRcdFx0YE1pc3NpbmcgZmllbGQgXCJwYXJlbnRfaWRcIiBmcm9tIGxvZzogXCIke2ZtLnV1aWR9XCJgLFxuXHRcdFx0KTtcblx0XHRcdGNvbnN0IHBhcmVudCA9IHRoaXMuZHZcblx0XHRcdFx0LnBhZ2VzKGBcIiR7UGF0aHMuVGFza3N9LyR7Zm0ucGFyZW50X2lkfVwiYClcblx0XHRcdFx0LmFycmF5KCk7XG5cdFx0XHRpZiAocGFyZW50Lmxlbmd0aCAhPT0gMSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdC8vIEFzc2VydC5UcnVlKFxuXHRcdFx0Ly8gXHRwYXJlbnQubGVuZ3RoID09PSAxLFxuXHRcdFx0Ly8gXHRgUGFyZW50OiAke2ZtLnBhcmVudF9pZH0gbm90IGZvdW5kIGZvciBsb2c6IFwiJHtmbS51dWlkfVwiYCxcblx0XHRcdC8vICk7XG5cdFx0XHRmbS5wcm9qZWN0ID0gSGVscGVyLmdldFByb2plY3QocGFyZW50WzBdLmZpbGUuZnJvbnRtYXR0ZXIpO1xuXHRcdFx0Zm0uYXJlYSA9IEhlbHBlci5nZXRBcmVhKHBhcmVudFswXS5maWxlLmZyb250bWF0dGVyLCB0cnVlKTtcblx0XHRcdGlmIChcblx0XHRcdFx0Zm0ucHJvamVjdCAhPT1cblx0XHRcdFx0YHByb2plY3QvJHtwcm9qZWN0Lm5hbWUgPT09IFwiYWRob2NcIiA/IFwibm9uZVwiIDogcHJvamVjdC5uYW1lfWBcblx0XHRcdCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKEhlbHBlci5uaWxDaGVjayhmbS5kb25lX2F0KSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdGJ1ZmYucHVzaChlKTtcblx0XHR9XG5cdFx0cmV0dXJuIGJ1ZmY7XG5cdH1cblxuXHRwcm9qZWN0TG9nc1NoZWV0KGR2KSB7XG5cdFx0Y29uc3QgcHJvamVjdCA9IHRoaXMuZnJvbnRtYXR0ZXIucHJvamVjdFBhcnNlTWV0YShkdik7XG5cdFx0Y29uc3QgZm1sID0gdGhpcy5mcm9udG1hdHRlci5nZXRDdXJyZW50RnJvbnRtYXR0ZXIoKTtcblx0XHRpZiAoZm1sID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBmcm9udG1hdHRlciwgY2Fubm90IHByb2NlZWRgKTtcblx0XHR9XG5cblx0XHRjb25zdCBiZWZvcmUgPSBIZWxwZXIubmlsQ2hlY2soZm1sLmJlZm9yZSlcblx0XHRcdD8gbmV3IERhdGUoMClcblx0XHRcdDogbmV3IERhdGUoZm1sLmJlZm9yZSk7XG5cdFx0Y29uc3QgYWZ0ZXIgPSBIZWxwZXIubmlsQ2hlY2soZm1sLmFmdGVyKVxuXHRcdFx0PyBuZXcgRGF0ZSgpXG5cdFx0XHQ6IG5ldyBEYXRlKGZtbC5hZnRlcik7XG5cblx0XHQvLyBjb25zb2xlLmxvZyhgYmVmb3JlOiAnJHtiZWZvcmV9J2ApO1xuXHRcdC8vIGNvbnNvbGUubG9nKGBhZnRlcjogJyR7YWZ0ZXJ9J2ApO1xuXHRcdGNvbnN0IGZpbHRlckJ5ID0gdGhpcy5mcm9udG1hdHRlci5wYXJzZUxpc3RGaWx0ZXJCeShmbWwpO1xuXHRcdGNvbnN0IHJzID0gW107XG5cdFx0bGV0IHRvdGFsVGltZSA9IDA7XG5cdFx0cnMucHVzaChbXCJoZWFkZXJcIiwgMSwgcHJvamVjdC5uYW1lXSk7XG5cblx0XHRjb25zdCBsb2dzID0gdGhpcy5kdi5wYWdlcyhgXCIke1BhdGhzLkxvZ3N9XCJgKS53aGVyZSgocGFnZSkgPT4ge1xuXHRcdFx0aWYgKHBhZ2UudHlwZSAhPT0gVHlwZXMuTG9nKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0pO1xuXG5cdFx0Y29uc3QgYnVmZiA9IHt9O1xuXHRcdGZvciAoY29uc3QgZSBvZiBsb2dzKSB7XG5cdFx0XHRjb25zdCBmbSA9IGUuZmlsZS5mcm9udG1hdHRlcjtcblx0XHRcdGlmIChmaWx0ZXJCeS5sZW5ndGggPiAwICYmICF0aGlzLm5hbWVJbk5hbWVzcGFjZShmbSwgZmlsdGVyQnkpKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRmbS5jcmVhdGVkQXQgPSB0aGlzLmZyb250bWF0dGVyLmdldENyZWF0ZWRBdChlLmZpbGUpO1xuXHRcdFx0QXNzZXJ0LlRydWUoXG5cdFx0XHRcdCFIZWxwZXIubmlsQ2hlY2soZm0ucGFyZW50X2lkKSxcblx0XHRcdFx0YE1pc3NpbmcgZmllbGQgXCJwYXJlbnRfaWRcIiBmcm9tIGxvZzogXCIke2ZtLnV1aWR9XCJgLFxuXHRcdFx0KTtcblx0XHRcdGNvbnN0IHBhcmVudCA9IHRoaXMuZHZcblx0XHRcdFx0LnBhZ2VzKGBcIiR7UGF0aHMuVGFza3N9LyR7Zm0ucGFyZW50X2lkfVwiYClcblx0XHRcdFx0LmFycmF5KCk7XG5cdFx0XHRpZiAocGFyZW50Lmxlbmd0aCAhPT0gMSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdC8vIEFzc2VydC5UcnVlKFxuXHRcdFx0Ly8gXHRwYXJlbnQubGVuZ3RoID09PSAxLFxuXHRcdFx0Ly8gXHRgUGFyZW50OiAke2ZtLnBhcmVudF9pZH0gbm90IGZvdW5kIGZvciBsb2c6IFwiJHtmbS51dWlkfVwiYCxcblx0XHRcdC8vICk7XG5cdFx0XHRmbS5wcm9qZWN0ID0gSGVscGVyLmdldFByb2plY3QocGFyZW50WzBdLmZpbGUuZnJvbnRtYXR0ZXIpO1xuXHRcdFx0Zm0uYXJlYSA9IEhlbHBlci5nZXRBcmVhKHBhcmVudFswXS5maWxlLmZyb250bWF0dGVyLCB0cnVlKTtcblx0XHRcdGlmIChcblx0XHRcdFx0Zm0ucHJvamVjdCAhPT1cblx0XHRcdFx0YHByb2plY3QvJHtwcm9qZWN0Lm5hbWUgPT09IFwiYWRob2NcIiA/IFwibm9uZVwiIDogcHJvamVjdC5uYW1lfWBcblx0XHRcdCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKEhlbHBlci5uaWxDaGVjayhmbS5kb25lX2F0KSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgZGF0ZSA9IGZtLmRvbmVfYXQuc2xpY2UoMCwgMTApO1xuXHRcdFx0Y29uc3QgY3JlYXRlZEF0ID0gbmV3IERhdGUoZm0uY3JlYXRlZF9hdCk7XG5cdFx0XHRjb25zdCBkb25lQXQgPSBuZXcgRGF0ZShmbS5kb25lX2F0KTtcblxuXHRcdFx0aWYgKGNyZWF0ZWRBdCA+IGJlZm9yZSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGNyZWF0ZWRBdCA8IGFmdGVyKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoYnVmZltkYXRlXSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGJ1ZmZbZGF0ZV0gPSBbZV07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWZmW2RhdGVdLnB1c2goZSk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGRlbHRhID0gZG9uZUF0LmdldFRpbWUoKSAtIGNyZWF0ZWRBdC5nZXRUaW1lKCk7XG5cblx0XHRcdHRvdGFsVGltZSArPSBkZWx0YTtcblx0XHR9XG5cblx0XHRkdi5wYXJhZ3JhcGgoXG5cdFx0XHRgX3RvdGFsVGltZSAoaCk6XyAke01hdGgucm91bmQoKHRvdGFsVGltZSAvICgxMDAwICogNjAgKiA2MCkpICogMTApIC8gMTB9YCxcblx0XHQpO1xuXG5cdFx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGJ1ZmYpO1xuXHRcdGtleXMuc29ydCgpO1xuXHRcdGZvciAoY29uc3QgZGF0ZSBvZiBrZXlzKSB7XG5cdFx0XHRidWZmW2RhdGVdLnNvcnQoXG5cdFx0XHRcdChhLCBiKSA9PlxuXHRcdFx0XHRcdGIuZmlsZS5mcm9udG1hdHRlci5jcmVhdGVkQXQuZ2V0VGltZSgpIC1cblx0XHRcdFx0XHRhLmZpbGUuZnJvbnRtYXR0ZXIuY3JlYXRlZEF0LmdldFRpbWUoKSxcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0Zm9yIChjb25zdCBkYXRlIG9mIGtleXMucmV2ZXJzZSgpKSB7XG5cdFx0XHRycy5wdXNoKFtcImhlYWRlclwiLCAzLCBkYXRlXSk7XG5cdFx0XHRycy5wdXNoKFtcImFycmF5XCIsIFJlbmRlcmVyLnByb2plY3RMb2dzLCBidWZmW2RhdGVdXSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJzO1xuXHR9XG5cblx0bG9ncygpIHtcblx0XHRjb25zdCBbZ3JvdXBCeSwgZmlsdGVyQnksIGJlZm9yZSwgYWZ0ZXJdID1cblx0XHRcdHRoaXMuZnJvbnRtYXR0ZXIucGFyc2VBbGxQcm9ncmVzc2VkVGFza3MoKTtcblxuXHRcdGNvbnN0IHRhc2tzID0gdGhpcy5kdlxuXHRcdFx0LnBhZ2VzKGBcIiR7UGF0aHMuVGFza3N9XCJgKVxuXHRcdFx0LndoZXJlKChwYWdlKSA9PiBwYWdlLmZpbGUuZnJvbnRtYXR0ZXIuc3RhdHVzICE9PSBcImRvaW5nXCIpO1xuXG5cdFx0Y29uc3QgYnVmZiA9IFtdO1xuXHRcdGZvciAoY29uc3QgdGFzayBvZiB0YXNrcykge1xuXHRcdFx0Y29uc3QgZm0gPSB0YXNrLmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0XHRpZiAoZmlsdGVyQnkubGVuZ3RoID4gMCAmJiAhdGhpcy5uYW1lSW5OYW1lc3BhY2UoZm0sIGZpbHRlckJ5KSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgdGltZUVzdGltYXRlID0gSGVscGVyLmR1cmF0aW9uU3RyaW5nVG9TZWMoZm0udGltZV9lc3RpbWF0ZSk7XG5cdFx0XHRpZiAodGltZUVzdGltYXRlID09PSB1bmRlZmluZWQgJiYgZm0udGltZV9lc3RpbWF0ZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHRgSW52YWxpZCB2YWx1ZTogXCIke2ZtLnRpbWVfZXN0aW1hdGV9XCIgZm9yIGVudHJ5OiBcIiR7Zm0udXVpZH1cImAsXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmbS50aW1lRXN0aW1hdGUgPSB0aW1lRXN0aW1hdGU7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGxvZ3MgPSB0aGlzLmR2XG5cdFx0XHRcdC5wYWdlcyhgXCIke1BhdGhzLkxvZ3N9LyR7Zm0udXVpZH1cImApXG5cdFx0XHRcdC53aGVyZSgocGFnZSkgPT4gcGFnZS50eXBlID09PSBUeXBlcy5Mb2cpXG5cdFx0XHRcdC5zb3J0KChrKSA9PiBrLmNyZWF0ZWRfYXQsIFwiYXNjXCIpO1xuXG5cdFx0XHQvLyBkaXNjYXJkIHRhc2tzIHdpdGhvdXQgbG9nIGVudHJ5XG5cdFx0XHRpZiAobG9ncy5sZW5ndGggPCAxKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRmbS50b29rID0gMDtcblx0XHRcdGNvbnN0IHByb2plY3QgPSBIZWxwZXIuZ2V0RmllbGQoSGVscGVyLmdldFByb2plY3QoZm0sIHRydWUpLCBcIlwiKTtcblx0XHRcdGNvbnN0IGFyZWEgPSBIZWxwZXIuZ2V0RmllbGQoSGVscGVyLmdldEFyZWEoZm0sIHRydWUpLCBcIlwiKTtcblxuXHRcdFx0Zm9yIChjb25zdCBsb2cgb2YgbG9ncykge1xuXHRcdFx0XHRjb25zdCBmbWwgPSBsb2cuZmlsZS5mcm9udG1hdHRlcjtcblx0XHRcdFx0Y29uc3QgZW50cnkgPSB7XG5cdFx0XHRcdFx0YWxpYXM6IGZtLmFsaWFzLFxuXHRcdFx0XHRcdHV1aWQ6IGZtLnV1aWQsXG5cdFx0XHRcdFx0bG9nSWQ6IGZtbC51dWlkLFxuXHRcdFx0XHRcdGVzdGltYXRlOiBmbS50aW1lRXN0aW1hdGUsXG5cdFx0XHRcdFx0cHJvamVjdDogcHJvamVjdCxcblx0XHRcdFx0XHRhcmVhOiBhcmVhLFxuXHRcdFx0XHRcdGRvbWFpbjogSGVscGVyLmdldEZpZWxkKEhlbHBlci5nZXREb21haW4oZm0sIHRydWUpLCBcIlwiKSxcblx0XHRcdFx0XHRwYXRoOiB0YXNrLmZpbGUucGF0aCxcblx0XHRcdFx0XHRsb2dQYXRoOiBsb2cuZmlsZS5wYXRoLFxuXHRcdFx0XHRcdGNyZWF0ZWRBdDogdW5kZWZpbmVkLFxuXHRcdFx0XHRcdGRvbmVBdDogdW5kZWZpbmVkLFxuXHRcdFx0XHRcdHRvb2s6IHVuZGVmaW5lZCxcblx0XHRcdFx0XHR0b29rQWNjOiB1bmRlZmluZWQsXG5cdFx0XHRcdFx0ZGVsdGFBY2M6IHVuZGVmaW5lZCxcblx0XHRcdFx0fTtcblx0XHRcdFx0aWYgKGZtbC5jcmVhdGVkX2F0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKGxvZyk7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0YHRhc2s6ICR7Zm0udXVpZH0gbGFzdCBlbnRyeSBpcyBtaXNzaW5nICdjcmVhdGVkX2F0JyBmaWVsZGAsXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChmbWwuZG9uZV9hdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihsb2cpO1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdGB0YXNrOiAke2ZtLnV1aWR9IGxhc3QgZW50cnkgaXMgbWlzc2luZyAnZG9uZV9hdCcgZmllbGRgLFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlbnRyeS5jcmVhdGVkQXQgPSBuZXcgRGF0ZShmbWwuY3JlYXRlZF9hdCk7XG5cdFx0XHRcdGVudHJ5LmRvbmVBdCA9IG5ldyBEYXRlKGZtbC5kb25lX2F0KTtcblx0XHRcdFx0aWYgKCF0aGlzLmZpbHRlckJ5RGF0ZShlbnRyeS5kb25lQXQsIGJlZm9yZSwgYWZ0ZXIpKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCB0b29rID1cblx0XHRcdFx0XHQoZW50cnkuZG9uZUF0LmdldFRpbWUoKSAtIGVudHJ5LmNyZWF0ZWRBdC5nZXRUaW1lKCkpIC8gMTAwMDtcblx0XHRcdFx0Zm0udG9vayArPSB0b29rO1xuXHRcdFx0XHRlbnRyeS50b29rID0gdG9vaztcblx0XHRcdFx0ZW50cnkudG9va0FjYyA9IGZtLnRvb2s7XG5cdFx0XHRcdGVudHJ5LmRlbHRhQWNjID0gdGltZUVzdGltYXRlIC0gZm0udG9vaztcblx0XHRcdFx0YnVmZi5wdXNoKGVudHJ5KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCBrZXlHZXR0ZXIgPSBIZWxwZXIuZ2V0S2V5KGdyb3VwQnkpO1xuXHRcdGNvbnN0IGJpbnMgPSB7fTtcblx0XHRmb3IgKGNvbnN0IGVudHJ5IG9mIGJ1ZmYpIHtcblx0XHRcdGxldCBkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkID0ga2V5R2V0dGVyKGVudHJ5KTtcblx0XHRcdH0gY2F0Y2gge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoZW50cnkpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoYmluc1tkXSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGJpbnNbZF0gPSBbZW50cnldO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ymluc1tkXS5wdXNoKGVudHJ5KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYmlucyk7XG5cdFx0a2V5cy5zb3J0KCk7XG5cblx0XHQvLyBidWlsZHMgcmVuZGVyaW5nIGFycmF5XG5cdFx0Y29uc3QgcnMgPSBbXTtcblx0XHRmb3IgKGNvbnN0IGtleSBvZiBrZXlzLnJldmVyc2UoKSkge1xuXHRcdFx0cnMucHVzaChbXCJoZWFkZXJcIiwgMiwga2V5XSk7XG5cdFx0XHRjb25zdCBhcnIgPSBbXTtcblx0XHRcdGxldCB0b3RhbFRpbWUgPSAwO1xuXG5cdFx0XHQvLyBkYXkgbG9vcFxuXHRcdFx0Zm9yIChjb25zdCBlIG9mIGJpbnNba2V5XSkge1xuXHRcdFx0XHRjb25zdCBidWZmID0gW107XG5cdFx0XHRcdGJ1ZmYucHVzaChcblx0XHRcdFx0XHRSZW5kZXJlci5tYWtlTGlua1Nob3J0VVVJRChcblx0XHRcdFx0XHRcdHRoaXMuZHYsXG5cdFx0XHRcdFx0XHR7IHBhdGg6IGUucGF0aCwgZnJvbnRtYXR0ZXI6IHsgdXVpZDogZS51dWlkIH0gfSxcblx0XHRcdFx0XHRcdFwiVGFza1wiLFxuXHRcdFx0XHRcdCksXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gYnVmZi5wdXNoKFxuXHRcdFx0XHQvLyBcdHRoaXMuZHYuc2VjdGlvbkxpbmsoXG5cdFx0XHRcdC8vIFx0XHRlLnBhdGgsXG5cdFx0XHRcdC8vIFx0XHRcIlRhc2tcIixcblx0XHRcdFx0Ly8gXHRcdGZhbHNlLFxuXHRcdFx0XHQvLyBcdFx0YCR7ZS51dWlkLnNsaWNlKDAsIDgpfWAsXG5cdFx0XHRcdC8vIFx0KSxcblx0XHRcdFx0Ly8gKTtcblxuXHRcdFx0XHRidWZmLnB1c2goXG5cdFx0XHRcdFx0UmVuZGVyZXIubWFrZUxpbmtTaG9ydFVVSUQoXG5cdFx0XHRcdFx0XHR0aGlzLmR2LFxuXHRcdFx0XHRcdFx0eyBwYXRoOiBlLmxvZ1BhdGgsIGZyb250bWF0dGVyOiB7IHV1aWQ6IGUubG9nSWQgfSB9LFxuXHRcdFx0XHRcdFx0XCJDb250ZW50XCIsXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0KTtcblx0XHRcdFx0Ly8gYnVmZi5wdXNoKFxuXHRcdFx0XHQvLyBcdHRoaXMuZHYuc2VjdGlvbkxpbmsoXG5cdFx0XHRcdC8vIFx0XHRlLmxvZ1BhdGgsXG5cdFx0XHRcdC8vIFx0XHRcIkNvbnRlbnRcIixcblx0XHRcdFx0Ly8gXHRcdGZhbHNlLFxuXHRcdFx0XHQvLyBcdFx0YCR7ZS5sb2dJZC5zbGljZSgwLCA4KX1gLFxuXHRcdFx0XHQvLyBcdCksXG5cdFx0XHRcdC8vICk7XG5cblx0XHRcdFx0Ly8gYnVmZi5wdXNoKGAke2UuY3JlYXRlZEF0LnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTYpfWApO1xuXHRcdFx0XHQvLyBidWZmLnB1c2goYCR7ZS5kb25lQXQudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxNil9YCk7XG5cblx0XHRcdFx0Y29uc3QgY29udmVydFNlY29uZHNUb0hvdXJzID0gKHQpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCgodCAvIDM2MDApICogMTApIC8gMTA7XG5cdFx0XHRcdH07XG5cdFx0XHRcdGJ1ZmYucHVzaChgJHtjb252ZXJ0U2Vjb25kc1RvSG91cnMoZS50b29rKX1gKTtcblx0XHRcdFx0YnVmZi5wdXNoKGAke2UucHJvamVjdH1gKTtcblxuXHRcdFx0XHRhcnIucHVzaChidWZmKTtcblx0XHRcdFx0dG90YWxUaW1lICs9IGUudG9vaztcblx0XHRcdH1cblxuXHRcdFx0Ly8gdGFza1xuXHRcdFx0dG90YWxUaW1lID0gTWF0aC5yb3VuZCgodG90YWxUaW1lIC8gMzYwMCkgKiAxMCkgLyAxMDtcblx0XHRcdHJzLnB1c2goW1wic3RhdHNcIiwgXCJ0b3RhbFRpbWVcIiwgXCJoXCIsIHRvdGFsVGltZV0pO1xuXHRcdFx0cnMucHVzaChbXCJhcnJheVwiLCBSZW5kZXJlci5iYXNpY1Byb2dyZXNzZWRUYXNrV2l0aExvZywgYXJyXSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJzO1xuXHR9XG5cblx0aW5ib3goZHYpIHtcblx0XHRjb25zdCBycyA9IFtdO1xuXHRcdGNvbnN0IGJ1ZmYgPSBbXTtcblx0XHQvLyBmb25jdGlvbiBkJ2V4dHJhY3Rpb24gZXQgZCdpbml0aWFsaXNhdGlvbiBkZXMgcGFyYW1ydHJlcyBkdSBmcm9udG1hdHRlclxuXHRcdC8vIGZvbmN0aW9uIGZpbHRlciwgKHRhc2spIC0+IGJvb2xcblxuXHRcdGNvbnN0IGZpbHRlckJ5ID0gW107XG5cdFx0Y29uc3QgbWluU2l6ZSA9IDA7XG5cdFx0Y29uc3QgbWF4U2l6ZSA9IDQyOTQ5NjcyOTU7XG5cblx0XHRjb25zdCBmbGVldGluZ3MgPSB0aGlzLmR2LnBhZ2VzKGBcIiR7UGF0aHMuSW5ib3h9XCJgKS5hcnJheSgpO1xuXHRcdGZvciAoY29uc3QgZSBvZiBmbGVldGluZ3MpIHtcblx0XHRcdGNvbnN0IGZtID0gZS5maWxlLmZyb250bWF0dGVyO1xuXHRcdFx0ZS5maWxlLmZyb250bWF0dGVyLmNyZWF0ZWRBdCA9IHRoaXMuZnJvbnRtYXR0ZXIuZ2V0Q3JlYXRlZEF0KFxuXHRcdFx0XHRlLmZpbGUsXG5cdFx0XHQpO1xuXHRcdFx0bGV0IGZtanMgPSBudWxsO1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Zm1qcyA9IG5ldyBGcm9udG1hdHRlckpTKGUpO1xuXHRcdFx0fSBjYXRjaCAoVmFsaWRhdGlvbkVycm9yKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGUpO1xuXHRcdFx0XHRkdi5wYXJhZ3JhcGgoUmVuZGVyZXIubWFrZUxpbmsoZHYsIGUuZmlsZSkpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0Zm0ucHJvamVjdCA9IEhlbHBlci5nZXRQcm9qZWN0KGZtLCB0cnVlKTtcblx0XHRcdGZtLmRvbWFpbiA9IGBkb21haW4vJHtmbWpzLmdldERvbWFpbigpfWA7XG5cdFx0XHRmbS5jb21wb25lbnRzID0gSGVscGVyLmdldENvbXBvbmVudHMoZm0pO1xuXG5cdFx0XHRpZiAoZS5maWxlLnNpemUgPCBtaW5TaXplKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGUuZmlsZS5zaXplID4gbWF4U2l6ZSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0YnVmZi5wdXNoKGUpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGxvZ3MgPSBbXTtcblxuXHRcdGZvciAoY29uc3QgZSBvZiBsb2dzKSB7XG5cdFx0XHRjb25zdCBmbSA9IGUuZmlsZS5mcm9udG1hdHRlcjtcblx0XHRcdGZtLmNyZWF0ZWRBdCA9IHRoaXMuZnJvbnRtYXR0ZXIuZ2V0Q3JlYXRlZEF0KGUuZmlsZSk7XG5cdFx0XHRBc3NlcnQuVHJ1ZShcblx0XHRcdFx0IUhlbHBlci5uaWxDaGVjayhmbS5wYXJlbnRfaWQpLFxuXHRcdFx0XHRgTWlzc2luZyBmaWVsZCBcInBhcmVudF9pZFwiIGZyb20gbG9nOiBcIiR7Zm0udXVpZH1cImAsXG5cdFx0XHQpO1xuXHRcdFx0Y29uc3QgcGFyZW50ID0gdGhpcy5kdlxuXHRcdFx0XHQucGFnZXMoYFwiJHtQYXRocy5UYXNrc30vJHtmbS5wYXJlbnRfaWR9XCJgKVxuXHRcdFx0XHQuYXJyYXkoKTtcblx0XHRcdEFzc2VydC5UcnVlKFxuXHRcdFx0XHRwYXJlbnQubGVuZ3RoID09PSAxLFxuXHRcdFx0XHRgUGFyZW50OiAke2ZtLnBhcmVudF9pZH0gbm90IGZvdW5kIGZvciBsb2c6IFwiJHtmbS51dWlkfVwiYCxcblx0XHRcdCk7XG5cdFx0XHRmbS5wcm9qZWN0ID0gSGVscGVyLmdldFByb2plY3QocGFyZW50WzBdLmZpbGUuZnJvbnRtYXR0ZXIsIHRydWUpO1xuXHRcdFx0Zm0uZG9tYWluID0gdW5kZWZpbmVkO1xuXHRcdFx0Zm0uY29tcG9uZW50cyA9IFtdO1xuXG5cdFx0XHRpZiAoZS5maWxlLnNpemUgPCBtaW5TaXplKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGUuZmlsZS5zaXplID4gbWF4U2l6ZSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0YnVmZi5wdXNoKGUpO1xuXHRcdH1cblxuXHRcdGNvbnN0IHNvcnRCeVNpemVUaGVuRGF0ZSA9IGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdGNvbnN0IGZBID0gYS5maWxlO1xuXHRcdFx0Y29uc3QgZkIgPSBiLmZpbGU7XG5cdFx0XHRpZiAoZkEuc2l6ZSAhPT0gZkIuc2l6ZSkge1xuXHRcdFx0XHRyZXR1cm4gZkIuc2l6ZSAtIGZBLnNpemU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRcdGZBLmZyb250bWF0dGVyLmNyZWF0ZWRBdC5nZXRUaW1lKCkgLVxuXHRcdFx0XHRcdGZCLmZyb250bWF0dGVyLmNyZWF0ZWRBdC5nZXRUaW1lKClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Y29uc3Qgc29ydEJ5QWdlID0gKGEsIGIpID0+XG5cdFx0XHRhLmZpbGUuZnJvbnRtYXR0ZXIuY3JlYXRlZEF0LmdldFRpbWUoKSAtXG5cdFx0XHRiLmZpbGUuZnJvbnRtYXR0ZXIuY3JlYXRlZEF0LmdldFRpbWUoKTtcblxuXHRcdGJ1ZmYuc29ydChzb3J0QnlBZ2UpO1xuXHRcdHJzLnB1c2goW1wiYXJyYXlcIiwgUmVuZGVyZXIuaW5ib3hFbnRyeSwgYnVmZl0pO1xuXG5cdFx0cmV0dXJuIHJzO1xuXHR9XG5cblx0cHJvamVjdHMoKSB7XG5cdFx0Y29uc3QgcnMgPSBbXTtcblx0XHRjb25zdCBiaW5zID0ge1xuXHRcdFx0YWN0aXZlOiBbXSxcblx0XHRcdGluYWN0aXZlOiBbXSxcblx0XHR9O1xuXG5cdFx0Y29uc3QgcGFnZXMgPSB0aGlzLmR2LnBhZ2VzKGBcIlByb2plY3RzXCJgKS5zb3J0KChrKSA9PiBrLm5hbWUsIFwiYXNjXCIpO1xuXHRcdGZvciAoY29uc3QgcHJvamVjdCBvZiBwYWdlcykge1xuXHRcdFx0Y29uc3QgZm1Qcm9qZWN0ID0gbmV3IEZyb250bWF0dGVySlMocHJvamVjdCk7XG5cdFx0XHRpZiAoZm1Qcm9qZWN0LmZtLmFjdGl2ZSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0Ymlucy5pbmFjdGl2ZS5wdXNoKHByb2plY3QpO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH0gZWxzZSBpZiAoZm1Qcm9qZWN0LmdldE5hbWUoKSA9PT0gXCJhZGhvY1wiKSB7XG5cdFx0XHRcdGJpbnMuYWN0aXZlLnB1c2gocHJvamVjdCk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fSBlbHNlIGlmIChcblx0XHRcdFx0W1wieWVhcmx5XCIsIFwibW9udGhseVwiLCBcIndlZWtseVwiLCBcImRhaWx5XCJdLmNvbnRhaW5zKFxuXHRcdFx0XHRcdGZtUHJvamVjdC5nZXROYW1lKCksXG5cdFx0XHRcdClcblx0XHRcdCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgdGFza3MgPSB0aGlzLmR2XG5cdFx0XHRcdC5wYWdlcyhgI3Byb2plY3QvJHtmbVByb2plY3QuZ2V0TmFtZSgpfWApXG5cdFx0XHRcdC53aGVyZSgocGFnZSkgPT4ge1xuXHRcdFx0XHRcdGlmIChwYWdlLmZpbGUuZm9sZGVyICE9PSBgJHtQYXRocy5UYXNrc31gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29uc3QgZm1UYXNrID0gbmV3IEZyb250bWF0dGVySlMocGFnZSk7XG5cdFx0XHRcdFx0aWYgKGZtVGFzay5mbS5wcmlvcml0eSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdFtcInRvZG9cIiwgXCJkb2luZ1wiLCBcIndhaXRpbmdcIl0uY29udGFpbnMoZm1UYXNrLmZtLnN0YXR1cylcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdGlmICh0YXNrcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdGJpbnMuYWN0aXZlLnB1c2gocHJvamVjdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRiaW5zLmluYWN0aXZlLnB1c2gocHJvamVjdCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cnMucHVzaChbXCJoZWFkZXJcIiwgMiwgXCJBY3RpdmVcIl0pO1xuXHRcdHJzLnB1c2goW1wiYXJyYXlcIiwgUmVuZGVyZXIucHJvamVjdHMsIGJpbnMuYWN0aXZlXSk7XG5cdFx0cnMucHVzaChbXCJoZWFkZXJcIiwgMiwgXCJJbmFjdGl2ZVwiXSk7XG5cdFx0cnMucHVzaChbXCJhcnJheVwiLCBSZW5kZXJlci5wcm9qZWN0cywgYmlucy5pbmFjdGl2ZV0pO1xuXG5cdFx0cmV0dXJuIHJzO1xuXHR9XG5cblx0cHJheGlzKCkge1xuXHRcdGNvbnN0IHBhZ2VzID0gdGhpcy5kdlxuXHRcdFx0LnBhZ2VzKGBcIiR7UGF0aHMuVGFza3N9XCJgKVxuXHRcdFx0LndoZXJlKChwYWdlKSA9PiB7XG5cdFx0XHRcdGlmIChwYWdlLmZpbGUuZnJvbnRtYXR0ZXIudHlwZSAhPT0gVHlwZXMuUHJheGlzKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHBhZ2UuZmlsZS5mcm9udG1hdHRlci5zdGF0dXMgIT09IFN0YXR1cy5Ub2RvKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9KVxuXHRcdFx0LmFycmF5KCk7XG5cblx0XHRjb25zdCBycyA9IFtdO1xuXHRcdHJzLnB1c2goW1wiaGVhZGVyXCIsIDEsIFwiUHJheGlzXCJdKTtcblx0XHRycy5wdXNoKFtcImFycmF5XCIsIFJlbmRlcmVyLmJhc2ljVGFzaywgcGFnZXNdKTtcblxuXHRcdHJldHVybiBycztcblx0fVxuXG5cdHBsYW5uaW5nKGxhc3RXZWVrID0gMikge1xuXHRcdGNvbnN0IHJzID0gW107XG5cdFx0Y29uc3QgcGFnZXMgPSB0aGlzLmR2XG5cdFx0XHQucGFnZXMoYFwiJHtQYXRocy5UYXNrc31cImApXG5cdFx0XHQud2hlcmUoKHBhZ2UpID0+IHtcblx0XHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdFx0aWYgKGZtLmF0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZm0uZ2V0UHJvamVjdCgpICE9PSBcImRhaWx5XCIpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0pXG5cdFx0XHQuc29ydCgocGFnZSkgPT4gcGFnZS5maWxlLmZyb250bWF0dGVyLmF0LCBcImRlc2NcIik7XG5cblx0XHRjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuXHRcdC8vIGNvbnN0IG5vdyA9IG5ldyBEYXRlKFwiMjAyNC0xMi0zMVwiKTtcblx0XHRjb25zdCBiaW5zID0ge307XG5cdFx0Zm9yIChjb25zdCBwYWdlIG9mIHBhZ2VzKSB7XG5cdFx0XHRjb25zdCBmbSA9IG5ldyBGcm9udG1hdHRlckpTKHBhZ2UpO1xuXHRcdFx0bGV0IGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0YXQgPSBmbS5hdC50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKTtcblx0XHRcdH0gY2F0Y2gge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZGF0ZTogJyR7Zm0uZm0udXVpZH0nYCk7XG5cdFx0XHR9XG5cblxuXHRcdFx0Y29uc3Qgd2Vla051bWJlciA9IHRoaXMuZ2V0V2Vla051bWJlcjUoZm0uYXQpO1xuXHRcdFx0aWYgKGZtLmF0LmdldEZ1bGxZZWFyKCkgPCBub3cuZ2V0RnVsbFllYXIoKSkge1xuXHRcdFx0XHRpZiAod2Vla051bWJlciA+IDEpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Ly8gY29uc3Qgd2Vla051bWJlciA9IHRoaXMuZ2V0V2Vla051bWJlcihmbS5hdCk7XG5cdFx0XHRpZiAoYmluc1t3ZWVrTnVtYmVyXSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGJpbnNbd2Vla051bWJlcl0gPSBbZm1dO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ymluc1t3ZWVrTnVtYmVyXS5wdXNoKGZtKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCBjdXJyZW50V2Vla051bWJlciA9IHRoaXMuZ2V0V2Vla051bWJlcjUobm93KTtcblx0XHQvLyBjb25zdCBjdXJyZW50V2Vla051bWJlciA9IHRoaXMuZ2V0V2Vla051bWJlcihub3cpO1xuXHRcdGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGJpbnMpKSB7XG5cdFx0XHRjb25zdCB3ZWVrTnVtYmVyID0gTnVtYmVyKGtleSk7XG5cdFx0XHRpZiAod2Vla051bWJlciArIGxhc3RXZWVrIDwgY3VycmVudFdlZWtOdW1iZXIpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAod2Vla051bWJlciA8IGN1cnJlbnRXZWVrTnVtYmVyKSB7XG5cdFx0XHRcdHJzLnB1c2goW1wiaGVhZGVyXCIsIDIsIGB+fndlZWsgJHtrZXl9fn5gXSk7XG5cdFx0XHR9IGVsc2UgaWYgKHdlZWtOdW1iZXIgPT09IGN1cnJlbnRXZWVrTnVtYmVyKSB7XG5cdFx0XHRcdHJzLnB1c2goW1wiaGVhZGVyXCIsIDIsIGAqd2VlayAke2tleX0qYF0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cnMucHVzaChbXCJoZWFkZXJcIiwgMiwgYHdlZWsgJHtrZXl9YF0pO1xuXHRcdFx0fVxuXG5cdFx0XHRiaW5zW2tleV0uc29ydCgoYSwgYikgPT4ge1xuXHRcdFx0XHRyZXR1cm4gYS5hdC5nZXRUaW1lKCkgLSBiLmF0LmdldFRpbWUoKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRmb3IgKGNvbnN0IHRhc2sgb2YgYmluc1trZXldKSB7XG5cdFx0XHRcdGNvbnN0IGRheSA9IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXVtcblx0XHRcdFx0XHR0YXNrLmF0LmdldERheSgpXG5cdFx0XHRcdF07XG5cdFx0XHRcdGNvbnN0IHRleHQgPSBSZW5kZXJlci5tYWtlTGluayhcblx0XHRcdFx0XHR0aGlzLmR2LFxuXHRcdFx0XHRcdHRhc2suZixcblx0XHRcdFx0XHRgJHt0YXNrLmF0LnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApfSwgJHtkYXl9YCxcblx0XHRcdFx0XHRcIlRhc2tcIixcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRpZiAod2Vla051bWJlciA8IGN1cnJlbnRXZWVrTnVtYmVyKSB7XG5cdFx0XHRcdFx0cnMucHVzaChbXCJwYXJhZ3JhcGhcIiwgYH5+JHt0ZXh0fX5+YF0pO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHdlZWtOdW1iZXIgPT09IGN1cnJlbnRXZWVrTnVtYmVyKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMuZGF5T2ZZZWFyKHRhc2suYXQpIDwgdGhpcy5kYXlPZlllYXIobm93KSkge1xuXHRcdFx0XHRcdFx0cnMucHVzaChbXCJwYXJhZ3JhcGhcIiwgYH5+JHt0ZXh0fX5+YF0pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRycy5wdXNoKFtcInBhcmFncmFwaFwiLCBgJHt0ZXh0fWBdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cnMucHVzaChbXCJwYXJhZ3JhcGhcIiwgYCR7dGV4dH1gXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcnM7XG5cdH1cblxuXHRkYXlPZlllYXIoZHQpOiBudW1iZXIge1xuXHRcdGNvbnN0IHllYXIgPSBkdC5nZXRGdWxsWWVhcigpO1xuXHRcdGNvbnN0IG1vbnRoID0gZHQuZ2V0TW9udGgoKSArIDE7XG5cdFx0Y29uc3QgZGF5ID0gZHQuZ2V0RGF0ZSgpO1xuXG5cdFx0Y29uc3QgTjEgPSBNYXRoLmZsb29yKCgyNzUgKiBtb250aCkgLyA5KTtcblx0XHRjb25zdCBOMiA9IE1hdGguZmxvb3IoKG1vbnRoICsgOSkgLyAxMik7XG5cdFx0Y29uc3QgTjMgPSAxICsgTWF0aC5mbG9vcigoeWVhciAtIDQgKiBNYXRoLmZsb29yKHllYXIgLyA0KSArIDIpIC8gMyk7XG5cdFx0cmV0dXJuIE4xIC0gTjIgKiBOMyArIGRheSAtIDMwO1xuXHR9XG5cblx0Z2V0V2Vla051bWJlcihkKSB7XG5cdFx0Ly8gQ29weSBkYXRlIHNvIGRvbid0IG1vZGlmeSBvcmlnaW5hbFxuXHRcdGQgPSBuZXcgRGF0ZShEYXRlLlVUQyhkLmdldEZ1bGxZZWFyKCksIGQuZ2V0TW9udGgoKSwgZC5nZXREYXRlKCkpKTtcblx0XHQvLyBTZXQgdG8gbmVhcmVzdCBUaHVyc2RheTogY3VycmVudCBkYXRlICsgNCAtIGN1cnJlbnQgZGF5IG51bWJlclxuXHRcdC8vIE1ha2UgU3VuZGF5J3MgZGF5IG51bWJlciA3XG5cdFx0ZC5zZXRVVENEYXRlKGQuZ2V0VVRDRGF0ZSgpICsgNCAtIChkLmdldFVUQ0RheSgpIHx8IDcpKTtcblx0XHQvLyBHZXQgZmlyc3QgZGF5IG9mIHllYXJcblx0XHRjb25zdCB5ZWFyU3RhcnQ6IGFueSA9IG5ldyBEYXRlKERhdGUuVVRDKGQuZ2V0VVRDRnVsbFllYXIoKSwgMCwgMSkpO1xuXHRcdC8vIENhbGN1bGF0ZSBmdWxsIHdlZWtzIHRvIG5lYXJlc3QgVGh1cnNkYXlcblx0XHRyZXR1cm4gTWF0aC5jZWlsKCgoZCAtIHllYXJTdGFydCkgLyA4NjQwMDAwMCArIDEpIC8gNyk7XG5cdH1cblxuXHQvLyBodHRwczovL2NvZGVwZW4uaW8vbGRpamttYW4vcGVuL0xZZE5Kdk1cblx0Z2V0V2Vla051bWJlcjUoZHQpIHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0Y29uc3QgdGR0ID0gbmV3IERhdGUoZHQudmFsdWVPZigpKTtcblx0XHQvLyBjb25zdCBkYXluID0gKGR0LmdldERheSgpICsgNikgJSA3O1xuXHRcdGNvbnN0IGRheW4gPSBkdC5nZXREYXkoKTtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0dGR0LnNldERhdGUodGR0LmdldERhdGUoKSAtIGRheW4gKyAzKTtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0Y29uc3QgZmlyc3RUaHVyc2RheSA9IHRkdC52YWx1ZU9mKCk7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHRkdC5zZXRNb250aCgwLCAxKTtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0aWYgKHRkdC5nZXREYXkoKSAhPT0gNCkge1xuXHRcdFx0dGR0LnNldE1vbnRoKDAsIDEgKyAoKDQgLSB0ZHQuZ2V0RGF5KCkpICsgNykgJSA3KTtcblx0XHR9XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHJldHVybiAxICsgTWF0aC5jZWlsKChmaXJzdFRodXJzZGF5IC0gdGR0KSAvIDYwNDgwMDAwMCk7XG5cdH1cblxuXHRnZXRXZWVrTnVtYmVyNChkKSB7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGQgPSBuZXcgRGF0ZShEYXRlLlVUQyhkLmdldEZ1bGxZZWFyKCksIGQuZ2V0TW9udGgoKSwgZC5nZXREYXRlKCkpKTtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0Y29uc3QgeWVhclN0YXJ0ID0gbmV3IERhdGUoRGF0ZS5VVEMoZC5nZXRVVENGdWxsWWVhcigpLCAwLCAxKSk7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGNvbnN0IGZpcnN0U3VuZGF5ID1cblx0XHRcdHllYXJTdGFydC5nZXRVVENEYXkoKSA9PT0gMFxuXHRcdFx0XHQ/IHllYXJTdGFydFxuXHRcdFx0XHQ6IG5ldyBEYXRlKFxuXHRcdFx0XHRcdERhdGUuVVRDKFxuXHRcdFx0XHRcdFx0ZC5nZXRVVENGdWxsWWVhcigpLFxuXHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdDEgKyAoNyAtIHllYXJTdGFydC5nZXRVVENEYXkoKSksXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0KTtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0Y29uc3QgZGF5c1NpbmNlRmlyc3RTdW5kYXkgPSAoZCAtIGZpcnN0U3VuZGF5ICsgODY0MDAwMDApIC8gODY0MDAwMDA7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHJldHVybiBNYXRoLmNlaWwoZGF5c1NpbmNlRmlyc3RTdW5kYXkgLyA3KTtcblx0fVxuXG5cdGdldE1vbnRoKHllYXIsIHdlZWtOdW1iZXIpIHtcblx0XHQvLyBDcmVhdGUgYSBkYXRlIG9iamVjdCBmb3IgdGhlIGZpcnN0IGRheSBvZiB0aGUgeWVhclxuXHRcdGNvbnN0IGZpcnN0RGF5T2ZZZWFyID0gbmV3IERhdGUoeWVhciwgMCwgMSk7XG5cblx0XHQvLyBEZXRlcm1pbmUgdGhlIGRheSBvZiB0aGUgd2VlayBmb3IgdGhlIGZpcnN0IGRheSBvZiB0aGUgeWVhclxuXHRcdGNvbnN0IGZpcnN0RGF5T2ZXZWVrID0gZmlyc3REYXlPZlllYXIuZ2V0RGF5KCk7XG5cblx0XHQvLyBDYWxjdWxhdGUgdGhlIG51bWJlciBvZiBkYXlzIHRvIGFkZCB0byB0aGUgZmlyc3QgZGF5IG9mIHRoZSB5ZWFyXG5cdFx0Ly8gdG8gZ2V0IHRvIHRoZSBzdGFydCBvZiB0aGUgc3BlY2lmaWVkIHdlZWtcblx0XHQvLyBXZWVrcyBzdGFydCBvbiBNb25kYXk7IGlmIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHllYXIgaXMgYSBNb25kYXksXG5cdFx0Ly8gbm8gYWRqdXN0bWVudCBpcyBuZWVkZWQsIG90aGVyd2lzZSBhZGp1c3QgdG8gdGhlIG5leHQgTW9uZGF5XG5cdFx0Y29uc3QgZGF5c1RvQWRkID1cblx0XHRcdCh3ZWVrTnVtYmVyIC0gMSkgKiA3IC1cblx0XHRcdGZpcnN0RGF5T2ZXZWVrICtcblx0XHRcdChmaXJzdERheU9mV2VlayA9PT0gMCA/IDEgOiAwKTtcblxuXHRcdC8vIEFkanVzdCB0aGUgZGF0ZSB0byB0aGUgc3RhcnQgb2YgdGhlIHNwZWNpZmllZCB3ZWVrXG5cdFx0Y29uc3Qgd2Vla1N0YXJ0RGF0ZSA9IG5ldyBEYXRlKFxuXHRcdFx0Zmlyc3REYXlPZlllYXIuc2V0RGF0ZShmaXJzdERheU9mWWVhci5nZXREYXRlKCkgKyBkYXlzVG9BZGQpLFxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgd2Vla1N0YXJ0RGF0ZSBpcyBvbiB0aGUgbGFzdCBkYXkgb2YgdGhlIG1vbnRoLFxuXHRcdC8vIGlmIHNvLCBtb3ZlIHRvIHRoZSBuZXh0IG1vbnRoIHRvIHJvdW5kIHVwIGZvciBhIHdlZWsgdGhhdCBzcGFucyBhIG1vbnRoIHRyYW5zaXRpb25cblx0XHRpZiAod2Vla1N0YXJ0RGF0ZS5nZXREYXRlKCkgPiAyNCkge1xuXHRcdFx0d2Vla1N0YXJ0RGF0ZS5zZXREYXRlKHdlZWtTdGFydERhdGUuZ2V0RGF0ZSgpICsgNyk7XG5cdFx0fVxuXG5cdFx0Ly8gRXh0cmFjdCB0aGUgbW9udGggbnVtYmVyICgwLTExIGZvciBKYW4tRGVjKSBmcm9tIHRoZSB3ZWVrU3RhcnREYXRlXG5cdFx0Y29uc3QgbW9udGhOdW1iZXIgPSB3ZWVrU3RhcnREYXRlLmdldE1vbnRoKCk7XG5cblx0XHRyZXR1cm4gbW9udGhOdW1iZXIgKyAxOyAvLyBSZXR1cm4gbW9udGggbnVtYmVyICgxLTEyKVxuXHR9XG5cblx0Z2V0TW9udGhOYW1lKG1vbnRoTnVtYmVyKSB7XG5cdFx0Y29uc3QgZGF0ZSA9IG5ldyBEYXRlKDIwMDAsIG1vbnRoTnVtYmVyIC0gMSk7IC8vIFllYXIgMjAwMCBpcyB1c2VkIGFyYml0cmFyaWx5OyBhbnkgbm9uLWxlYXAgeWVhciB3aWxsIGRvXG5cdFx0cmV0dXJuIGRhdGUudG9Mb2NhbGVTdHJpbmcoXCJkZWZhdWx0XCIsIHsgbW9udGg6IFwibG9uZ1wiIH0pO1xuXHR9XG5cblx0ZW5lcmd5KGR2KSB7XG5cdFx0Y29uc3QgY3VycmVudCA9IGR2LmN1cnJlbnQoKTtcblx0XHRpZiAoY3VycmVudC5lbmVyZ3kgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y3VycmVudC5lbmVyZ3kgPSAwO1xuXHRcdH1cblx0XHRsZXQgY29tcCA9IHVuZGVmaW5lZDtcblx0XHRzd2l0Y2ggKGN1cnJlbnQub3ApIHtcblx0XHRcdGNhc2UgXCI+XCI6XG5cdFx0XHRcdGNvbXAgPSAoYSwgYikgPT4gYSA+IGI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcIj49XCI6XG5cdFx0XHRcdGNvbXAgPSAoYSwgYikgPT4gYSA+PSBiO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCI8XCI6XG5cdFx0XHRcdGNvbXAgPSAoYSwgYikgPT4gYSA8IGI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcIjw9XCI6XG5cdFx0XHRcdGNvbXAgPSAoYSwgYikgPT4gYSA8PSBiO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbXAgPSAoYSwgYikgPT4gYSA9PT0gYjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcnMgPSBbXTtcblx0XHRjb25zdCBwYWdlcyA9IGR2LnBhZ2VzKGBcIiR7UGF0aHMuVGFza3N9XCJgKS53aGVyZSgocGFnZSkgPT4ge1xuXHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdGlmIChmbS5nZXRQcm9qZWN0KCkgPT09IFwiZGFpbHlcIikge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChmbS5mbS5zdGF0dXMgIT09IFwidG9kb1wiKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNvbXAoZm0uZW5lcmd5LCBjdXJyZW50LmVuZXJneSk7XG5cdFx0fSk7XG5cblx0XHRycy5wdXNoKFtcblx0XHRcdFwiYXJyYXlcIixcblx0XHRcdChkdiwgZGF0YSkgPT4ge1xuXHRcdFx0XHRmb3IgKGNvbnN0IGVudHJ5IG9mIGRhdGEpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhlbnRyeSk7XG5cdFx0XHRcdFx0ZHYucGFyYWdyYXBoKFxuXHRcdFx0XHRcdFx0UmVuZGVyZXIubWFrZUxpbmtBbGlhcyhkdiwgZW50cnkuZmlsZSwgXCIjIyBUYXNrXCIpLFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRwYWdlcyxcblx0XHRdKTtcblxuXHRcdHJldHVybiBycztcblx0fVxuXG5cdG1hbmRhbGEoZHYpIHtcblx0XHRsZXQgbWFuZGFsYUxvID0gLTE7XG5cdFx0bGV0IG1hbmRhbGFIaSA9IC0xO1xuXHRcdGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG5cdFx0e1xuXHRcdFx0Y29uc3Qgd2Vla051bWJlciA9IHRoaXMuZ2V0V2Vla051bWJlcjQobm93KTtcblx0XHRcdG1hbmRhbGFMbyA9IHdlZWtOdW1iZXIgLSA2O1xuXHRcdFx0bWFuZGFsYUhpID0gd2Vla051bWJlciAtIDU7XG5cdFx0XHRpZiAobWFuZGFsYUxvIDwgMCB8fCBtYW5kYWxhSGkgPCAwKSB7XG5cdFx0XHRcdGR2LnBhcmFncmFwaChgd2Vla051bWJlcjogJHt3ZWVrTnVtYmVyfWApO1xuXHRcdFx0XHRkdi5wYXJhZ3JhcGgoYG1hbmRhbGFMbzogJHttYW5kYWxhTG99YCk7XG5cdFx0XHRcdGR2LnBhcmFncmFwaChgbWFuZGFsYUhpOiAke21hbmRhbGFIaX1gKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0ZHYucGFyYWdyYXBoKGB3ZWVrTnVtYmVyOiAke3dlZWtOdW1iZXJ9YCk7XG5cdFx0XHRkdi5wYXJhZ3JhcGgoYG1hbmRhbGFMbzogJHttYW5kYWxhTG99YCk7XG5cdFx0XHRkdi5wYXJhZ3JhcGgoYG1hbmRhbGFIaTogJHttYW5kYWxhSGl9YCk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcnMgPSBbXTtcblx0XHRjb25zdCBiaW5zID0ge307XG5cdFx0Y29uc3Qgc3VpdmlXZWVrbHkgPSB7fTtcblx0XHRjb25zdCBzdWl2aU1vbnRobHkgPSB7fTtcblx0XHRjb25zdCBzdWl2aVllYXJseSA9IHt9O1xuXHRcdGNvbnN0IHBhZ2VzID0gdGhpcy5kdlxuXHRcdFx0LnBhZ2VzKGBcIkpvdXJuYWxcImApXG5cdFx0XHQud2hlcmUoKHBhZ2UpID0+IHtcblx0XHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdFx0Y29uc3Qgd2Vla051bWJlciA9IHRoaXMuZ2V0V2Vla051bWJlcjQoZm0uY3JlYXRlZEF0KTtcblx0XHRcdFx0Y29uc29sZS5sb2cod2Vla051bWJlcik7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHR3ZWVrTnVtYmVyID49IG1hbmRhbGFMbyAmJlxuXHRcdFx0XHRcdHdlZWtOdW1iZXIgPD0gbWFuZGFsYUhpICYmXG5cdFx0XHRcdFx0Zm0uY3JlYXRlZEF0LmdldEZ1bGxZZWFyKCkgPT09IG5vdy5nZXRGdWxsWWVhcigpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSlcblx0XHRcdC5zb3J0KChwYWdlKSA9PiBwYWdlLmZpbGUuZnJvbnRtYXR0ZXIuY3JlYXRlZF9hdCwgXCJkZXNjXCIpO1xuXHRcdGNvbnNvbGUubG9nKHBhZ2VzLmxlbmd0aCk7XG5cblx0XHRmb3IgKGNvbnN0IHBhZ2Ugb2YgcGFnZXMpIHtcblx0XHRcdGNvbnN0IGZtID0gbmV3IEZyb250bWF0dGVySlMocGFnZSk7XG5cdFx0XHQvLyBjb25zdCB3ZWVrTnVtYmVyID0gdGhpcy5nZXRXZWVrTnVtYmVyKGZtLmNyZWF0ZWRBdCk7XG5cdFx0XHRjb25zdCB3ZWVrTnVtYmVyID0gdGhpcy5nZXRXZWVrTnVtYmVyNChmbS5jcmVhdGVkQXQpO1xuXHRcdFx0Y29uc3QgeWVhciA9IGZtLmNyZWF0ZWRBdC5nZXRGdWxsWWVhcigpO1xuXHRcdFx0Y29uc3QgbW9udGggPSBmbS5jcmVhdGVkQXQuZ2V0TW9udGgoKSArIDE7XG5cblx0XHRcdGxldCBtc2cgPSBcIlwiO1xuXHRcdFx0bXNnICs9IGBjcmVhdGVkQXQ6ICR7Zm0uY3JlYXRlZEF0LnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApfVxcbmA7XG5cdFx0XHRtc2cgKz0gYHdlZWtOdW1iZXI6ICR7d2Vla051bWJlcn1cXG5gO1xuXHRcdFx0bXNnICs9IGB5ZWFyOiAke3llYXJ9XFxuYDtcblx0XHRcdG1zZyArPSBgbW9udGg6ICR7bW9udGh9XFxuYDtcblx0XHRcdG1zZyArPSBgZGF5OiAke2ZtLmNyZWF0ZWRBdC5nZXREYXkoKX1cXG5gO1xuXHRcdFx0Y29uc3QgZGF5ID0gW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdW1xuXHRcdFx0XHRmbS5jcmVhdGVkQXQuZ2V0RGF5KClcblx0XHRcdF07XG5cdFx0XHRtc2cgKz0gYGRheTogJHtkYXl9XFxuYDtcblxuXHRcdFx0Y29uc29sZS5sb2cobXNnKTtcblxuXHRcdFx0aWYgKGJpbnNbeWVhcl0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRiaW5zW3llYXJdID0ge307XG5cdFx0XHR9XG5cdFx0XHRpZiAoYmluc1t5ZWFyXVt3ZWVrTnVtYmVyLnRvU3RyaW5nKCldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Ymluc1t5ZWFyXVt3ZWVrTnVtYmVyLnRvU3RyaW5nKCldID0ge307XG5cdFx0XHR9XG5cdFx0XHRpZiAoc3VpdmlNb250aGx5W3llYXJdID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0c3VpdmlNb250aGx5W3llYXJdID0ge307XG5cdFx0XHR9XG5cdFx0XHRpZiAoc3VpdmlXZWVrbHlbeWVhcl0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRzdWl2aVdlZWtseVt5ZWFyXSA9IHt9O1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgdGFnID0gXCJcIjtcblx0XHRcdGlmIChmbS5nZXREb21haW4oKSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRhZyA9IGZtLmdldERvbWFpbigpO1xuXHRcdFx0fSBlbHNlIGlmIChmbS5nZXRQcm9qZWN0KCkgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0YWcgPSBmbS5nZXRQcm9qZWN0KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0YWcgPSBcImFkaG9jXCI7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0YWcgPT0gXCJ3ZWVrbHlcIikge1xuXHRcdFx0XHRpZiAoc3VpdmlXZWVrbHlbeWVhcl1bd2Vla051bWJlcl0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHN1aXZpV2Vla2x5W3llYXJdW3dlZWtOdW1iZXJdID0gW3BhZ2VdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN1aXZpV2Vla2x5W3llYXJdW3dlZWtOdW1iZXJdLnB1c2gocGFnZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9IGVsc2UgaWYgKHRhZyA9PT0gXCJtb250aGx5XCIpIHtcblx0XHRcdFx0aWYgKHN1aXZpTW9udGhseVt5ZWFyXVttb250aF0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHN1aXZpTW9udGhseVt5ZWFyXVttb250aF0gPSBbcGFnZV07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3VpdmlNb250aGx5W3llYXJdW21vbnRoXS5wdXNoKHBhZ2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fSBlbHNlIGlmICh0YWcgPT09IFwieWVhcmx5XCIpIHtcblx0XHRcdFx0aWYgKHN1aXZpWWVhcmx5W3llYXJdID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRzdWl2aVllYXJseVt5ZWFyXSA9IFtwYWdlXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdWl2aVllYXJseVt5ZWFyXS5wdXNoKHBhZ2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoYmluc1t5ZWFyXVt3ZWVrTnVtYmVyXVt0YWddID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Ymluc1t5ZWFyXVt3ZWVrTnVtYmVyXVt0YWddID0gW3BhZ2VdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ymluc1t5ZWFyXVt3ZWVrTnVtYmVyXVt0YWddLnB1c2gocGFnZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0e1xuXHRcdFx0Y29uc3QgeWVhcnMgPSBPYmplY3Qua2V5cyhiaW5zKTtcblx0XHRcdGxldCBsYXN0WWVhciA9IDk5OTk7XG5cdFx0XHRsZXQgbGFzdE1vbnRoID0gMTM7XG5cdFx0XHR5ZWFycy5zb3J0KCkucmV2ZXJzZSgpO1xuXG5cdFx0XHRmb3IgKGNvbnN0IHllYXIgb2YgeWVhcnMpIHtcblx0XHRcdFx0cnMucHVzaChbXCJoZWFkZXJcIiwgMiwgeWVhcl0pO1xuXG5cdFx0XHRcdGlmIChwYXJzZUludCh5ZWFyLCAxMCkgPCBsYXN0WWVhcikge1xuXHRcdFx0XHRcdGxhc3RNb250aCA9IDEzO1xuXHRcdFx0XHRcdGxhc3RZZWFyID0gcGFyc2VJbnQoeWVhciwgMTApO1xuXHRcdFx0XHRcdGlmIChzdWl2aVllYXJseVt5ZWFyXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRmb3IgKGNvbnN0IHBhZ2Ugb2Ygc3VpdmlZZWFybHlbeWVhcl0pIHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdFx0XHRcdFx0cnMucHVzaChbXG5cdFx0XHRcdFx0XHRcdFx0XCJwYXJhZ3JhcGhcIixcblx0XHRcdFx0XHRcdFx0XHRSZW5kZXJlci5tYWtlTGlua0FsaWFzKHRoaXMuZHYsIGZtLmYpLFxuXHRcdFx0XHRcdFx0XHRdKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKGxldCB3ZWVrID0gNTI7IHdlZWsgPiAwOyB3ZWVrLS0pIHtcblx0XHRcdFx0XHRjb25zdCB0aGlzTW9udGggPSB0aGlzLmdldE1vbnRoKHllYXIsIHdlZWspO1xuXG5cdFx0XHRcdFx0aWYgKHN1aXZpTW9udGhseVt5ZWFyXVt0aGlzTW9udGhdICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdGlmIChsYXN0TW9udGggIT09IHRoaXNNb250aCkge1xuXHRcdFx0XHRcdFx0XHRsYXN0TW9udGggPSB0aGlzTW9udGg7XG5cdFx0XHRcdFx0XHRcdHJzLnB1c2goW1xuXHRcdFx0XHRcdFx0XHRcdFwiaGVhZGVyXCIsXG5cdFx0XHRcdFx0XHRcdFx0Myxcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmdldE1vbnRoTmFtZShsYXN0TW9udGgpLFxuXHRcdFx0XHRcdFx0XHRdKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoc3VpdmlNb250aGx5W3llYXJdW3RoaXNNb250aF0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0XHRcdGZvciAoY29uc3QgcGFnZSBvZiBzdWl2aU1vbnRobHlbeWVhcl1bXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzTW9udGhcblx0XHRcdFx0XHRcdFx0XHRdKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBmbSA9IG5ldyBGcm9udG1hdHRlckpTKHBhZ2UpO1xuXHRcdFx0XHRcdFx0XHRcdFx0cnMucHVzaChbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFwicGFyYWdyYXBoXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFJlbmRlcmVyLm1ha2VMaW5rQWxpYXModGhpcy5kdiwgZm0uZiksXG5cdFx0XHRcdFx0XHRcdFx0XHRdKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0XHRzdWl2aVdlZWtseVt5ZWFyXVt3ZWVrXSA9PT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdFx0XHRiaW5zW3llYXJdW3dlZWtdID09PSB1bmRlZmluZWRcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJzLnB1c2goW1wiaGVhZGVyXCIsIDQsIGB3ZWVrICR7d2Vlay50b1N0cmluZygpfWBdKTtcblx0XHRcdFx0XHRpZiAoc3VpdmlXZWVrbHlbeWVhcl1bd2Vla10gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0Zm9yIChjb25zdCBwYWdlIG9mIHN1aXZpV2Vla2x5W3llYXJdW3dlZWtdKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGZtID0gbmV3IEZyb250bWF0dGVySlMocGFnZSk7XG5cdFx0XHRcdFx0XHRcdHJzLnB1c2goW1xuXHRcdFx0XHRcdFx0XHRcdFwicGFyYWdyYXBoXCIsXG5cdFx0XHRcdFx0XHRcdFx0UmVuZGVyZXIubWFrZUxpbmtBbGlhcyh0aGlzLmR2LCBmbS5mKSxcblx0XHRcdFx0XHRcdFx0XSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGJpbnNbeWVhcl1bd2Vla10gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gZG9tYWluID4gcHJvamVjdFxuXHRcdFx0XHRcdGNvbnN0IHRhZ3MgPSBPYmplY3Qua2V5cyhiaW5zW3llYXJdW3dlZWtdKTtcblx0XHRcdFx0XHR0YWdzLnNvcnQoKTtcblxuXHRcdFx0XHRcdGZvciAoY29uc3QgdGFnIG9mIHRhZ3MpIHtcblx0XHRcdFx0XHRcdHJzLnB1c2goW1wiaGVhZGVyXCIsIDUsIHRhZ10pO1xuXHRcdFx0XHRcdFx0Ymluc1t5ZWFyXVt3ZWVrXVt0YWddLnNvcnQoKGEsIGIpID0+IHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgZm1BID0gbmV3IEZyb250bWF0dGVySlMoYSk7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGZtQiA9IG5ldyBGcm9udG1hdHRlckpTKGIpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRcdFx0XHRcdGZtQi5jcmVhdGVkQXQuZ2V0VGltZSgpIC1cblx0XHRcdFx0XHRcdFx0XHRmbUEuY3JlYXRlZEF0LmdldFRpbWUoKVxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRcdGZvciAoY29uc3QgcGFnZSBvZiBiaW5zW3llYXJdW3dlZWtdW3RhZ10pIHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdFx0XHRcdFx0aWYgKGZtLnR5cGUgPT09IDYpIHtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBkID0gZm0uY3JlYXRlZEF0XG5cdFx0XHRcdFx0XHRcdFx0XHQudG9JU09TdHJpbmcoKVxuXHRcdFx0XHRcdFx0XHRcdFx0LnNsaWNlKDAsIDEwKTtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBkYXkgPSBbXG5cdFx0XHRcdFx0XHRcdFx0XHRcIlN1blwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XCJNb25cIixcblx0XHRcdFx0XHRcdFx0XHRcdFwiVHVlXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcIldlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XCJUaHVcIixcblx0XHRcdFx0XHRcdFx0XHRcdFwiRnJpXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcIlNhdFwiLFxuXHRcdFx0XHRcdFx0XHRcdF1bZm0uY3JlYXRlZEF0LmdldERheSgpXTtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCB0ZXh0ID0gYCR7ZH0sICR7ZGF5fWA7XG5cdFx0XHRcdFx0XHRcdFx0cnMucHVzaChbXG5cdFx0XHRcdFx0XHRcdFx0XHRcInBhcmFncmFwaFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0UmVuZGVyZXIubWFrZUxpbmsodGhpcy5kdiwgZm0uZiwgdGV4dCksXG5cdFx0XHRcdFx0XHRcdFx0XSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcnM7XG5cdH1cblxuXHRqb3VybmFsKCkge1xuXHRcdGNvbnN0IHJzID0gW107XG5cdFx0Y29uc3QgYmlucyA9IHt9O1xuXHRcdGNvbnN0IHN1aXZpV2Vla2x5ID0ge307XG5cdFx0Y29uc3Qgc3VpdmlNb250aGx5ID0ge307XG5cdFx0Y29uc3Qgc3VpdmlZZWFybHkgPSB7fTtcblx0XHRjb25zdCBwYWdlcyA9IHRoaXMuZHZcblx0XHRcdC5wYWdlcyhgXCJKb3VybmFsXCJgKVxuXHRcdFx0LnNvcnQoKHBhZ2UpID0+IHBhZ2UuZmlsZS5mcm9udG1hdHRlci5jcmVhdGVkX2F0LCBcImRlc2NcIik7XG5cblx0XHRmb3IgKGNvbnN0IHBhZ2Ugb2YgcGFnZXMpIHtcblx0XHRcdGNvbnN0IGZtID0gbmV3IEZyb250bWF0dGVySlMocGFnZSk7XG5cdFx0XHQvLyBjb25zdCB3ZWVrTnVtYmVyID0gdGhpcy5nZXRXZWVrTnVtYmVyKGZtLmNyZWF0ZWRBdCk7XG5cdFx0XHRjb25zdCB3ZWVrTnVtYmVyID0gdGhpcy5nZXRXZWVrTnVtYmVyNChmbS5jcmVhdGVkQXQpO1xuXHRcdFx0Y29uc3QgeWVhciA9IGZtLmNyZWF0ZWRBdC5nZXRGdWxsWWVhcigpO1xuXHRcdFx0Y29uc3QgbW9udGggPSBmbS5jcmVhdGVkQXQuZ2V0TW9udGgoKSArIDE7XG5cblx0XHRcdGxldCBtc2cgPSBcIlwiO1xuXHRcdFx0bXNnICs9IGBjcmVhdGVkQXQ6ICR7Zm0uY3JlYXRlZEF0LnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApfVxcbmA7XG5cdFx0XHRtc2cgKz0gYHdlZWtOdW1iZXI6ICR7d2Vla051bWJlcn1cXG5gO1xuXHRcdFx0bXNnICs9IGB5ZWFyOiAke3llYXJ9XFxuYDtcblx0XHRcdG1zZyArPSBgbW9udGg6ICR7bW9udGh9XFxuYDtcblx0XHRcdG1zZyArPSBgZGF5OiAke2ZtLmNyZWF0ZWRBdC5nZXREYXkoKX1cXG5gO1xuXHRcdFx0Y29uc3QgZGF5ID0gW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdW1xuXHRcdFx0XHRmbS5jcmVhdGVkQXQuZ2V0RGF5KClcblx0XHRcdF07XG5cdFx0XHRtc2cgKz0gYGRheTogJHtkYXl9XFxuYDtcblxuXHRcdFx0Ly8gY29uc29sZS5sb2cobXNnKTtcblxuXHRcdFx0aWYgKGJpbnNbeWVhcl0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRiaW5zW3llYXJdID0ge307XG5cdFx0XHR9XG5cdFx0XHRpZiAoYmluc1t5ZWFyXVt3ZWVrTnVtYmVyLnRvU3RyaW5nKCldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Ymluc1t5ZWFyXVt3ZWVrTnVtYmVyLnRvU3RyaW5nKCldID0ge307XG5cdFx0XHR9XG5cdFx0XHRpZiAoc3VpdmlNb250aGx5W3llYXJdID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0c3VpdmlNb250aGx5W3llYXJdID0ge307XG5cdFx0XHR9XG5cdFx0XHRpZiAoc3VpdmlXZWVrbHlbeWVhcl0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRzdWl2aVdlZWtseVt5ZWFyXSA9IHt9O1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgdGFnID0gXCJcIjtcblx0XHRcdGlmIChmbS5nZXREb21haW4oKSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRhZyA9IGZtLmdldERvbWFpbigpO1xuXHRcdFx0fSBlbHNlIGlmIChmbS5nZXRQcm9qZWN0KCkgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0YWcgPSBmbS5nZXRQcm9qZWN0KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0YWcgPSBcImFkaG9jXCI7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0YWcgPT0gXCJ3ZWVrbHlcIikge1xuXHRcdFx0XHRpZiAoc3VpdmlXZWVrbHlbeWVhcl1bd2Vla051bWJlcl0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHN1aXZpV2Vla2x5W3llYXJdW3dlZWtOdW1iZXJdID0gW3BhZ2VdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN1aXZpV2Vla2x5W3llYXJdW3dlZWtOdW1iZXJdLnB1c2gocGFnZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9IGVsc2UgaWYgKHRhZyA9PT0gXCJtb250aGx5XCIpIHtcblx0XHRcdFx0aWYgKHN1aXZpTW9udGhseVt5ZWFyXVttb250aF0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHN1aXZpTW9udGhseVt5ZWFyXVttb250aF0gPSBbcGFnZV07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3VpdmlNb250aGx5W3llYXJdW21vbnRoXS5wdXNoKHBhZ2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fSBlbHNlIGlmICh0YWcgPT09IFwieWVhcmx5XCIpIHtcblx0XHRcdFx0aWYgKHN1aXZpWWVhcmx5W3llYXJdID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRzdWl2aVllYXJseVt5ZWFyXSA9IFtwYWdlXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdWl2aVllYXJseVt5ZWFyXS5wdXNoKHBhZ2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoYmluc1t5ZWFyXVt3ZWVrTnVtYmVyXVt0YWddID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Ymluc1t5ZWFyXVt3ZWVrTnVtYmVyXVt0YWddID0gW3BhZ2VdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ymluc1t5ZWFyXVt3ZWVrTnVtYmVyXVt0YWddLnB1c2gocGFnZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0e1xuXHRcdFx0Y29uc3QgeWVhcnMgPSBPYmplY3Qua2V5cyhiaW5zKTtcblx0XHRcdGxldCBsYXN0WWVhciA9IDk5OTk7XG5cdFx0XHRsZXQgbGFzdE1vbnRoID0gMTM7XG5cdFx0XHR5ZWFycy5zb3J0KCkucmV2ZXJzZSgpO1xuXG5cdFx0XHRmb3IgKGNvbnN0IHllYXIgb2YgeWVhcnMpIHtcblx0XHRcdFx0cnMucHVzaChbXCJoZWFkZXJcIiwgMiwgeWVhcl0pO1xuXG5cdFx0XHRcdGlmIChwYXJzZUludCh5ZWFyLCAxMCkgPCBsYXN0WWVhcikge1xuXHRcdFx0XHRcdGxhc3RNb250aCA9IDEzO1xuXHRcdFx0XHRcdGxhc3RZZWFyID0gcGFyc2VJbnQoeWVhciwgMTApO1xuXHRcdFx0XHRcdGlmIChzdWl2aVllYXJseVt5ZWFyXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRmb3IgKGNvbnN0IHBhZ2Ugb2Ygc3VpdmlZZWFybHlbeWVhcl0pIHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdFx0XHRcdFx0cnMucHVzaChbXG5cdFx0XHRcdFx0XHRcdFx0XCJwYXJhZ3JhcGhcIixcblx0XHRcdFx0XHRcdFx0XHRSZW5kZXJlci5tYWtlTGlua0FsaWFzKHRoaXMuZHYsIGZtLmYpLFxuXHRcdFx0XHRcdFx0XHRdKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKGxldCB3ZWVrID0gNTI7IHdlZWsgPiAwOyB3ZWVrLS0pIHtcblx0XHRcdFx0XHRjb25zdCB0aGlzTW9udGggPSB0aGlzLmdldE1vbnRoKHllYXIsIHdlZWspO1xuXG5cdFx0XHRcdFx0aWYgKHN1aXZpTW9udGhseVt5ZWFyXVt0aGlzTW9udGhdICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdGlmIChsYXN0TW9udGggIT09IHRoaXNNb250aCkge1xuXHRcdFx0XHRcdFx0XHRsYXN0TW9udGggPSB0aGlzTW9udGg7XG5cdFx0XHRcdFx0XHRcdHJzLnB1c2goW1xuXHRcdFx0XHRcdFx0XHRcdFwiaGVhZGVyXCIsXG5cdFx0XHRcdFx0XHRcdFx0Myxcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmdldE1vbnRoTmFtZShsYXN0TW9udGgpLFxuXHRcdFx0XHRcdFx0XHRdKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoc3VpdmlNb250aGx5W3llYXJdW3RoaXNNb250aF0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0XHRcdGZvciAoY29uc3QgcGFnZSBvZiBzdWl2aU1vbnRobHlbeWVhcl1bXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzTW9udGhcblx0XHRcdFx0XHRcdFx0XHRdKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBmbSA9IG5ldyBGcm9udG1hdHRlckpTKHBhZ2UpO1xuXHRcdFx0XHRcdFx0XHRcdFx0cnMucHVzaChbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFwicGFyYWdyYXBoXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFJlbmRlcmVyLm1ha2VMaW5rQWxpYXModGhpcy5kdiwgZm0uZiksXG5cdFx0XHRcdFx0XHRcdFx0XHRdKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0XHRzdWl2aVdlZWtseVt5ZWFyXVt3ZWVrXSA9PT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdFx0XHRiaW5zW3llYXJdW3dlZWtdID09PSB1bmRlZmluZWRcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJzLnB1c2goW1wiaGVhZGVyXCIsIDQsIGB3ZWVrICR7d2Vlay50b1N0cmluZygpfWBdKTtcblx0XHRcdFx0XHRpZiAoc3VpdmlXZWVrbHlbeWVhcl1bd2Vla10gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0Zm9yIChjb25zdCBwYWdlIG9mIHN1aXZpV2Vla2x5W3llYXJdW3dlZWtdKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGZtID0gbmV3IEZyb250bWF0dGVySlMocGFnZSk7XG5cdFx0XHRcdFx0XHRcdHJzLnB1c2goW1xuXHRcdFx0XHRcdFx0XHRcdFwicGFyYWdyYXBoXCIsXG5cdFx0XHRcdFx0XHRcdFx0UmVuZGVyZXIubWFrZUxpbmtBbGlhcyh0aGlzLmR2LCBmbS5mKSxcblx0XHRcdFx0XHRcdFx0XSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGJpbnNbeWVhcl1bd2Vla10gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gZG9tYWluID4gcHJvamVjdFxuXHRcdFx0XHRcdGNvbnN0IHRhZ3MgPSBPYmplY3Qua2V5cyhiaW5zW3llYXJdW3dlZWtdKTtcblx0XHRcdFx0XHR0YWdzLnNvcnQoKTtcblxuXHRcdFx0XHRcdGZvciAoY29uc3QgdGFnIG9mIHRhZ3MpIHtcblx0XHRcdFx0XHRcdHJzLnB1c2goW1wiaGVhZGVyXCIsIDUsIHRhZ10pO1xuXHRcdFx0XHRcdFx0Ymluc1t5ZWFyXVt3ZWVrXVt0YWddLnNvcnQoKGEsIGIpID0+IHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgZm1BID0gbmV3IEZyb250bWF0dGVySlMoYSk7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGZtQiA9IG5ldyBGcm9udG1hdHRlckpTKGIpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRcdFx0XHRcdGZtQi5jcmVhdGVkQXQuZ2V0VGltZSgpIC1cblx0XHRcdFx0XHRcdFx0XHRmbUEuY3JlYXRlZEF0LmdldFRpbWUoKVxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRcdGZvciAoY29uc3QgcGFnZSBvZiBiaW5zW3llYXJdW3dlZWtdW3RhZ10pIHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdFx0XHRcdFx0aWYgKGZtLnR5cGUgPT09IDYpIHtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBkID0gZm0uY3JlYXRlZEF0XG5cdFx0XHRcdFx0XHRcdFx0XHQudG9JU09TdHJpbmcoKVxuXHRcdFx0XHRcdFx0XHRcdFx0LnNsaWNlKDAsIDEwKTtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBkYXkgPSBbXG5cdFx0XHRcdFx0XHRcdFx0XHRcIlN1blwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XCJNb25cIixcblx0XHRcdFx0XHRcdFx0XHRcdFwiVHVlXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcIldlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XCJUaHVcIixcblx0XHRcdFx0XHRcdFx0XHRcdFwiRnJpXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcIlNhdFwiLFxuXHRcdFx0XHRcdFx0XHRcdF1bZm0uY3JlYXRlZEF0LmdldERheSgpXTtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCB0ZXh0ID0gYCR7ZH0sICR7ZGF5fWA7XG5cdFx0XHRcdFx0XHRcdFx0cnMucHVzaChbXG5cdFx0XHRcdFx0XHRcdFx0XHRcInBhcmFncmFwaFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0UmVuZGVyZXIubWFrZUxpbmsodGhpcy5kdiwgZm0uZiwgdGV4dCksXG5cdFx0XHRcdFx0XHRcdFx0XSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcnM7XG5cdH1cblxuXHRjYWxlbmRhcigpIHtcblx0XHRjb25zdCBycyA9IFtdO1xuXHRcdGNvbnN0IGJpbnMgPSB7fTtcblx0XHRjb25zdCBwYWdlcyA9IHRoaXMuZHYucGFnZXMoYFwiJHtQYXRocy5UYXNrc31cImApLndoZXJlKChwYWdlKSA9PiB7XG5cdFx0XHRjb25zdCBmbSA9IG5ldyBGcm9udG1hdHRlckpTKHBhZ2UpO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRmbS5mbS5hdCA9PT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdGZtLmZtLmJlZm9yZSA9PT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdGZtLmZtLmFmdGVyID09PSB1bmRlZmluZWRcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChmbS5mbS5zdGF0dXMgIT09IFwidG9kb1wiKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGZtLmdldFByb2plY3QoKSA9PT0gXCJkYWlseVwiKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSk7XG5cblx0XHRmb3IgKGNvbnN0IHBhZ2Ugb2YgcGFnZXMpIHtcblx0XHRcdGNvbnN0IGZtID0gbmV3IEZyb250bWF0dGVySlMocGFnZSk7XG5cdFx0XHRsZXQgeWVhciA9IDA7XG5cdFx0XHRsZXQgbW9udGggPSAwO1xuXHRcdFx0bGV0IGRheSA9IDA7XG5cblx0XHRcdGlmIChmbS5mbS5iZWZvcmUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR5ZWFyID0gZm0uYmVmb3JlLmdldEZ1bGxZZWFyKCk7XG5cdFx0XHRcdG1vbnRoID0gZm0uYmVmb3JlLmdldE1vbnRoKCk7XG5cdFx0XHRcdGRheSA9IGZtLmJlZm9yZS5nZXRVVENEYXRlKCk7XG5cdFx0XHR9IGVsc2UgaWYgKGZtLmZtLmF0ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0eWVhciA9IGZtLmF0LmdldEZ1bGxZZWFyKCk7XG5cdFx0XHRcdG1vbnRoID0gZm0uYXQuZ2V0TW9udGgoKTtcblx0XHRcdFx0ZGF5ID0gZm0uYXQuZ2V0VVRDRGF0ZSgpO1xuXHRcdFx0fSBlbHNlIGlmIChmbS5hZnRlciAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHllYXIgPSBmbS5hZnRlci5nZXRGdWxsWWVhcigpO1xuXHRcdFx0XHRtb250aCA9IGZtLmFmdGVyLmdldE1vbnRoKCk7XG5cdFx0XHRcdGRheSA9IGZtLmFmdGVyLmdldFVUQ0RhdGUoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcigpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoYmluc1t5ZWFyXSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGJpbnNbeWVhcl0gPSB7fTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGJpbnNbeWVhcl1bbW9udGhdID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Ymluc1t5ZWFyXVttb250aF0gPSB7fTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGJpbnNbeWVhcl1bbW9udGhdW2RheV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRiaW5zW3llYXJdW21vbnRoXVtkYXldID0ge307XG5cdFx0XHR9XG5cblx0XHRcdGlmIChiaW5zW3llYXJdW21vbnRoXVtkYXldW1wiYXRcIl0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRiaW5zW3llYXJdW21vbnRoXVtkYXldW1wiYXRcIl0gPSBbXTtcblx0XHRcdH1cblx0XHRcdGlmIChiaW5zW3llYXJdW21vbnRoXVtkYXldW1wiYmVmb3JlXCJdID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Ymluc1t5ZWFyXVttb250aF1bZGF5XVtcImJlZm9yZVwiXSA9IFtdO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGJpbnNbeWVhcl1bbW9udGhdW2RheV1bXCJhZnRlclwiXSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGJpbnNbeWVhcl1bbW9udGhdW2RheV1bXCJhZnRlclwiXSA9IFtdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZm0uZm0uYmVmb3JlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Ymluc1t5ZWFyXVttb250aF1bZGF5XVtcImJlZm9yZVwiXS5wdXNoKHBhZ2UpO1xuXHRcdFx0fSBlbHNlIGlmIChmbS5mbS5hdCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGJpbnNbeWVhcl1bbW9udGhdW2RheV1bXCJhdFwiXS5wdXNoKHBhZ2UpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ymluc1t5ZWFyXVttb250aF1bZGF5XVtcImFmdGVyXCJdLnB1c2gocGFnZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0e1xuXHRcdFx0Y29uc3QgeWVhcnMgPSBPYmplY3Qua2V5cyhiaW5zKTtcblx0XHRcdHllYXJzLnNvcnQoKGEsIGIpID0+IHBhcnNlSW50KGEpIC0gcGFyc2VJbnQoYikpO1xuXG5cdFx0XHRmb3IgKGNvbnN0IHllYXIgb2YgeWVhcnMpIHtcblx0XHRcdFx0cnMucHVzaChbXCJoZWFkZXJcIiwgMiwgeWVhcl0pO1xuXHRcdFx0XHRjb25zdCBtb250aHMgPSBPYmplY3Qua2V5cyhiaW5zW3llYXJdKTtcblx0XHRcdFx0bW9udGhzLnNvcnQoKGEsIGIpID0+IHBhcnNlSW50KGEpIC0gcGFyc2VJbnQoYikpO1xuXHRcdFx0XHRmb3IgKGNvbnN0IG1vbnRoIG9mIG1vbnRocykge1xuXHRcdFx0XHRcdHJzLnB1c2goW1xuXHRcdFx0XHRcdFx0XCJoZWFkZXJcIixcblx0XHRcdFx0XHRcdDMsXG5cdFx0XHRcdFx0XHRgJHtbXCJKYW51YXJ5XCIsIFwiRmVidWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdW21vbnRoXX1gLFxuXHRcdFx0XHRcdF0pO1xuXG5cdFx0XHRcdFx0Y29uc3QgZGF5cyA9IE9iamVjdC5rZXlzKGJpbnNbeWVhcl1bbW9udGhdKTtcblx0XHRcdFx0XHRkYXlzLnNvcnQoKGEsIGIpID0+IHBhcnNlSW50KGEpIC0gcGFyc2VJbnQoYikpO1xuXHRcdFx0XHRcdGZvciAoY29uc3QgZGF5IG9mIGRheXMpIHtcblx0XHRcdFx0XHRcdGNvbnN0IHdlZWtzID0gW1xuXHRcdFx0XHRcdFx0XHRcIlN1blwiLFxuXHRcdFx0XHRcdFx0XHRcIk1vblwiLFxuXHRcdFx0XHRcdFx0XHRcIlR1ZVwiLFxuXHRcdFx0XHRcdFx0XHRcIldlZFwiLFxuXHRcdFx0XHRcdFx0XHRcIlRodVwiLFxuXHRcdFx0XHRcdFx0XHRcIkZyaVwiLFxuXHRcdFx0XHRcdFx0XHRcIlNhdFwiLFxuXHRcdFx0XHRcdFx0XTtcblxuXHRcdFx0XHRcdFx0Y29uc3QgYmVmb3JlID0gYmluc1t5ZWFyXVttb250aF1bZGF5XVtcImJlZm9yZVwiXTtcblx0XHRcdFx0XHRcdGNvbnN0IGF0ID0gYmluc1t5ZWFyXVttb250aF1bZGF5XVtcImF0XCJdO1xuXHRcdFx0XHRcdFx0Y29uc3QgYWZ0ZXIgPSBiaW5zW3llYXJdW21vbnRoXVtkYXldW1wiYWZ0ZXJcIl07XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKFxuXHRcdFx0XHRcdFx0XHRgeWVhcjogJHt5ZWFyfVxcbm1vbnRoOiAke21vbnRofVxcbmRheTogJHtkYXl9YCxcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRpZiAoYmVmb3JlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRcdFx0Zm9yIChjb25zdCBwYWdlIG9mIGJlZm9yZSkge1xuXHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiLS0tIGJlZm9yZSAtLS1cIik7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2cocGFnZSk7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCItLS0tLS1cIik7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCB0ZXh0ID0gYGJlZm9yZTogJHt3ZWVrc1tmbS5iZWZvcmUuZ2V0RGF5KCldfSAke2RheX0gJHtmbS5hdC50b0lTT1N0cmluZygpLnNsaWNlKDExLCAxNil9IHwgJHtmbS5nZXRQcm9qZWN0KCl9YDtcblx0XHRcdFx0XHRcdFx0XHRycy5wdXNoKFtcblx0XHRcdFx0XHRcdFx0XHRcdFwicGFyYWdyYXBoXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRSZW5kZXJlci5tYWtlTGluayhcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5kdixcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm0uZixcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGV4dCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XCJUYXNrXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRcdF0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmIChhdC5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0XHRcdGF0LnNvcnQoKGEsIGIpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBmbUEgPSBuZXcgRnJvbnRtYXR0ZXJKUyhhKTtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBmbUIgPSBuZXcgRnJvbnRtYXR0ZXJKUyhiKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZm1CLmF0LmdldFRpbWUoKSAtIGZtQS5hdC5nZXRUaW1lKCk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRmb3IgKGNvbnN0IHBhZ2Ugb2YgYXQpIHtcblx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIi0tLSBhdCAtLS1cIik7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2cocGFnZSk7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCItLS0tLS1cIik7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCB0ZXh0ID0gYGF0OiAke3dlZWtzW2ZtLmF0LmdldERheSgpXX0gJHtkYXl9ICR7Zm0uYXQudG9JU09TdHJpbmcoKS5zbGljZSgxMSwgMTYpfSB8ICR7Zm0uZ2V0UHJvamVjdCgpfWA7XG5cdFx0XHRcdFx0XHRcdFx0cnMucHVzaChbXG5cdFx0XHRcdFx0XHRcdFx0XHRcInBhcmFncmFwaFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0UmVuZGVyZXIubWFrZUxpbmsoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuZHYsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZtLmYsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRleHQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFwiVGFza1wiLFxuXHRcdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHRdKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAoYWZ0ZXIubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdFx0XHRmb3IgKGNvbnN0IHBhZ2Ugb2YgYWZ0ZXIpIHtcblx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIi0tLSBhZnRlciAtLS1cIik7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2cocGFnZSk7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCItLS0tLS1cIik7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCB0ZXh0ID0gYCBhZnRlcjogJHt3ZWVrc1tmbS5hZnRlci5nZXREYXkoKV19ICR7ZGF5fSAke2ZtLmF0LnRvSVNPU3RyaW5nKCkuc2xpY2UoMTEsIDE2KX0gfCAke2ZtLmdldFByb2plY3QoKX1gO1xuXHRcdFx0XHRcdFx0XHRcdHJzLnB1c2goW1xuXHRcdFx0XHRcdFx0XHRcdFx0XCJwYXJhZ3JhcGhcIixcblx0XHRcdFx0XHRcdFx0XHRcdFJlbmRlcmVyLm1ha2VMaW5rKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLmR2LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbS5mLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0ZXh0LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcIlRhc2tcIixcblx0XHRcdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdFx0XSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcnM7XG5cdH1cblxuXHRnbG9iYWxUYXNrTGlzdChwYWdlcykge1xuXHRcdGNvbnN0IHJzID0gW107XG5cdFx0Y29uc3QgYmlucyA9IHt9O1xuXG5cdFx0Zm9yIChjb25zdCBwYWdlIG9mIHBhZ2VzKSB7XG5cdFx0XHRjb25zdCBmbSA9IG5ldyBGcm9udG1hdHRlckpTKHBhZ2UpO1xuXHRcdFx0aWYgKGZtLmdldFByb2plY3QoKSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGZtLnByb2plY3RzID0gW1wiYWRob2NcIl07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChiaW5zW2ZtLmdldFByb2plY3QoKV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRiaW5zW2ZtLmdldFByb2plY3QoKV0gPSBbcGFnZV07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRiaW5zW2ZtLmdldFByb2plY3QoKV0ucHVzaChwYWdlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCBwcm9qZWN0cyA9IE9iamVjdC5rZXlzKGJpbnMpO1xuXHRcdHByb2plY3RzLnNvcnQoKTtcblx0XHRmb3IgKGNvbnN0IHByb2plY3Qgb2YgcHJvamVjdHMpIHtcblx0XHRcdGNvbnN0IHRhc2tzID0gYmluc1twcm9qZWN0XTtcblx0XHRcdHRhc2tzLnNvcnQoSGVscGVyLnNvcnRCeVByaW9yaXR5QW5kRHVyYXRpb25BbmRBZ2UpO1xuXHRcdFx0cnMucHVzaChbXCJoZWFkZXJcIiwgMiwgYCR7cHJvamVjdH1gXSk7XG5cdFx0XHRycy5wdXNoKFtcImFycmF5XCIsIFJlbmRlcmVyLmJhc2ljVGFza0pvdXJuYWwsIHRhc2tzXSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJzO1xuXHR9XG5cblx0bmV4dEFjdGlvbnMoZHYpIHtcblx0XHRjb25zdCBwYWdlcyA9IHRoaXMuZHYucGFnZXMoYFwiJHtQYXRocy5UYXNrc31cImApLndoZXJlKChwYWdlKSA9PiB7XG5cdFx0XHRjb25zdCBmbSA9IG5ldyBGcm9udG1hdHRlckpTKHBhZ2UpO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRbXCJkYWlseVwiLCBcIndlZWtseVwiLCBcIm1vbnRobHlcIiwgXCJ5ZWFybHlcIl0uY29udGFpbnMoXG5cdFx0XHRcdFx0Zm0uZ2V0UHJvamVjdCgpLFxuXHRcdFx0XHQpXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXRoaXMucHJvamVjdElzQWN0aXZlKGZtLmdldFByb2plY3QoKSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBleGNsdWRlIHRhc2tzIHdpdGggdW5mdWxmaWxsZWQgZGVwZW5kZW5jaWVzXG5cdFx0XHRpZiAoIXRoaXMubm90ZUhlbHBlci5pc0RvYWJsZShwYWdlKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGV4Y2x1ZGUgc29tZWRheSBtYXliZSB0YXNrc1xuXHRcdFx0aWYgKGZtLmZtLnByaW9yaXR5ID09PSAwKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdGhpcy5nbG9iYWxUYXNrTGlzdChwYWdlcyk7XG5cdH1cblxuXHR3YWl0aW5nRm9yKGR2KSB7XG5cdFx0Y29uc3QgcGFnZXMgPSB0aGlzLmR2LnBhZ2VzKGBcIiR7UGF0aHMuVGFza3N9XCJgKS53aGVyZSgocGFnZSkgPT4ge1xuXHRcdFx0Y29uc3QgZm0gPSBuZXcgRnJvbnRtYXR0ZXJKUyhwYWdlKTtcblx0XHRcdGlmIChcblx0XHRcdFx0W1wiZGFpbHlcIiwgXCJ3ZWVrbHlcIiwgXCJtb250aGx5XCIsIFwieWVhcmx5XCJdLmNvbnRhaW5zKFxuXHRcdFx0XHRcdGZtLmdldFByb2plY3QoKSxcblx0XHRcdFx0KVxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFbXCJ0b2RvXCIsIFwid2FpdGluZ1wiXS5jb250YWlucyhmbS5mbS5zdGF0dXMpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCF0aGlzLnByb2plY3RJc0FjdGl2ZShmbS5nZXRQcm9qZWN0KCkpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gZXhjbHVkZSB0YXNrcyB3aXRoIGZ1bGZpbGxlZCBkZXBlbmRlbmNpZXMgYW5kIHNvbWVkYXkgbWF5YmVcblx0XHRcdGlmICh0aGlzLm5vdGVIZWxwZXIuaXNEb2FibGUocGFnZSkgfHwgZm0uZm0ucHJpb3JpdHkgPT09IDApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9KTtcblxuXHRcdHJldHVybiB0aGlzLmdsb2JhbFRhc2tMaXN0KHBhZ2VzKTtcblx0fVxuXG5cdHByb2plY3RJc0FjdGl2ZShuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcblx0XHRjb25zdCBwcm9qZWN0ID0gdGhpcy5kdi5wYWdlcyhgXCJQcm9qZWN0c1wiYCkud2hlcmUoKHBhZ2UpID0+IHtcblx0XHRcdGNvbnN0IGZtID0gbmV3IEZyb250bWF0dGVySlMocGFnZSk7XG5cdFx0XHRpZiAoZm0uZ2V0TmFtZSgpICE9PSBuYW1lKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGZtLmZtLmFjdGl2ZSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBwcm9qZWN0Lmxlbmd0aCA+IDA7XG5cdH1cblxuXHRzb21lZGF5TWF5YmUoZHYpIHtcblx0XHRjb25zdCBwYWdlcyA9IHRoaXMuZHYucGFnZXMoYFwiJHtQYXRocy5UYXNrc31cImApLndoZXJlKChwYWdlKSA9PiB7XG5cdFx0XHRjb25zdCBmbSA9IG5ldyBGcm9udG1hdHRlckpTKHBhZ2UpO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRbXCJkYWlseVwiLCBcIndlZWtseVwiLCBcIm1vbnRobHlcIiwgXCJ5ZWFybHlcIl0uY29udGFpbnMoXG5cdFx0XHRcdFx0Zm0uZ2V0UHJvamVjdCgpLFxuXHRcdFx0XHQpXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXRoaXMucHJvamVjdElzQWN0aXZlKGZtLmdldFByb2plY3QoKSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBleGNsdWRlIHRhc2tzIHdpdGggdW5mdWxmaWxsZWQgZGVwZW5kZW5jaWVzXG5cdFx0XHRpZiAoIXRoaXMubm90ZUhlbHBlci5pc0RvYWJsZShwYWdlKSB8fCBmbS5mbS5wcmlvcml0eSA+IDApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9KTtcblxuXHRcdHJldHVybiB0aGlzLmdsb2JhbFRhc2tMaXN0KHBhZ2VzKTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgRHZMaWIge1xuXHR0YXNrRGlyID0gXCI4MTMgVGFza3NcIjtcblx0aW5ib3hEaXIgPSBcIjgwMCBJbmJveFwiO1xuXHRyZWZEaXIgPSBcIjgwMiBSZWZzXCI7XG5cdGxvZ0RpciA9IFwiNjAwIExvZ1wiO1xuXG5cdFRhc2sgPSB7XG5cdFx0QkFTRTogMyxcblx0XHREQUlMWTogNCxcblx0fTtcblxuXHRUeXBlID0ge1xuXHRcdFRBU0s6IDMsXG5cdFx0REFJTFk6IDQsXG5cdFx0TE9HOiA2LFxuXHR9O1xuXG5cdFN0YXR1cyA9IHtcblx0XHRUT0RPOiBcInRvZG9cIixcblx0XHRET05FOiBcImRvbmVcIixcblx0XHRET0lORzogXCJkb2luZ1wiLFxuXHRcdFRSQVNIOiBcInRyYXNoXCIsXG5cdFx0TUFZQkU6IFwibWF5YmVcIixcblx0XHRTVEFOREJZOiBcInN0YW5kYnlcIixcblx0fTtcblxuXHROYW1lc3BhY2UgPSB7XG5cdFx0QVJFQTogXCJhcmVhXCIsXG5cdFx0Q09OVEVYVDogXCJjb250ZXh0XCIsXG5cdFx0TEFZRVI6IFwibGF5ZXJcIixcblx0XHRPUkc6IFwib3JnXCIsXG5cdFx0UFJPSkVDVDogXCJwcm9qZWN0XCIsXG5cdH07XG5cblx0RGVmYXVsdCA9IHtcblx0XHRBUkVBOiBcIm5vbmVcIixcblx0XHRDT05URVhUOiBcImFueVwiLFxuXHRcdExBWUVSOiBcIm5vbmVcIixcblx0XHRPUkc6IFwibm9uZVwiLFxuXHRcdFBST0pFQ1Q6IFwibm9uZVwiLFxuXHR9O1xuXG5cdF9kdiA9IFwiXCI7XG5cblx0c2V0IGR2KG1vZCkge1xuXHRcdHRoaXMuX2R2ID0gbW9kO1xuXHR9XG5cblx0Z2V0IGR2KCkge1xuXHRcdHJldHVybiB0aGlzLl9kdjtcblx0fVxuXG5cdGlzQ2hpbGRUYWcocGFyZW50LCBjaGlsZCkge1xuXHRcdGlmIChjaGlsZC5sZW5ndGggPD0gcGFyZW50Lmxlbmd0aCArIDEpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IGVsc2UgaWYgKGNoaWxkLnNsaWNlKDAsIHBhcmVudC5sZW5ndGggKyAxKSAhPSBgJHtwYXJlbnR9L2ApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRzdHJpcFRhZyh0YWcpIHtcblx0XHRsZXQgdCA9IFwiXCI7XG5cdFx0aWYgKHRhZy5zbGljZSgtMSkgPT09IFwiL1wiKSB7XG5cdFx0XHR0ID0gdGFnLnNsaWNlKDAsIC0xKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dCA9IHRhZztcblx0XHR9XG5cdFx0aWYgKHQuc2xpY2UoMCwgMSkgPT09IFwiI1wiKSB7XG5cdFx0XHR0ID0gdC5zbGljZSgxLCB0Lmxlbmd0aCk7XG5cdFx0fVxuXHRcdHJldHVybiB0O1xuXHR9XG5cblx0Z2V0VGFza0Zyb21VVUlEKGR2LCB1dWlkKSB7XG5cdFx0Y29uc3QgbiA9IGR2LnBhZ2VzKGBcIiR7dGhpcy50YXNrRGlyfS8ke3V1aWR9XCJgKTtcblx0XHRpZiAobi5sZW5ndGggPT09IDApIHtcblx0XHRcdC8vIHNob3VsZCB3YXJuLCB0aGlzIG1lYW5zIG5vdGUgZGVwZW5kcyBvbiBhIG5vbi1leGlzdGluZyB0YXNrXG5cdFx0XHRjb25zb2xlLndhcm4oYFwiJHt0aGlzLnRhc2tEaXJ9LyR7dXVpZH1cIiB0YXNrIGRvZXMgbm90IGV4aXN0c2ApO1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0cmV0dXJuIG5bMF07XG5cdH1cblxuXHRoYXNWYWxpZEZvcm1hdCh0YXNrKSB7XG5cdFx0Ly8gZHYucGFnZXMgcmV0dXJucyBhbiBhcnJheSB3ZXRoZXIgaXQgZmluZHMgMSBvciBtb3JlIG5vdGVzXG5cdFx0Y29uc3QgZm0gPSB0YXNrLmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0aWYgKGZtID09PSB1bmRlZmluZWQpIHtcblx0XHRcdC8vIHRoaXMgc2hvdWxkIHdhcm4sIGFsbCB0YXNrcyBzaG91bGQgaGF2ZSBhIGZyb250bWF0dGVyXG5cdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdGBcIiR7dGhpcy50YXNrRGlyfS8ke3Rhc2sudXVpZH1cIiB0YXNrIGRvZXMgbm90IGhhdmUgYSBmcm9udG1hdHRlcmAsXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmIChmbS50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdC8vIGFsbCB0YXNrcyBtdXN0IGhhdmUgYSBgdHlwZWAgZmllbGRcblx0XHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFx0YFwiJHt0aGlzLnRhc2tEaXJ9LyR7dGFzay51dWlkfVwiIHRhc2sgZG9lcyBub3QgaGF2ZSBhIFxcYHR5cGVcXGAgZmllbGRgLFxuXHRcdFx0KTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoZm0uc3RhdHVzID09PSB1bmRlZmluZWQpIHtcblx0XHRcdC8vIGFsbCB0YXNrcyBtdXN0IGhhdmUgYSBgc3RhdHVzYCBmaWVsZFxuXHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHRgXCIke3RoaXMudGFza0Rpcn0vJHt0YXNrLnV1aWR9XCIgdGFzayBkb2VzIG5vdCBoYXZlIGEgXFxgc3RhdHVzXFxgIGZpZWxkYCxcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aGFzUGVuZGluZ0RlcGVuZGVuY2llcyhkdiwgZGVwcykge1xuXHRcdGZvciAoY29uc3QgZGVwIG9mIGRlcHMpIHtcblx0XHRcdGNvbnN0IHRhc2sgPSB0aGlzLmdldFRhc2tGcm9tVVVJRChkdiwgZGVwKTtcblx0XHRcdGlmICh0YXNrID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIXRoaXMuaGFzVmFsaWRGb3JtYXQodGFzaykpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBmbSA9IHRhc2suZmlsZS5mcm9udG1hdHRlcjtcblx0XHRcdGlmIChmbS50eXBlICE9PSB0aGlzLlRhc2suQkFTRSAmJiBmbS50eXBlICE9PSB0aGlzLlRhc2suREFJTFkpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZm0uc3RhdHVzID09PSB0aGlzLlN0YXR1cy5UT0RPKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpc0RvYWJsZShkdiwgdGFzaykge1xuXHRcdGNvbnN0IGZtID0gdGFzay5maWxlLmZyb250bWF0dGVyO1xuXG5cdFx0aWYgKGZtLnN0YXR1cyAhPT0gdGhpcy5TdGF0dXMuVE9ETykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmIChmbS5hZnRlciAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRjb25zdCBhZnRlciA9IG5ldyBEYXRlKGZtLmFmdGVyKTtcblx0XHRcdGlmIChEYXRlLm5vdygpIDw9IGFmdGVyLmdldFRpbWUoKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y29uc3QgZGVwcyA9IGZtLm5lZWRzO1xuXHRcdGlmIChkZXBzID09PSB1bmRlZmluZWQgfHwgZGVwcy5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmhhc1BlbmRpbmdEZXBlbmRlbmNpZXMoZHYsIGRlcHMpKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRnZXROYW1lc3BhY2VDb250ZW50KGR2LCBucykge1xuXHRcdGNvbnN0IGNoaWxkcmVuID0gW107XG5cdFx0Y29uc3QgcmVzcCA9IGR2LnBhZ2VzKGAjJHtuc31gKTtcblx0XHRmb3IgKGNvbnN0IGYgb2YgcmVzcCkge1xuXHRcdFx0Y29uc3QgdGFncyA9IGYudGFncztcblx0XHRcdGlmICh0YWdzID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoY29uc3QgdGFnIG9mIHRhZ3MpIHtcblx0XHRcdFx0aWYgKHRoaXMuaXNDaGlsZFRhZyhucywgdGFnKSkge1xuXHRcdFx0XHRcdGNvbnN0IHQgPSB0YWcuc2xpY2UobnMubGVuZ3RoICsgMSk7XG5cdFx0XHRcdFx0aWYgKCFjaGlsZHJlbi5pbmNsdWRlcyh0KSkge1xuXHRcdFx0XHRcdFx0Y2hpbGRyZW4ucHVzaCh0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2hpbGRyZW47XG5cdH1cblxuXHRpc0RvbmUoZHYsIGRlcCkge1xuXHRcdGNvbnN0IHRhc2sgPSB0aGlzLmdldFRhc2tGcm9tVVVJRChkdiwgZGVwKTtcblx0XHRpZiAodGFzayA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLmhhc1ZhbGlkRm9ybWF0KHRhc2spKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Y29uc3QgZm0gPSB0YXNrLmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0aWYgKGZtLnN0YXR1cyA9PT0gdGhpcy5TdGF0dXMuRE9ORSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Z2V0VGFza3MoXG5cdFx0ZHYsXG5cdFx0dGFnLFxuXHRcdHRhc2tUeXBlID0gW3RoaXMuVGFzay5CQVNFLCB0aGlzLlRhc2suREFJTFldLFxuXHRcdHN0YXR1cyA9IHRoaXMuU3RhdHVzLlRPRE8sXG5cdCkge1xuXHRcdGNvbnN0IGJ1ZmYgPSBbXTtcblx0XHRjb25zdCB0YXNrcyA9IGR2LnBhZ2VzKHRhZyk7XG5cblx0XHRmb3IgKGNvbnN0IHRhc2sgb2YgdGFza3MpIHtcblx0XHRcdGNvbnN0IGZtID0gdGFzay5maWxlLmZyb250bWF0dGVyO1xuXHRcdFx0aWYgKGZtID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZm0uc3RhdHVzID09PSB1bmRlZmluZWQgfHwgZm0uc3RhdHVzICE9PSBzdGF0dXMpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZm0udHlwZSA9PT0gdW5kZWZpbmVkIHx8ICF0YXNrVHlwZS5jb250YWlucyhmbS50eXBlKSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdGJ1ZmYucHVzaCh0YXNrKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYnVmZjtcblx0fVxuXG5cdGZvcm1hdFRhc2soZHYsIHRhc2spIHtcblx0XHRyZXR1cm4gZHYuZmlsZUxpbmsodGFzay5maWxlLnBhdGgpO1xuXHR9XG5cblx0Zm9ybWF0VGFza0JpcyhkdiwgdGFzaykge1xuXHRcdGNvbnN0IGYgPSB0YXNrLmZpbGU7XG5cdFx0bGV0IGN0eCA9IFwiXCI7XG5cblx0XHRmb3IgKGNvbnN0IHRhZyBvZiBmLnRhZ3MpIHtcblx0XHRcdGlmICh0YWcuc2xpY2UoMCwgOSkgPT0gXCIjY29udGV4dC9cIikge1xuXHRcdFx0XHRjdHggPSB0YWcuc2xpY2UoOSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFtcblx0XHRcdGR2LmZpbGVMaW5rKGYucGF0aCksXG5cdFx0XHRkdi5tYXJrZG93blRhc2tMaXN0KGYudGFza3MpLFxuXHRcdFx0Zi5mcm9udG1hdHRlci50aW1lX2VzdGltYXRlLFxuXHRcdFx0Y3R4LFxuXHRcdF07XG5cdH1cblxuXHRmb3JtYXRUYXNrQmFzZShkdiwgdGFzaykge1xuXHRcdGNvbnN0IGYgPSB0YXNrLmZpbGU7XG5cdFx0Y29uc3QgZm0gPSBmLmZyb250bWF0dGVyO1xuXHRcdGNvbnN0IHRhZ3MgPSBmbS50YWdzO1xuXG5cdFx0Y29uc3QgYXJlYSA9IHRoaXMuZ2V0QXJlYSh0YWdzKTtcblxuXHRcdHJldHVybiBbXG5cdFx0XHRkdi5maWxlTGluayhmLnBhdGgsIGZhbHNlLCBmbS51dWlkLnNsaWNlKDAsIDgpKSxcblx0XHRcdGR2Lm1hcmtkb3duVGFza0xpc3QoZi50YXNrcyksXG5cdFx0XHRmbS50aW1lX2VzdGltYXRlLFxuXHRcdFx0YXJlYSxcblx0XHRdO1xuXHR9XG5cblx0Zm9ybWF0VGFza1dhaXRpbmcoZHYsIHRhc2spIHtcblx0XHRjb25zdCBmID0gdGFzay5maWxlO1xuXHRcdGNvbnN0IGZtID0gZi5mcm9udG1hdHRlcjtcblx0XHRjb25zdCBkZXBzID0gW107XG5cblx0XHRpZiAoZm0ubmVlZHMgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Zm9yIChjb25zdCBkZXAgb2YgZm0ubmVlZHMpIHtcblx0XHRcdFx0ZGVwcy5wdXNoKGR2LmZpbGVMaW5rKGAke3RoaXMudGFza0Rpcn0vJHtkZXB9YCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGZvcm1hdFRhc2tNYXliZShkdiwgdGFzaykge1xuXHRcdGNvbnN0IGYgPSB0YXNrLmZpbGU7XG5cdFx0Y29uc3QgZm0gPSBmLmZyb250bWF0dGVyO1xuXHRcdGNvbnN0IGRlcHMgPSBbXTtcblxuXHRcdHJldHVybiBbZHYuZmlsZUxpbmsoZi5wYXRoKV07XG5cdH1cblxuXHRtYWtlQXN5bmNSZXF1ZXN0KGR2LCB1dWlkKSB7XG5cdFx0cmV0dXJuIGR2XG5cdFx0XHQucXVlcnkoYExJU1QgV0hFUkUgbmVlZHMgQU5EIGNvbnRhaW5zKG5lZWRzLCBcIiR7dXVpZH1cIilgKVxuXHRcdFx0LnRoZW4oKHZhbHVlKSA9PiB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH0pO1xuXHR9XG5cblx0Z2V0RGVwZW5kYW50VGFza3MoZHYsIHRhc2spIHtcblx0XHRjb25zdCBidWZmID0gW107XG5cdFx0Y29uc3QgdXVpZCA9IHRhc2suZmlsZS5uYW1lO1xuXG5cdFx0aWYgKHRhc2suZmlsZS5mcm9udG1hdHRlciA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gYnVmZjtcblx0XHR9XG5cblx0XHRjb25zdCB0YXNrcyA9IGR2XG5cdFx0XHQucGFnZXMoYFwiJHt0aGlzLnRhc2tEaXJ9XCJgKVxuXHRcdFx0LndoZXJlKChwKSA9PiBwLm5lZWRzICE9PSB1bmRlZmluZWQgJiYgcC5uZWVkcy5jb250YWlucyh1dWlkKSk7XG5cdFx0Zm9yIChjb25zdCB0ayBvZiB0YXNrcykge1xuXHRcdFx0Y29uc3QgdCA9IGR2LnBhZ2VzKGBcIiR7dGsuZmlsZS5wYXRofVwiYCk7XG5cdFx0XHRidWZmLnB1c2godFswXSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJ1ZmY7XG5cdH1cblxuXHRieURlcGVuZGVuY3lBbmRQcmlvcml0eUFuZENyZWF0ZWRBdChkdiwgYSwgYikge1xuXHRcdGNvbnN0IGZ0QSA9IGEuZmlsZS5mcm9udG1hdHRlcjtcblx0XHRjb25zdCBmdEIgPSBiLmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0Y29uc3QgcHJpb0EgPSBmdEEucHJpb3JpdHk7XG5cdFx0Y29uc3QgcHJpb0IgPSBmdEIucHJpb3JpdHk7XG5cdFx0Ly8gYmVmb3JlID4gZGVwcyA+IHByaW8gPiBjcmVhdGVkX2F0XG5cdFx0Ly8gbGV0IGJlZm9yZUEgPSBmdEEuYmVmb3JlO1xuXHRcdC8vIGxldCBiZWZvcmVCID0gZnRCLmJlZm9yZTtcblxuXHRcdGNvbnN0IGRlcHNBID0gdGhpcy5nZXREZXBlbmRhbnRUYXNrcyhkdiwgYSk7XG5cdFx0Y29uc3QgZGVwc0IgPSB0aGlzLmdldERlcGVuZGFudFRhc2tzKGR2LCBiKTtcblxuXHRcdGlmIChkZXBzQS5sZW5ndGggLSBkZXBzQi5sZW5ndGggIT09IDApIHtcblx0XHRcdHJldHVybiBkZXBzQS5sZW5ndGggLSBkZXBzQi5sZW5ndGg7XG5cdFx0fVxuXG5cdFx0aWYgKHByaW9BIC0gcHJpb0IgIT09IDApIHtcblx0XHRcdHJldHVybiBwcmlvQSAtIHByaW9CO1xuXHRcdH1cblxuXHRcdGNvbnN0IGRhdGVBID0gbmV3IERhdGUoZnRBLmNyZWF0ZWRfYXQpO1xuXHRcdGNvbnN0IGRhdGVCID0gbmV3IERhdGUoZnRCLmNyZWF0ZWRfYXQpO1xuXG5cdFx0cmV0dXJuIChkYXRlQS5nZXRUaW1lKCkgLSBkYXRlQi5nZXRUaW1lKCkpICogLTE7XG5cdH1cblxuXHRmb3JtYXRUYXNrUGxhbm5pbmdXYWl0aW5nKGR2LCB0YXNrKSB7XG5cdFx0Y29uc3QgZiA9IHRhc2suZmlsZTtcblxuXHRcdHJldHVybiBbXG5cdFx0XHQvLyBham91dGVyIGFsaWFzIHN1ciBsZSBsaW5rXG5cdFx0XHRkdi5tYXJrZG93blRhc2tMaXN0KGYudGFza3MpLFxuXHRcdFx0ZHYuZmlsZUxpbmsoZi5wYXRoLCBmYWxzZSwgZi5uYW1lLnNsaWNlKDAsIDgpKSxcblx0XHRcdGYuZnJvbnRtYXR0ZXIudGltZV9lc3RpbWF0ZSxcblx0XHRcdGYuZnJvbnRtYXR0ZXIuY2F1c2UsXG5cdFx0XTtcblx0fVxuXG5cdHJlbmRlckJhc2VBc0FycmF5KGR2LCB0YXNrcykge1xuXHRcdGNvbnN0IGFyciA9IFtdO1xuXHRcdHRhc2tzLmZvckVhY2goKHRhc2spID0+IHtcblx0XHRcdGFyci5wdXNoKHRoaXMuZm9ybWF0VGFza0Jhc2UoZHYsIHRhc2spKTtcblx0XHR9KTtcblx0XHRkdi50YWJsZShbXCJ1dWlkXCIsIFwidGFza3NcIiwgXCJlc3RpbWF0ZVwiLCBcImFyZWFcIl0sIGFycik7XG5cdH1cblxuXHRyZW5kZXJQbGFubmluZ1dhaXRpbmcoZHYsIHRhc2tzKSB7XG5cdFx0Y29uc3QgYXJyID0gW107XG5cdFx0dGFza3MuZm9yRWFjaCgodGFzaykgPT4ge1xuXHRcdFx0YXJyLnB1c2godGhpcy5mb3JtYXRUYXNrUGxhbm5pbmdXYWl0aW5nKGR2LCB0YXNrKSk7XG5cdFx0fSk7XG5cdFx0ZHYudGFibGUoW1widGFza3NcIiwgXCJ1dWlkXCIsIFwiZXN0aW1hdGVcIiwgXCJjYXVzZVwiXSwgYXJyKTtcblx0fVxuXG5cdHJlbmRlck1heWJlQXNBcnJheShkdiwgdGFza3MpIHtcblx0XHRjb25zdCBhcnIgPSBbXTtcblx0XHR0YXNrcy5mb3JFYWNoKCh7IHJlZiwgdGFzayB9KSA9PiB7XG5cdFx0XHRpZiAodGFzayAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGFyci5wdXNoKHRoaXMuZm9ybWF0VGFza01heWJlKGR2LCB0YXNrKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0ZHYudGFibGUoW1widXVpZFwiXSwgYXJyKTtcblx0fVxuXG5cdGZvcm1hdFRhc2tEYWlseShkdiwgdGFzaykge1xuXHRcdGNvbnN0IGYgPSB0YXNrLmZpbGU7XG5cdFx0Y29uc3QgZm0gPSB0YXNrLmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0Y29uc3QgdGFncyA9IHRhc2suZmlsZS50YWdzO1xuXHRcdGNvbnN0IGFyZWFzID0gW107XG5cblx0XHRmb3IgKGNvbnN0IHRhZyBvZiB0YWdzKSB7XG5cdFx0XHRpZiAodGFnLnNsaWNlKDAsIDYpID09IFwiI2FyZWEvXCIpIHtcblx0XHRcdFx0YXJlYXMucHVzaCh0YWcuc2xpY2UoNikpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNvbnN0IGxpbmtzID0gW107XG5cdFx0Zm9yIChjb25zdCBsaW5rIG9mIGYub3V0bGlua3MpIHtcblx0XHRcdGxpbmtzLnB1c2gobGluayk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgdGFza3MgPSBbXTtcblx0XHRmb3IgKGNvbnN0IHQgb2YgZi50YXNrcykge1xuXHRcdFx0dGFza3MucHVzaCh0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gW1xuXHRcdFx0ZHYuZmlsZUxpbmsoZi5wYXRoKSxcblx0XHRcdGxpbmtzLmxlbmd0aCA+IDBcblx0XHRcdFx0PyBkdi5tYXJrZG93bkxpc3QobGlua3MpXG5cdFx0XHRcdDogZHYubWFya2Rvd25UYXNrTGlzdCh0YXNrcyksXG5cdFx0XHRmbS50aW1lX2FsbG9jYXRlZCxcblx0XHRcdGFyZWFzLmxlbmd0aCA+IDAgPyBkdi5tYXJrZG93bkxpc3QoYXJlYXMpIDogXCJcIixcblx0XHRdO1xuXHR9XG5cblx0Zm9ybWF0RmxlZXRpbmcoZHYsIHRhc2spIHtcblx0XHRjb25zdCBmID0gdGFzay5maWxlO1xuXHRcdGNvbnN0IGZtID0gdGFzay5maWxlLmZyb250bWF0dGVyO1xuXHRcdGNvbnN0IHRhZ3MgPSB0YXNrLmZpbGUudGFncztcblx0XHRjb25zdCBob3VycyA9IDM2MDA7XG5cdFx0Y29uc3QgZGF5cyA9IDg2NDAwO1xuXG5cdFx0bGV0IGR0ID0gbmV3IERhdGUoKTtcblx0XHRpZiAoZm0gIT09IHVuZGVmaW5lZCAmJiBmbS5jcmVhdGVkX2F0ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGR0ID0gbmV3IERhdGUoZm0uY3JlYXRlZF9hdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGR0ID0gbmV3IERhdGUoZi5jdGltZS50cyk7XG5cdFx0fVxuXHRcdGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG5cdFx0Y29uc3QgZGVsdGEgPSAobm93LmdldFRpbWUoKSAtIGR0LmdldFRpbWUoKSkgLyAxMDAwO1xuXHRcdGxldCBzaW5jZSA9IFwiXCI7XG5cdFx0Y29uc3QgdG9EdCA9ICh0KSA9PiB7XG5cdFx0XHRyZXR1cm4gU3RyaW5nKE1hdGgucm91bmQodCAqIDEwKSAvIDEwKS5wYWRTdGFydCgyLCBcIjBcIik7XG5cdFx0fTtcblx0XHRpZiAoZGVsdGEgPj0gZGF5cykge1xuXHRcdFx0Ly8gZGF5cyBhZ29cblx0XHRcdHNpbmNlID0gdG9EdChkZWx0YSAvIGRheXMpICsgXCJkXCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGhvdXJzIGFnb1xuXHRcdFx0c2luY2UgPSB0b0R0KGRlbHRhIC8gaG91cnMpICsgXCJoXCI7XG5cdFx0fVxuXG5cdFx0Ly8gcmV0dXJuIFtkdi5maWxlTGluayhgJHtmLnBhdGh9I0NvbnRlbnRgKSwgc2luY2UsIGYuc2l6ZV07XG5cdFx0aWYgKGZtLmFsaWFzID09PSB1bmRlZmluZWQgfHwgZm0uYWxpYXMgPT09IFwiXCIpIHtcblx0XHRcdHJldHVybiBbZHYuZmlsZUxpbmsoYCR7Zi5wYXRofWApLCBzaW5jZSwgZi5zaXplXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIFtkdi5maWxlTGluayhgJHtmLnBhdGh9YCwgZmFsc2UsIGZtLmFsaWFzKSwgc2luY2UsIGYuc2l6ZV07XG5cdFx0fVxuXHR9XG5cblx0cmVuZGVyRGFpbHlBc0FycmF5KGR2LCB0YXNrcykge1xuXHRcdGNvbnN0IGFyciA9IFtdO1xuXHRcdHRhc2tzLmZvckVhY2goKHRhc2spID0+IHtcblx0XHRcdGFyci5wdXNoKHRoaXMuZm9ybWF0VGFza0RhaWx5KGR2LCB0YXNrKSk7XG5cdFx0fSk7XG5cdFx0ZHYudGFibGUoW1widXVpZFwiLCBcImNvbnRlbnRcIiwgXCJkdXJhdGlvblwiLCBcImFyZWFcIl0sIGFycik7XG5cdH1cblxuXHRyZW5kZXJGbGVldGluZ0FzQXJyYXkoZHYsIHRhc2tzKSB7XG5cdFx0Y29uc3QgYXJyID0gW107XG5cdFx0dGFza3MuZm9yRWFjaCgodGFzaykgPT4ge1xuXHRcdFx0YXJyLnB1c2godGhpcy5mb3JtYXRGbGVldGluZyhkdiwgdGFzaykpO1xuXHRcdH0pO1xuXHRcdGR2LnRhYmxlKFtcImNvbnRlbnRcIiwgXCJhZ2VcIiwgXCJzaXplXCJdLCBhcnIpO1xuXHR9XG5cblx0YXV0b0ZpZWxkTmVlZChkdiwgZm0pIHtcblx0XHRpZiAoZm0ubmVlZHMgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCBidWZmID0gW107XG5cdFx0Zm9yIChjb25zdCBkZXAgb2YgZm0ubmVlZHMpIHtcblx0XHRcdGlmICghdGhpcy5pc0RvbmUoZHYsIGRlcCkpIHtcblx0XHRcdFx0YnVmZi5wdXNoKGR2LmZpbGVMaW5rKGAke3RoaXMudGFza0Rpcn0vJHtkZXB9YCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoYnVmZi5sZW5ndGggPiAwKSB7XG5cdFx0XHRkdi5oZWFkZXIoMiwgXCJOZWVkc1wiKTtcblx0XHRcdGR2Lmxpc3QoYnVmZik7XG5cdFx0fVxuXHR9XG5cblx0YXV0b0ZpZWxkTmVlZGVkQnkoZHYsIGN1cnJlbnQpIHtcblx0XHRjb25zdCB0YXNrcyA9IHRoaXMuZ2V0RGVwZW5kYW50VGFza3MoZHYsIGN1cnJlbnQpO1xuXHRcdGlmICh0YXNrcy5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBidWZmID0gW107XG5cdFx0Zm9yIChjb25zdCB0YXNrIG9mIHRhc2tzKSB7XG5cdFx0XHRpZiAoIXRoaXMuaXNEb25lKGR2LCB0YXNrLnV1aWQpKSB7XG5cdFx0XHRcdGJ1ZmYucHVzaChkdi5maWxlTGluayh0YXNrLmZpbGUucGF0aCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoYnVmZi5sZW5ndGggPiAwKSB7XG5cdFx0XHRkdi5oZWFkZXIoMiwgXCJOZWVkZWRCeVwiKTtcblx0XHRcdGR2Lmxpc3QoYnVmZik7XG5cdFx0fVxuXHR9XG5cblx0YXV0b0ZpZWxkVGFncyhkdiwgZm0pIHtcblx0XHRjb25zdCB0YWdzID0gZm0udGFncztcblx0XHRpZiAodGFncyA9PSB1bmRlZmluZWQgfHwgdGFncy5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0YWdzLnNvcnQoKTtcblx0XHRkdi5oZWFkZXIoMiwgXCJUYWdzXCIpO1xuXHRcdGxldCBzID0gXCJcIjtcblx0XHRmb3IgKGNvbnN0IHRhZyBvZiB0YWdzKSB7XG5cdFx0XHRzICs9IGAgIyR7dGFnfWA7XG5cdFx0fVxuXHRcdGR2LnBhcmFncmFwaChzKTtcblxuXHRcdC8vIGR2LnBhcmFncmFwaChzKTtcblx0XHQvLyBmb3IgKGNvbnN0IHRhZyBvZiB0YWdzKSB7XG5cdFx0Ly8gICBkdi5wYXJhZ3JhcGgoYCMke3RhZ31gKTtcblx0XHQvLyB9XG5cdH1cblxuXHRhdXRvRmllbGRUYXNrQmFzZShkdikge1xuXHRcdGNvbnN0IGN1cnJlbnQgPSBkdi5jdXJyZW50KCk7XG5cdFx0Y29uc3QgZm0gPSBjdXJyZW50LmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0aWYgKGZtID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnNvbGUud2FybihcImZtIGlzIHJlcXVpcmVkXCIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IHByb2plY3ROYW1lID0gSGVscGVyLmdldFByb2plY3QoZm0pO1xuXHRcdGlmIChwcm9qZWN0TmFtZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRjb25zdCBwcm9qZWN0cyA9IGR2LnBhZ2VzKGBcIlByb2plY3RzXCJgKS53aGVyZSgoZm1QKSA9PiB7XG5cdFx0XHRcdGlmIChmbVAubmFtZSA9PT0gcHJvamVjdE5hbWUuc2xpY2UoOCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0pO1xuXHRcdFx0aWYgKHByb2plY3RzLmxlbmd0aCkge1xuXHRcdFx0XHRkdi5oZWFkZXIoMiwgXCJQcm9qZWN0XCIpO1xuXHRcdFx0XHRkdi5wYXJhZ3JhcGgoUmVuZGVyZXIubWFrZUxpbmtOYW1lKGR2LCBwcm9qZWN0c1swXS5maWxlKSk7XG5cdFx0XHRcdC8vIGR2LnBhcmFncmFwaChkdi5maWxlTGluayhgUHJvamVjdHMvJHtwcm9qZWN0c1swXS5maWxlLmZyb250bWF0dGVyLnV1aWR9YCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLmF1dG9GaWVsZE5lZWQoZHYsIGZtKTtcblx0XHR0aGlzLmF1dG9GaWVsZE5lZWRlZEJ5KGR2LCBjdXJyZW50KTtcblx0XHQvLyB0aGlzLmF1dG9GaWVsZFRhZ3MoZHYsIGZtKTtcblxuXHRcdGNvbnN0IGxvZ0VudHJpZXMgPSBkdlxuXHRcdFx0LnBhZ2VzKGBcIiR7dGhpcy5sb2dEaXJ9LyR7Zm0udXVpZH1cImApXG5cdFx0XHQud2hlcmUoKHApID0+IHAudHlwZSA9PT0gNilcblx0XHRcdC5zb3J0KChrKSA9PiBrLmNyZWF0ZWRfYXQsIFwiZGVzY1wiKTtcblxuXHRcdGNvbnN0IGJ1ZmYgPSBbXTtcblx0XHRsZXQgdG90YWxUaW1lID0gMDtcblx0XHRmb3IgKGNvbnN0IGVudHJ5IG9mIGxvZ0VudHJpZXMpIHtcblx0XHRcdGNvbnN0IGZtZSA9IGVudHJ5LmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0XHRjb25zdCBlID0gW107XG5cdFx0XHRsZXQgc3RhcnQ6IGFueSA9IDA7XG5cdFx0XHRsZXQgc3RvcDogYW55ID0gMDtcblxuXHRcdFx0aWYgKGZtZSA9PT0gdW5kZWZpbmVkIHx8IGZtZS5jcmVhdGVkX2F0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGZyb250bWF0dGVyOiAke2ZtZS51dWlkfWApO1xuXHRcdFx0fVxuXG5cdFx0XHRzdGFydCA9IG5ldyBEYXRlKGZtZS5jcmVhdGVkX2F0KTtcblx0XHRcdGUucHVzaChzdGFydC50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKSk7XG5cblx0XHRcdGlmIChmbWUuZG9uZV9hdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHN0b3AgPSBEYXRlLm5vdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c3RvcCA9IG5ldyBEYXRlKGZtZS5kb25lX2F0KTtcblx0XHRcdH1cblx0XHRcdHRvdGFsVGltZSArPSBzdG9wIC0gc3RhcnQ7XG5cblx0XHRcdGUucHVzaChcblx0XHRcdFx0ZHYuc2VjdGlvbkxpbmsoXG5cdFx0XHRcdFx0Zm1lLnV1aWQsXG5cdFx0XHRcdFx0XCIjIyBDb250ZW50XCIsXG5cdFx0XHRcdFx0ZmFsc2UsXG5cdFx0XHRcdFx0Zm1lLnV1aWQuc2xpY2UoMCwgOCksXG5cdFx0XHRcdCksXG5cdFx0XHQpO1xuXHRcdFx0ZS5wdXNoKE1hdGgucm91bmQoKChzdG9wIC0gc3RhcnQpIC8gKDEwMDAgKiA2MCAqIDYwKSkgKiAxMCkgLyAxMCk7XG5cdFx0XHRpZiAoZm1lLnJldmlld2VkID09PSB1bmRlZmluZWQgfHwgZm1lLnJldmlld2VkID09PSAwKSB7XG5cdFx0XHRcdGUucHVzaCgwKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGUucHVzaChmbWUucmV2aWV3ZWQpO1xuXHRcdFx0fVxuXG5cdFx0XHRidWZmLnB1c2goZSk7XG5cdFx0fVxuXG5cdFx0aWYgKGJ1ZmYubGVuZ3RoID4gMCkge1xuXHRcdFx0ZHYuaGVhZGVyKDIsIFwiTG9nc1wiKTtcblx0XHRcdGR2LnRhYmxlKFtcImNyZWF0ZWRfYXRcIiwgXCJ1dWlkXCIsIFwic2Vzc2lvblwiLCBcInJldmlld2VkXCJdLCBidWZmKTtcblx0XHRcdGlmICh0b3RhbFRpbWUgPiAwKSB7XG5cdFx0XHRcdGR2LnBhcmFncmFwaChcblx0XHRcdFx0XHRgX3RvdGFsVGltZSAoaCk6XyAke01hdGgucm91bmQoKHRvdGFsVGltZSAvICgxMDAwICogNjAgKiA2MCkpICogMTApIC8gMTBcblx0XHRcdFx0XHR9YCxcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRhdXRvRmllbGRMb2coZHYpIHtcblx0XHRjb25zdCBjdXJyZW50ID0gZHYuY3VycmVudCgpO1xuXHRcdGNvbnN0IGZtID0gY3VycmVudC5maWxlLmZyb250bWF0dGVyO1xuXHRcdGlmIChmbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZHYuaGVhZGVyKDIsIFwiUGFyZW50XCIpO1xuXHRcdGR2LnBhcmFncmFwaChkdi5maWxlTGluayhgJHt0aGlzLnRhc2tEaXJ9LyR7Zm0ucGFyZW50X2lkfWApKTtcblx0fVxuXG5cdGF1dG9GaWVsZEF1dGhvcnMoZHYsIGZtKSB7XG5cdFx0Y29uc3QgYXV0aG9ycyA9IGZtLmF1dGhvcnM7XG5cdFx0aWYgKGF1dGhvcnMgPT09IHVuZGVmaW5lZCB8fCBhdXRob3JzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRkdi5oZWFkZXIoMiwgXCJBdXRob3JzXCIpO1xuXHRcdGR2Lmxpc3QoYXV0aG9ycyk7XG5cdH1cblxuXHRhdXRvRmllbGRUaXRsZShkdiwgZm0pIHtcblx0XHRjb25zdCB0aXRsZSA9IGZtLmFsaWFzO1xuXHRcdGlmICh0aXRsZSA9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkdi5oZWFkZXIoMSwgdGl0bGUpO1xuXHR9XG5cblx0YXV0b0ZpZWxkTGl0ZXJhdHVyZU5vdGUoZHYpIHtcblx0XHRjb25zdCBjdXJyZW50ID0gZHYuY3VycmVudCgpO1xuXHRcdGNvbnN0IGZtID0gY3VycmVudC5maWxlLmZyb250bWF0dGVyO1xuXHRcdGlmIChmbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5hdXRvRmllbGRUaXRsZShkdiwgZm0pO1xuXHRcdHRoaXMuYXV0b0ZpZWxkQXV0aG9ycyhkdiwgZm0pO1xuXHRcdHRoaXMuYXV0b0ZpZWxkVGFncyhkdiwgZm0pO1xuXHR9XG5cblx0YXV0b0ZpZWxkUGVybWFuZW50KGR2KSB7XG5cdFx0Y29uc3QgY3VycmVudCA9IGR2LmN1cnJlbnQoKTtcblx0XHRjb25zdCBmbSA9IGN1cnJlbnQuZmlsZS5mcm9udG1hdHRlcjtcblx0XHRpZiAoZm0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuYXV0b0ZpZWxkVGFncyhkdiwgZm0pO1xuXHR9XG5cblx0YXV0b0ZpZWxkVGFzayhkdikge1xuXHRcdHJldHVybiB0aGlzLmF1dG9GaWVsZFRhc2tCYXNlKGR2KTtcblx0fVxuXG5cdGF1dG9GaWVsZExpdGVyYXR1cmUoZHYpIHtcblx0XHRyZXR1cm4gdGhpcy5hdXRvRmllbGRMaXRlcmF0dXJlTm90ZShkdik7XG5cdH1cblxuXHRhdXRvRmllbGRGbGVldGluZyhkdikge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGF1dG9GaWVsZFN1cHBseShkdikge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGZpbmRUYXNrc0J5UHJvamVjdChkdiwgbmFtZSkge1xuXHRcdGNvbnN0IGJ1ZmYgPSBbXTtcblxuXHRcdGlmIChuYW1lICE9PSBcIlwiICYmIG5hbWUgIT09IFwibm9uZVwiKSB7XG5cdFx0XHRjb25zdCB0YXNrcyA9IHRoaXMuZ2V0VGFza3MoZHYsIGAke3RoaXMuTmFtZXNwYWNlLlBST0pFQ1R9L25vbmVgLCBbXG5cdFx0XHRcdHRoaXMuVGFzay5CQVNFLFxuXHRcdFx0XSk7XG5cdFx0XHRmb3IgKGNvbnN0IHRhc2sgb2YgdGFza3MpIHtcblx0XHRcdFx0Y29uc3QgZm0gPSB0YXNrLmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0XHRcdGlmICh0aGlzLmlzRG9hYmxlKGR2LCB0YXNrKSkge1xuXHRcdFx0XHRcdGJ1ZmYucHVzaCh0YXNrKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCB0YXNrcyA9IHRoaXMuZ2V0VGFza3MoZHYsIFwiXCIsIFt0aGlzLlRhc2suQkFTRV0pO1xuXHRcdFx0Zm9yIChjb25zdCB0YXNrIG9mIHRhc2tzKSB7XG5cdFx0XHRcdGNvbnN0IGZtID0gdGFzay5maWxlLmZyb250bWF0dGVyO1xuXHRcdFx0XHRjb25zdCB0YWdzID0gZm0udGFncztcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdChmbS50YWdzID09PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0XHRcdChuYW1lID09PSBcIlwiIHx8IG5hbWUgPT09IFwibm9uZVwiKSkgfHxcblx0XHRcdFx0XHRmbS50YWdzLmNvbnRhaW5zKGAke3RoaXMuTmFtZXNwYWNlLlBST0pFQ1R9L25vbmVgKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRpZiAodGhpcy5pc0RvYWJsZShkdiwgdGFzaykpIHtcblx0XHRcdFx0XHRcdGJ1ZmYucHVzaCh0YXNrKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRidWZmLnNvcnQoKTtcblx0XHRyZXR1cm4gYnVmZjtcblx0fVxuXG5cdGdldFRhZyh0YWdzLCB0eXBlKSB7XG5cdFx0bGV0IG5hbWUgPSBcIlwiO1xuXHRcdGxldCBkZWZhdWx0VmFsdWUgPSBcIlwiO1xuXG5cdFx0aWYgKHR5cGUgPT09IFwiYXJlYVwiKSB7XG5cdFx0XHRuYW1lID0gdGhpcy5OYW1lc3BhY2UuQVJFQTtcblx0XHRcdGRlZmF1bHRWYWx1ZSA9IHRoaXMuRGVmYXVsdC5BUkVBO1xuXHRcdH0gZWxzZSBpZiAodHlwZSA9PT0gXCJjb250ZXh0XCIpIHtcblx0XHRcdG5hbWUgPSB0aGlzLk5hbWVzcGFjZS5DT05URVhUO1xuXHRcdFx0ZGVmYXVsdFZhbHVlID0gdGhpcy5EZWZhdWx0LkNPTlRFWFQ7XG5cdFx0fSBlbHNlIGlmICh0eXBlID09PSBcImxheWVyXCIpIHtcblx0XHRcdG5hbWUgPSB0aGlzLk5hbWVzcGFjZS5MQVlFUjtcblx0XHRcdGRlZmF1bHRWYWx1ZSA9IHRoaXMuRGVmYXVsdC5MQVlFUjtcblx0XHR9IGVsc2UgaWYgKHR5cGUgPT09IFwib3JnXCIpIHtcblx0XHRcdG5hbWUgPSB0aGlzLk5hbWVzcGFjZS5PUkc7XG5cdFx0XHRkZWZhdWx0VmFsdWUgPSB0aGlzLkRlZmF1bHQuT1JHO1xuXHRcdH0gZWxzZSBpZiAodHlwZSA9PT0gXCJwcm9qZWN0XCIpIHtcblx0XHRcdG5hbWUgPSB0aGlzLk5hbWVzcGFjZS5QUk9KRUNUO1xuXHRcdFx0ZGVmYXVsdFZhbHVlID0gdGhpcy5EZWZhdWx0LlBST0pFQ1Q7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgZ2V0VGFnIGdvdCB1bnN1cG9ydGVkIHR5cGU6ICR7dHlwZX1gKTtcblx0XHR9XG5cblx0XHRjb25zdCBsZW4gPSBuYW1lLmxlbmd0aCArIDE7XG5cdFx0Y29uc3QgZGVmYXVsdFRhZyA9IGAke25hbWV9LyR7ZGVmYXVsdFZhbHVlfWA7XG5cdFx0aWYgKHRhZ3MgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIGRlZmF1bHRUYWc7XG5cdFx0fVxuXG5cdFx0Zm9yIChjb25zdCB0YWcgb2YgdGFncykge1xuXHRcdFx0aWYgKHRhZy5sZW5ndGggPiBsZW4gJiYgdGFnLnNsaWNlKDAsIGxlbikgPT0gYCR7bmFtZX0vYCkge1xuXHRcdFx0XHRyZXR1cm4gdGFnO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBkZWZhdWx0VGFnO1xuXHR9XG5cblx0Z2V0QXJlYSh0YWdzKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0VGFnKHRhZ3MsIFwiYXJlYVwiKTtcblx0fVxuXG5cdGdldENvbnRleHQodGFncykge1xuXHRcdHJldHVybiB0aGlzLmdldFRhZyh0YWdzLCBcImNvbnRleHRcIik7XG5cdH1cblx0Z2V0TGF5ZXIodGFncykge1xuXHRcdHJldHVybiB0aGlzLmdldFRhZyh0YWdzLCBcImxheWVyXCIpO1xuXHR9XG5cblx0Z2V0T3JnKHRhZ3MpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRUYWcodGFncywgXCJvcmdcIik7XG5cdH1cblxuXHRnZXRQcm9qZWN0KHRhZ3MpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRUYWcodGFncywgXCJwcm9qZWN0XCIpO1xuXHR9XG5cblx0cGFyc2VMaXN0RnJvbnRtYXR0ZXIoZm0pIHtcblx0XHRsZXQgbWluUHJpb3JpdHkgPSAwO1xuXHRcdGlmIChmbS5taW5fcHJpb3JpdHkgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0bWluUHJpb3JpdHkgPSBmbS5taW5fcHJpb3JpdHk7XG5cdFx0fVxuXG5cdFx0bGV0IGlnbm9yZSA9IFtdO1xuXHRcdGlmIChmbS5pZ25vcmUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aWdub3JlID0gZm0uaWdub3JlO1xuXHRcdH1cblxuXHRcdGxldCBieUFyZWFzID0gW107XG5cdFx0aWYgKGZtLmJ5X2FyZWFzICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGJ5QXJlYXMgPSBmbS5ieV9hcmVhcztcblx0XHR9XG5cblx0XHRsZXQgYnlQcm9qZWN0cyA9IFtdO1xuXHRcdGlmIChmbS5ieV9wcm9qZWN0cyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRieVByb2plY3RzID0gZm0uYnlfcHJvamVjdHM7XG5cdFx0fVxuXHRcdHJldHVybiBbbWluUHJpb3JpdHksIGlnbm9yZSwgYnlBcmVhcywgYnlQcm9qZWN0c107XG5cdH1cblxuXHRyZW5kZXJOYW1lc3BhY2VDb250ZW50KGR2KSB7XG5cdFx0Y29uc3Qgc2VsZiA9IGR2LmN1cnJlbnQoKTtcblx0XHRjb25zdCBuYW1lID0gc2VsZi5maWxlLm5hbWUudG9Mb3dlckNhc2UoKS5zbGljZSgwLCAtMSk7XG5cblx0XHRkdi5oZWFkZXIoMSwgXCJJbmRleFwiKTtcblx0XHRkdi5oZWFkZXIoMiwgYCR7c2VsZi5maWxlLm5hbWV9YCk7XG5cblx0XHRjb25zdCB0YWdzID0gdGhpcy5nZXROYW1lc3BhY2VDb250ZW50KGR2LCBuYW1lKTtcblx0XHR0YWdzLnNvcnQoKTtcblxuXHRcdGZvciAoY29uc3QgdGFnIG9mIHRhZ3MpIHtcblx0XHRcdGR2LnBhcmFncmFwaChgIyR7bmFtZX0vJHt0YWd9YCk7XG5cdFx0fVxuXHR9XG5cblx0cmVuZGVyVW5wcm9jZXNzZWRMb2dzKGR2KSB7XG5cdFx0Y29uc3QgbG9ncyA9IGR2XG5cdFx0XHQucGFnZXMoYFwiJHt0aGlzLmxvZ0Rpcn1cImApXG5cdFx0XHQud2hlcmUoXG5cdFx0XHRcdChwKSA9PlxuXHRcdFx0XHRcdHAudHlwZSA9PT0gdGhpcy5UeXBlLkxPRyAmJlxuXHRcdFx0XHRcdChwLnJldmlld2QgPT09IHVuZGVmaW5lZCB8fCBwLnJldmlld2VkIDwgMSksXG5cdFx0XHQpXG5cdFx0XHQuc29ydCgoaykgPT4gay5jcmVhdGVkX2F0LCBcImFzY1wiKTtcblxuXHRcdGNvbnN0IGJ1ZmYgPSBbXTtcblxuXHRcdGNvbnN0IGFyciA9IFtdO1xuXHRcdGxvZ3MuZm9yRWFjaCgoZW50cnkpID0+IHtcblx0XHRcdGNvbnN0IGZtID0gZW50cnkuZmlsZS5mcm9udG1hdHRlcjtcblx0XHRcdGlmIChmbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgcGFyZW50SWQgPSBmbS5wYXJlbnRfaWQ7XG5cdFx0XHRpZiAocGFyZW50SWQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbG9nIGVudHJ5OiAke2VudHJ5LmZpbGUucGF0aH1gKTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgcGFyZW50ID0gZHYucGFnZXMoYFwiJHt0aGlzLnRhc2tEaXJ9LyR7cGFyZW50SWR9XCJgKTtcblx0XHRcdGNvbnN0IHBhcmVudEZtID0gcGFyZW50LmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0XHRpZiAocGFyZW50Rm0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdGFzazogJHtwYXJlbnQuZmlsZS5wYXRofWApO1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgcHJvamVjdCA9IHRoaXMuZ2V0UHJvamVjdChwYXJlbnRGbS50YWdzKTtcblx0XHRcdGlmIChcblx0XHRcdFx0cHJvamVjdCA9PT0gYCR7dGhpcy5OYW1lc3BhY2UuUFJPSkVDVH0vJHt0aGlzLkRlZmF1bHQuUFJPSkVDVH1gXG5cdFx0XHQpIHtcblx0XHRcdFx0cHJvamVjdCA9IFwiXCI7XG5cdFx0XHR9XG5cblx0XHRcdGxldCBhcmVhID0gdGhpcy5nZXRBcmVhKHBhcmVudEZtLnRhZ3MpO1xuXHRcdFx0aWYgKGFyZWEgPT09IGAke3RoaXMuTmFtZXNwYWNlLkFSRUF9LyR7dGhpcy5EZWZhdWx0LkFSRUF9YCkge1xuXHRcdFx0XHRhcmVhID0gXCJcIjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgZm9ybWF0ZWQgPSBbXTtcblxuXHRcdFx0Zm9ybWF0ZWQucHVzaChcblx0XHRcdFx0ZHYuc2VjdGlvbkxpbmsoXG5cdFx0XHRcdFx0ZW50cnkuZmlsZS5wYXRoLFxuXHRcdFx0XHRcdFwiQ29udGVudFwiLFxuXHRcdFx0XHRcdGZhbHNlLFxuXHRcdFx0XHRcdGAke2ZtLnV1aWQuc2xpY2UoMCwgOCl9YCxcblx0XHRcdFx0KSxcblx0XHRcdCk7XG5cdFx0XHRjb25zdCBjcmVhdGVkQXQgPSBuZXcgRGF0ZShmbS5jcmVhdGVkX2F0KTtcblx0XHRcdGZvcm1hdGVkLnB1c2goY3JlYXRlZEF0LnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApKTtcblx0XHRcdGZvcm1hdGVkLnB1c2gocHJvamVjdCk7XG5cdFx0XHRmb3JtYXRlZC5wdXNoKGFyZWEpO1xuXHRcdFx0YXJyLnB1c2goZm9ybWF0ZWQpO1xuXHRcdH0pO1xuXG5cdFx0ZHYudGFibGUoW1widXVpZFwiLCBcImNyZWF0ZWRfYXRcIiwgXCJwcm9qZWN0XCIsIFwiYXJlYVwiXSwgYXJyKTtcblx0fVxuXG5cdGFzc2VydFRhc2tEb25lQXQoZHYsIHRhc2tJZCkge1xuXHRcdGNvbnN0IHRhc2sgPSBkdi5wYWdlcyhgXCIke3RoaXMudGFza0Rpcn0vJHt0YXNrSWR9XCJgKTtcblx0XHRpZiAodGFzay5sZW5ndGggPT09IDApIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgdGFzazogJHt0YXNrSWR9IGRvZXN0IG5vdCBleGlzdHNgKTtcblx0XHR9XG5cblx0XHRjb25zdCBmbSA9IHRhc2suZmlsZS5mcm9udG1hdHRlcjtcblx0XHRpZiAoZm0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGB0YXNrOiAke3Rhc2tJZH0gZG9lcyBub3QgaGF2ZSBhIGZyb250bWF0dGVyYCk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgbG9ncyA9IGR2XG5cdFx0XHQucGFnZXMoYFwiJHt0aGlzLmxvZ0Rpcn0vJHt0YXNrSWR9XCJgKVxuXHRcdFx0LnNvcnQoKGspID0+IGsuY3JlYXRlZF9hdCwgXCJhc2NcIik7XG5cdFx0aWYgKGxvZ3MubGVuZ3RoIDwgMSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGB0YXNrOiAke3Rhc2tJZH0gaGFzIG5vIExvZ3NgKTtcblx0XHR9XG5cblx0XHRjb25zdCBsYXN0RW50cnkgPSBsb2dzW2xvZ3MubGVuZ3RoIC0gMV07XG5cdFx0aWYgKGxhc3RFbnRyeS5maWxlLmZyb250bWF0dGVyLmRvbmVfYXQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRgdGFzazogJHt0YXNrSWR9IGxhc3QgZW50cnkgaXMgbWlzc2luZyAnZG9uZV9hdCcgZmllbGRgLFxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRjb25zdCBkb25lQXQgPSBuZXcgRGF0ZShsYXN0RW50cnkuZmlsZS5mcm9udG1hdHRlci5kb25lX2F0KTtcblx0XHRyZXR1cm4gW1xuXHRcdFx0ZHYuc2VjdGlvbkxpbmsoXG5cdFx0XHRcdHRhc2suZmlsZS5wYXRoLFxuXHRcdFx0XHRcIkNvbnRlbnRcIixcblx0XHRcdFx0ZmFsc2UsXG5cdFx0XHRcdGAke3Rhc2suZmlsZS5mcm9udG1hdHRlci51dWlkLnNsaWNlKDAsIDgpfWAsXG5cdFx0XHQpLFxuXHRcdFx0YCR7ZG9uZUF0LnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApfWAsXG5cdFx0XTtcblx0fVxuXG5cdGdldERvbmVUaW1lbGluZShkdikge1xuXHRcdC8vIHByZW5kcyBlbiBjb21wdGUgZG9pbmcgLT4gZG9uZSwgcGFzIGxlcyB0YXNrIHN1ciBsZXF1ZWxsZXMgZHUgdHJhdmFpbCBhIFx1MDBFOXRcdTAwRTkgZmFpdCBtYWlzIHF1aSBvbnQgXHUwMEU5dFx1MDBFOSBzdXNwZW5kXG5cdFx0Ly8gZGFpbHksIHRhc2sgdHJvcCBsb25ndWUgcG91ciBldHJlIGZhaXRlIGVuIHVuIHNpdHRpbmdcblx0XHRjb25zdCB0YXNrcyA9IGR2XG5cdFx0XHQucGFnZXMoYFwiJHt0aGlzLnRhc2tEaXJ9XCJgKVxuXHRcdFx0LndoZXJlKChwKSA9PiBwLnN0YXR1cyA9PT0gXCJkb25lXCIpO1xuXG5cdFx0Y29uc3QgYnVmZiA9IFtdO1xuXHRcdGZvciAoY29uc3QgdGFzayBvZiB0YXNrcykge1xuXHRcdFx0Y29uc3QgZm0gPSB0YXNrLmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0XHRpZiAoZm0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYHRhc2s6ICR7Zm0udXVpZH0gZG9lcyBub3QgaGF2ZSBhIGZyb250bWF0dGVyYCk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGxvZ3MgPSBkdlxuXHRcdFx0XHQucGFnZXMoYFwiJHt0aGlzLmxvZ0Rpcn0vJHtmbS51dWlkfVwiYClcblx0XHRcdFx0LnNvcnQoKGspID0+IGsuY3JlYXRlZF9hdCwgXCJhc2NcIik7XG5cdFx0XHRpZiAobG9ncy5sZW5ndGggPCAxKSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihgdGFzazogJHtmbS51dWlkfSBoYXMgbm8gTG9nc2ApO1xuXHRcdFx0XHQvLyB0aHJvdyBuZXcgRXJyb3IoYHRhc2s6ICR7dGFza0lkfSBoYXMgbm8gTG9nc2ApO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBsYXN0RW50cnkgPSBsb2dzW2xvZ3MubGVuZ3RoIC0gMV07XG5cdFx0XHRpZiAobGFzdEVudHJ5ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAobGFzdEVudHJ5LmZpbGUuZnJvbnRtYXR0ZXIuZG9uZV9hdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHRgdGFzazogJHtmbS51dWlkfSBsYXN0IGVudHJ5IGlzIG1pc3NpbmcgJ2RvbmVfYXQnIGZpZWxkYCxcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Zm0uZG9uZUF0ID0gbmV3IERhdGUobGFzdEVudHJ5LmZpbGUuZnJvbnRtYXR0ZXIuZG9uZV9hdCk7XG5cdFx0XHRidWZmLnB1c2godGFzayk7XG5cdFx0fVxuXG5cdFx0YnVmZi5zb3J0KChhLCBiKSA9PiB7XG5cdFx0XHRjb25zdCBkYXRlQSA9IG5ldyBEYXRlKGEuZmlsZS5mcm9udG1hdHRlci5kb25lQXQpO1xuXHRcdFx0Y29uc3QgZGF0ZUIgPSBuZXcgRGF0ZShiLmZpbGUuZnJvbnRtYXR0ZXIuZG9uZUF0KTtcblx0XHRcdHJldHVybiAoZGF0ZUEuZ2V0VGltZSgpIC0gZGF0ZUIuZ2V0VGltZSgpKSAqIC0xO1xuXHRcdH0pO1xuXG5cdFx0Y29uc3QgYXJyID0gW107XG5cdFx0YnVmZi5mb3JFYWNoKChlKSA9PiB7XG5cdFx0XHRhcnIucHVzaChbXG5cdFx0XHRcdGR2LnNlY3Rpb25MaW5rKFxuXHRcdFx0XHRcdGUuZmlsZS5wYXRoLFxuXHRcdFx0XHRcdFwiQ29udGVudFwiLFxuXHRcdFx0XHRcdGZhbHNlLFxuXHRcdFx0XHRcdGAke2UuZmlsZS5mcm9udG1hdHRlci51dWlkLnNsaWNlKDAsIDgpfWAsXG5cdFx0XHRcdCksXG5cdFx0XHRcdGAke2UuZmlsZS5mcm9udG1hdHRlci5kb25lQXQudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxNil9YCxcblx0XHRcdF0pO1xuXHRcdH0pO1xuXG5cdFx0ZHYudGFibGUoW1widXVpZFwiLCBcImRvbmVBdFwiXSwgYXJyKTtcblx0fVxuXG5cdGR1cmF0aW9uU3RyaW5nVG9TZWModmFsKSB7XG5cdFx0Y29uc3QgbXVsdCA9IHZhbC5zbGljZSgtMSk7XG5cdFx0bGV0IG0gPSAwO1xuXHRcdGlmIChtdWx0ID09PSBcImhcIikge1xuXHRcdFx0bSA9IDYwICogNjA7XG5cdFx0fSBlbHNlIGlmIChtdWx0ID09PSBcIm1cIikge1xuXHRcdFx0bSA9IDYwO1xuXHRcdH0gZWxzZSBpZiAobXVsdCA9PT0gXCJkXCIpIHtcblx0XHRcdG0gPSAyNCAqIDYwICogNjA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihgVW5oYW5kbGVkIGNhc2UgbXVsdDogJHttdWx0fWApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtICogcGFyc2VJbnQodmFsLnNsaWNlKDAsIC0xKSk7XG5cdH1cblxuXHR0ZXN0RHZGdW5jKCkge1xuXHRcdC8vIHByZW5kcyBlbiBjb21wdGUgZG9pbmcgLT4gZG9uZSwgcGFzIGxlcyB0YXNrIHN1ciBsZXF1ZWxsZXMgZHUgdHJhdmFpbCBhIFx1MDBFOXRcdTAwRTkgZmFpdCBtYWlzIHF1aSBvbnQgXHUwMEU5dFx1MDBFOSBzdXNwZW5kXG5cdFx0Ly8gZGFpbHksIHRhc2sgdHJvcCBsb25ndWUgcG91ciBldHJlIGZhaXRlIGVuIHVuIHNpdHRpbmdcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0Y29uc3QgZHYgPSBhcHAucGx1Z2lucy5wbHVnaW5zLmRhdGF2aWV3LmFwaTtcblx0XHRjb25zdCB0YXNrcyA9IGR2XG5cdFx0XHQucGFnZXMoYFwiJHt0aGlzLnRhc2tEaXJ9XCJgKVxuXHRcdFx0LndoZXJlKChwKSA9PiBwLnN0YXR1cyA9PT0gXCJkb25lXCIpO1xuXG5cdFx0Y29uc3QgYnVmZiA9IFtdO1xuXHRcdGZvciAoY29uc3QgdGFzayBvZiB0YXNrcykge1xuXHRcdFx0Y29uc3QgZm0gPSB0YXNrLmZpbGUuZnJvbnRtYXR0ZXI7XG5cdFx0XHRpZiAoZm0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYHRhc2s6ICR7Zm0udXVpZH0gZG9lcyBub3QgaGF2ZSBhIGZyb250bWF0dGVyYCk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGxvZ3MgPSBkdlxuXHRcdFx0XHQucGFnZXMoYFwiJHt0aGlzLmxvZ0Rpcn0vJHtmbS51dWlkfVwiYClcblx0XHRcdFx0LnNvcnQoKGspID0+IGsuY3JlYXRlZF9hdCwgXCJhc2NcIik7XG5cdFx0XHRpZiAobG9ncy5sZW5ndGggPCAxKSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihgdGFzazogJHtmbS51dWlkfSBoYXMgbm8gTG9nc2ApO1xuXHRcdFx0XHQvLyB0aHJvdyBuZXcgRXJyb3IoYHRhc2s6ICR7dGFza0lkfSBoYXMgbm8gTG9nc2ApO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBsYXN0RW50cnkgPSBsb2dzW2xvZ3MubGVuZ3RoIC0gMV07XG5cdFx0XHRpZiAobGFzdEVudHJ5ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAobGFzdEVudHJ5LmZpbGUuZnJvbnRtYXR0ZXIuZG9uZV9hdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHRgdGFzazogJHtmbS51dWlkfSBsYXN0IGVudHJ5IGlzIG1pc3NpbmcgJ2RvbmVfYXQnIGZpZWxkYCxcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Zm0uZG9uZUF0ID0gbmV3IERhdGUobGFzdEVudHJ5LmZpbGUuZnJvbnRtYXR0ZXIuZG9uZV9hdCk7XG5cdFx0XHRidWZmLnB1c2godGFzayk7XG5cdFx0fVxuXG5cdFx0YnVmZi5zb3J0KChhLCBiKSA9PiB7XG5cdFx0XHRjb25zdCBkYXRlQSA9IG5ldyBEYXRlKGEuZmlsZS5mcm9udG1hdHRlci5kb25lQXQpO1xuXHRcdFx0Y29uc3QgZGF0ZUIgPSBuZXcgRGF0ZShiLmZpbGUuZnJvbnRtYXR0ZXIuZG9uZUF0KTtcblx0XHRcdHJldHVybiAoZGF0ZUEuZ2V0VGltZSgpIC0gZGF0ZUIuZ2V0VGltZSgpKSAqIC0xO1xuXHRcdH0pO1xuXG5cdFx0Y29uc3QgYXJyID0gW107XG5cdFx0YnVmZi5mb3JFYWNoKChlKSA9PiB7XG5cdFx0XHRhcnIucHVzaChbXG5cdFx0XHRcdGR2LnNlY3Rpb25MaW5rKFxuXHRcdFx0XHRcdGUuZmlsZS5wYXRoLFxuXHRcdFx0XHRcdFwiQ29udGVudFwiLFxuXHRcdFx0XHRcdGZhbHNlLFxuXHRcdFx0XHRcdGAke2UuZmlsZS5mcm9udG1hdHRlci51dWlkLnNsaWNlKDAsIDgpfWAsXG5cdFx0XHRcdCksXG5cdFx0XHRcdGAke2UuZmlsZS5mcm9udG1hdHRlci5kb25lQXQudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxNil9YCxcblx0XHRcdF0pO1xuXHRcdH0pO1xuXG5cdFx0Ly8gZHYudGFibGUoW1widXVpZFwiLCBcImRvbmVBdFwiXSwgYXJyKTtcblx0fVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBLHNCQVdPOzs7QUNaQSxJQUFNLFFBQVE7QUFBQSxFQUNwQixPQUFPO0FBQUEsRUFDUCxZQUFZO0FBQUEsRUFDWixPQUFPO0FBQUEsRUFDUCxTQUFTO0FBQUEsRUFDVCxPQUFPO0FBQUEsRUFDUCxNQUFNO0FBQUEsRUFDTixVQUFVO0FBQUEsRUFDVixNQUFNO0FBQUEsRUFDTixhQUFhO0FBQUEsRUFDYixTQUFTO0FBQUEsRUFDVCxXQUFXO0FBQUEsRUFDWCxVQUFVO0FBQUEsRUFDVixTQUFTO0FBQUEsRUFDVCxPQUFPO0FBQ1I7QUFFTyxJQUFNLFNBQVM7QUFBQSxFQUNyQixNQUFNO0FBQUEsRUFDTixPQUFPO0FBQUEsRUFDUCxNQUFNO0FBQUEsRUFDTixPQUFPO0FBQUEsRUFDUCxTQUFTO0FBQUEsRUFDVCxPQUFPO0FBQ1I7QUFDTyxJQUFNLGFBQWE7QUFBQSxFQUN6QixTQUFTO0FBQUEsRUFDVCxVQUFVO0FBQUEsRUFDVixnQkFBZ0I7QUFBQSxFQUNoQixTQUFTO0FBQUEsRUFDVCxXQUFXO0FBQUEsRUFDWCxRQUFRO0FBQUEsRUFDUixRQUFRO0FBQUEsRUFDUixTQUFTO0FBQ1Y7QUFFTyxJQUFNLFFBQVE7QUFBQSxFQUNwQixVQUFVO0FBQUEsRUFDVixZQUFZO0FBQUEsRUFDWixXQUFXO0FBQUEsRUFDWCxNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixXQUFXO0FBQUEsRUFDWCxLQUFLO0FBQUEsRUFDTCxVQUFVO0FBQUEsRUFDVixPQUFPO0FBQUEsRUFDUCxTQUFTO0FBQUEsRUFDVCxLQUFLO0FBQUEsRUFDTCxRQUFRO0FBQUEsRUFDUixXQUFXO0FBQ1o7QUFFTyxJQUFNLFlB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
