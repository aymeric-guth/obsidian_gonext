/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  ExampleModal: () => ExampleModal,
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// constants.ts
var Paths = {
  Tasks: "813 Tasks",
  Components: "Components",
  Goals: "Goals",
  Slipbox: "803 Slipbox",
  Inbox: "800 Inbox",
  Refs: "802 Refs",
  Archives: "400 Archives",
  Logs: "600 Log",
  Attachments: "000 Attachments",
  Journal: "Journal",
  Resources: "Resources",
  Projects: "100 Projects",
  Domains: "Domains",
  Names: "Names"
};
var Status = {
  Todo: "todo",
  Doing: "doing",
  Done: "done",
  Maybe: "maybe",
  Standby: "standby",
  Trash: "trash"
};
var GoalStatus = {
  Reframe: "reframe",
  Research: "research",
  Operationalize: "operationalize",
  Planify: "planify",
  Dependant: "dependant",
  Active: "active",
  Failed: "failed",
  Success: "success"
};
var Types = {
  Fleeting: 13,
  Literature: 1,
  Permanent: 2,
  Task: 3,
  Praxis: 4,
  Provision: 5,
  Log: 6,
  Resource: 7,
  Media: 8,
  Project: 12,
  Org: 9,
  Domain: 10,
  Component: 11
};
var Namespace = {
  Area: "area",
  Context: "context",
  Layer: "layer",
  Org: "org",
  Project: "project"
};
var Default = {
  Area: "none",
  Context: "any",
  Layer: "none",
  Org: "none",
  Project: "none"
};

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
var i;
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// api.ts
async function notify(msg) {
  const PUSHOVER_URI = "api.pushover.net";
  const d = await app.vault.readJson(".pushover.json");
  const data = new URLSearchParams({
    message: msg,
    token: d.pushover_token,
    user: d.pushover_user
  });
  console.log(data.toString());
  await fetch(`https://${PUSHOVER_URI}/1/messages.json`, {
    method: "POST",
    // mode: 'no-cors',
    cache: "no-cache",
    headers: {
      "Content-type": "application/x-www-form-urlencoded"
    },
    body: data
  });
}
var FrontmatterJS = class {
  singular(values, field) {
    if (!Helper.nilCheck(this.fm[field])) {
      const value = this.fm[field];
      if (typeof value === "string") {
        if (!values.contains(value)) {
          values.push(value);
        }
      } else {
        console.warn(
          `'${field}' is ignored, invalid data-type: '${typeof this.fm[field]}'`
        );
      }
    }
  }
  plural(values, field) {
    if (!Helper.nilCheck(this.fm[field])) {
      if (!Array.isArray(this.fm[field])) {
        console.warn(
          `'${field}' is ignored, invalid data-type: '${field}'`
        );
      } else {
        for (const value of this.fm[field]) {
          if (typeof value === "string") {
            if (!values.contains(value)) {
              values.push(value);
            }
          } else {
            console.warn(
              `'${value}s.${value}' is ignored, invalid data-type: '${typeof value}'`
            );
          }
        }
      }
    }
  }
  constructor(page) {
    Assert.True(page !== void 0, "'page' is undefined");
    this.f = page.file;
    const f = this.f;
    Assert.True(f !== void 0, "'f' is undefined");
    this.fm = f.frontmatter;
    Assert.True(this.fm !== void 0, "'fm' is undefined");
    Assert.True(
      this.fm.uuid !== void 0,
      `'uuid' is undefined for '${this.f.path}'`
    );
    this.uuid = this.fm.uuid;
    this.version = this.fm.version;
    this.type = this.fm.type;
    this.createdAt = new Date(this.fm.created_at);
    this.at = this.fm.at !== void 0 ? new Date(this.fm.at) : new Date();
    this.before = this.fm.before !== void 0 ? new Date(this.fm.before) : new Date();
    this.after = this.fm.after !== void 0 ? new Date(this.fm.after) : new Date();
    this.components = [];
    this.domains = [];
    this.projects = [];
    this.contexts = [];
    this.traits = [];
    this.energy = this.fm.energy !== void 0 ? this.fm.energy : 9;
    const domains = [];
    const components = [];
    const projects = [];
    const names = [];
    const contexts = [];
    const contents = [];
    const traits = [];
    if (!Helper.nilCheck(this.fm.tags)) {
      if (!Array.isArray(this.fm.tags)) {
        console.warn("'tags' is ignored, invalid data-type");
        this.fm.tags = [];
      }
      for (const tag of this.fm.tags) {
        if (tag.slice(0, 7) === "domain/") {
          domains.push(tag.slice(7));
        } else if (tag.slice(0, 10) === "component/") {
          components.push(tag.slice(10));
        } else if (tag.slice(0, 8) === "project/") {
          projects.push(tag.slice(8));
        } else if (tag.slice(0, 5) === "name/") {
          names.push(tag.slice(5));
        } else if (tag.slice(0, 8) == "context/") {
          contexts.push(tag.slice(8));
        } else if (tag.slice(0, 8) == "content/") {
          contents.push(tag.slice(8));
        } else if (tag.slice(0, 6) == "trait/") {
          traits.push(tag.slice(6));
        }
      }
    }
    this.singular(domains, "domain");
    this.plural(domains, "domains");
    this.singular(components, "components");
    this.plural(components, "components");
    this.singular(projects, "project");
    this.plural(projects, "projects");
    this.singular(contents, "contents");
    this.plural(contents, "contents");
    this.singular(names, "name");
    this.plural(names, "names");
    this.plural(names, "alias");
    this.singular(traits, "trait");
    this.plural(traits, "traits");
    this.domains = domains;
    this.components = components;
    this.projects = projects;
    this.names = names;
    this.contexts = contexts;
    this.contents = contents;
    this.traits = traits;
  }
  getDomain(emptyDefault = true) {
    if (emptyDefault) {
      return this.domains[0];
    } else {
      return this.domains[0] === void 0 ? "unknown" : this.domains[0];
    }
  }
  getDomains() {
    return this.domains;
  }
  getTraits() {
    return this.traits;
  }
  getComponents() {
    return this.components;
  }
  getProject(emptyDefault = true) {
    if (emptyDefault) {
      return this.projects[0];
    } else {
      return this.projects[0] === void 0 ? "" : this.projects[0];
    }
  }
  getProjects() {
    return this.projects;
  }
  getName(emptyDefault = true) {
    if (emptyDefault) {
      return this.names[0];
    } else {
      return this.names[0] === void 0 ? "" : this.names[0];
    }
  }
  getContent(emptyDefault = true) {
    if (emptyDefault) {
      return this.contents[0];
    } else {
      return this.contents[0] === void 0 ? "" : this.contents[0];
    }
  }
  getNames() {
    return this.names;
  }
  getContext(emptyDefault = true) {
    if (emptyDefault) {
      return this.contexts[0];
    } else {
      return this.contexts[0] === void 0 ? "" : this.contexts[0];
    }
  }
  resolve(dv) {
    const domains = [];
    for (const domain of this.domains) {
      if (Helper.isUUID(domain)) {
        const pages = dv.pages(`"${Paths.Domains}"`).where((page) => page.file.frontmatter.uuid === domain);
        if (pages.length > 1) {
          throw new Error();
        } else if (pages.length === 1) {
          const page = pages[0];
          domains.push(page.file.frontmatter.name);
        }
      } else {
        const pages = dv.pages(`"${Paths.Domains}"`).where((page) => page.file.frontmatter.name === domain);
        if (pages.length > 1) {
          throw new Error();
        } else if (pages.length === 1) {
          const page = pages[0];
          domains.push(page.file.frontmatter.name);
        }
      }
    }
    if (domains.length !== this.domains.length) {
      console.warn(`Domain resolution failed for: ${this.domains}`);
    }
    this.domains = domains;
  }
};
var ValidationError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "ValidationError";
  }
};
var Assert = {
  True(predicate, message, strict = true) {
    if (!predicate) {
      if (strict) {
        throw new ValidationError(message);
      } else {
        console.error(message);
      }
    }
  },
  False(predicate, message, strict = false) {
    if (predicate) {
      if (strict) {
        throw new ValidationError(message);
      } else {
        console.error(message);
      }
    }
  }
};
var Helper = {
  nilCheck(val) {
    return val === void 0 || val === null;
  },
  getKeyFuck(groupBy) {
    switch (groupBy) {
      default:
      case "doneAt":
        return (entry) => entry.file.frontmatter.doneAt.toISOString().slice(0, 10);
        break;
      case "createdAt":
        return (entry) => entry.file.frontmatter.createdAt.toISOString().slice(0, 10);
        break;
      case "project":
        return (entry) => entry.file.frontmatter.project;
        break;
      case "area":
        return (entry) => entry.file.frontmatter.area;
        break;
    }
  },
  getKey(groupBy) {
    switch (groupBy) {
      default:
      case "doneAt":
        return (entry) => entry.doneAt.toISOString().slice(0, 10);
        break;
      case "createdAt":
        return (entry) => entry.createdAt.toISOString().slice(0, 10);
        break;
      case "project":
        return (entry) => entry.project;
        break;
      case "area":
        return (entry) => entry.area;
        break;
    }
  },
  numberTypeToString(val) {
    switch (val.type) {
      case Types.Fleeting:
        return "fleeting";
      case Types.Log:
        return "log";
      case Types.Project:
        return "project";
      case Types.Org:
        return "org";
      case Types.Domain:
        return "domain";
      case Types.Component:
        return "component";
      default:
        throw new Error(
          `numberTypeToString: type: "${val.type}" not implemented "${val.uuid}"`
        );
    }
  },
  roundToOneDecimal(val) {
    return Math.round(val * 10) / 10;
  },
  isChildTag(parent, child) {
    if (child.length <= parent.length + 1) {
      return false;
    } else if (child.slice(0, parent.length + 1) != `${parent}/`) {
      return false;
    }
    return true;
  },
  getField(field, defaultValue) {
    if (field === void 0 || field === null) {
      return defaultValue;
    } else {
      return field;
    }
  },
  getDate(dt) {
    if (dt === "" || dt === null) {
      return void 0;
    } else if (dt !== void 0) {
      dt = new Date(dt);
      if (isNaN(dt)) {
        return void 0;
      } else {
        return dt;
      }
    } else {
      return void 0;
    }
  },
  getTag(fm, type, emptyDefault = void 0) {
    let name = "";
    let defaultValue = "";
    if (type === "area") {
      name = Namespace.Area;
      defaultValue = Default.Area;
    } else if (type === "context") {
      name = Namespace.Context;
      defaultValue = Default.Context;
    } else if (type === "layer") {
      name = Namespace.Layer;
      defaultValue = Default.Layer;
    } else if (type === "org") {
      name = Namespace.Org;
      defaultValue = Default.Org;
    } else if (type === "project") {
      name = Namespace.Project;
      defaultValue = Default.Project;
    } else if (type == "domain") {
      name = "domain";
      defaultValue = "none";
    } else {
      throw new Error(`getTag got unsuported type: '${type}'`);
    }
    const len = name.length + 1;
    const defaultTag = `${name}/${defaultValue}`;
    let defaultRetVal = defaultTag;
    if (emptyDefault) {
      defaultRetVal = void 0;
    }
    if (fm === void 0) {
      return defaultRetVal;
    }
    const tags = fm.tags;
    if (tags === void 0 || tags.length === 0) {
      return defaultRetVal;
    }
    for (const tag of tags) {
      if (tag == defaultTag) {
        return defaultRetVal;
      }
      if (tag.length > len && tag.slice(0, len) == `${name}/`) {
        return tag;
      }
    }
    return defaultRetVal;
  },
  getName(fm) {
    const components = Helper.getComponents(fm);
    if (components.length < 1) {
      throw new Error(`Helper.getName() ${fm}`);
    }
    let name = void 0;
    let occurences = 0;
    for (const component of components) {
      if (component.slice(0, 15) === "component/name/") {
        name = component.slice(15);
        occurences += 1;
      }
    }
    if (occurences > 1) {
      throw new Error(
        `Helper.getName() ${fm} multiple occurences of 'component/name'`
      );
    }
    if (name === void 0) {
      throw new Error(
        `Helper.getName() ${fm} 'component/name' undefined`
      );
    }
    return name;
  },
  getComponents(fm) {
    const components = [];
    if (Helper.nilCheck(fm.tags)) {
      return [];
    }
    for (const tag of fm.tags) {
      if (tag.length > 10 && tag.slice(0, 10) === "component/") {
        components.push(tag);
      }
    }
    return components;
  },
  getArea(fm, emptyDefault = false) {
    return Helper.getTag(fm, "area", emptyDefault);
  },
  getContext(fm, emptyDefault = false) {
    return Helper.getTag(fm, "context", emptyDefault);
  },
  getDomain(fm, emptyDefault = false) {
    return Helper.getTag(fm, "domain", emptyDefault);
  },
  getLayer(fm, emptyDefault = false) {
    return Helper.getTag(fm, "layer", emptyDefault);
  },
  getOrg(fm, emptyDefault = false) {
    return Helper.getTag(fm, "org", emptyDefault);
  },
  getProject(fm, emptyDefault = false) {
    return Helper.getTag(fm, "project", emptyDefault);
  },
  durationStringToSec(val) {
    if (val === void 0 || val.length === 0) {
      return 0;
    }
    const mult = val.slice(-1);
    let m = 0;
    if (mult === "h") {
      m = 60 * 60;
    } else if (mult === "m") {
      m = 60;
    } else if (mult === "d") {
      m = 24 * 60 * 60;
    } else if (mult == "w") {
      m = 24 * 60 * 60 * 7;
    } else {
      console.warn(`Unhandled case val: ${val}`);
      return void 0;
    }
    return m * parseInt(val.slice(0, -1));
  },
  msecToStringDuration(val) {
    const oneHourInMsec = 36e5;
    const oneDayInMsec = 864e5;
    if (val >= 24 * oneHourInMsec) {
      return String(Helper.roundToOneDecimal(val / oneDayInMsec)).padStart(
        2,
        "0"
      ) + " d";
    } else {
      return String(Helper.roundToOneDecimal(val / oneHourInMsec)).padStart(
        2,
        "0"
      ) + " h";
    }
  },
  isUUID(val) {
    if (typeof val !== "string") {
      return false;
    }
    return val.length === 36;
  },
  sortByAge(a, b) {
    const fmA = new FrontmatterJS(a);
    const fmB = new FrontmatterJS(b);
    return fmA.createdAt.getTime() - fmB.createdAt.getTime();
  },
  sortByPriority(a, b) {
    const fmA = new FrontmatterJS(a);
    const fmB = new FrontmatterJS(b);
    return fmB.fm.priority - fmA.fm.priority;
  },
  sortByPriorityAndAge(a, b) {
    const fmA = new FrontmatterJS(a);
    const fmB = new FrontmatterJS(b);
    if (fmA.fm.priority !== fmB.fm.priority.priority) {
      return Helper.sortByPriority(a, b);
    } else {
      return Helper.sortByAge(a, b);
    }
  },
  sortByDuration(a, b) {
    const fmA = new FrontmatterJS(a);
    const fmB = new FrontmatterJS(b);
    return Helper.durationStringToSec(fmA.fm.time_estimate) - Helper.durationStringToSec(fmB.fm.time_estimate);
  },
  sortByPriorityAndDuration(a, b) {
    const fmA = new FrontmatterJS(a);
    const fmB = new FrontmatterJS(b);
    if (fmA.fm.priority !== fmB.fm.priority) {
      return Helper.sortByPriority(a, b);
    } else {
      return Helper.sortByDuration(a, b);
    }
  },
  sortByPriorityAndDurationAndAge(a, b) {
    const fmA = new FrontmatterJS(a);
    const fmB = new FrontmatterJS(b);
    if (fmA.fm.priority !== fmB.fm.priority) {
      return Helper.sortByPriority(a, b);
    } else if (fmA.fm.time_estimate !== fmB.fm.time_estimate) {
      return Helper.sortByDuration(a, b);
    } else {
      return Helper.sortByAge(a, b);
    }
  }
};
var AutoField = {
  tags(dv, fm, level = 2) {
    const tags = fm.tags;
    if (tags == void 0 || tags.length === 0) {
      return;
    }
    tags.sort();
    dv.header(level, "Tags");
    let s = "";
    for (const tag of tags) {
      s += ` #${tag}`;
    }
    dv.paragraph(s);
  },
  healmon(dv) {
    const fm = new FrontmatterJS(dv.current());
    const current = fm.createdAt.toISOString().slice(0, 10);
    const pages = dv.pages(`"${Paths.Journal}"`).where((page) => {
      const jFm = new FrontmatterJS(page);
      if (jFm.getProject() !== "homecook") {
        return false;
      }
      let jCurrent = null;
      const currentMinusOne = new Date(
        fm.createdAt.getTime() - 24 * 60 * 60 * 1e3
      );
      try {
        jCurrent = jFm.createdAt.toISOString().slice(0, 10);
      } catch (e) {
        dv.paragraph(
          `Invalid date: ${Renderer.makeLinkShortUUID(dv, page.file)}`
        );
        console.error(jFm);
      }
      if (currentMinusOne.toISOString().slice(0, 10) !== jCurrent) {
        return false;
      }
      return true;
    });
    dv.header(4, "repas (veille)");
    if (pages.length) {
      for (const page of pages) {
        dv.paragraph(Renderer.makeLinkShortUUID(dv, page.file));
      }
    }
  },
  authors(dv, fm) {
    const authors = fm.authors;
    if (authors === void 0 || authors.length === 0) {
      return;
    }
    dv.header(3, "Authors");
    dv.list(authors);
  },
  title(dv, fm) {
    const title = fm.alias;
    if (title === void 0 || title.length === 0) {
      return;
    }
    dv.header(3, title);
  },
  logs(dv, entries) {
    const buff = [];
    let totalTime = 0;
    for (const entry of entries) {
      const fme = entry.file.frontmatter;
      const e = [];
      let start = 0;
      let stop = 0;
      if (fme === void 0 || fme.created_at === void 0) {
        throw new Error(`Invalid frontmatter: ${fme.uuid}`);
      }
      start = new Date(fme.created_at);
      e.push(start.toISOString().slice(0, 10));
      if (fme.done_at === void 0) {
        stop = Date.now();
      } else {
        stop = new Date(fme.done_at);
      }
      totalTime += stop - start;
      e.push(
        dv.sectionLink(
          fme.uuid,
          "## Content",
          false,
          fme.uuid.slice(0, 8)
        )
      );
      e.push(Math.round((stop - start) / (1e3 * 60 * 60) * 10) / 10);
      if (fme.reviewed === void 0 || fme.reviewed === 0) {
        e.push(0);
      } else {
        e.push(fme.reviewed);
      }
      buff.push(e);
    }
    if (buff.length > 0) {
      dv.header(2, "Logs");
      dv.table(["created_at", "uuid", "session", "reviewed"], buff);
      if (totalTime > 0) {
        dv.paragraph(
          `_totalTime (h):_ ${Math.round(totalTime / (1e3 * 60 * 60) * 10) / 10}`
        );
      }
    }
  },
  media(dv) {
    const current = dv.current();
    const fm = current.file.frontmatter;
    const pages = dv.pages(`"${Paths.Refs}/${fm.ref_id}"`).array();
    if (pages.length !== 1) {
      return;
    }
    const media = pages[0];
    const mediaFm = media.file.frontmatter;
    AutoField.title(dv, mediaFm);
    dv.paragraph(Renderer.makeLinkAlias(dv, media.file));
    AutoField.authors(dv, mediaFm);
    AutoField.tags(dv, mediaFm, 3);
    const logEntries = dv.pages(`"${Paths.Logs}/${fm.uuid}"`).where((p) => p.type === 6).sort((k) => k.created_at, "desc");
    AutoField.logs(dv, logEntries);
  },
  autoFieldTitle(dv, fm) {
    const title = fm.alias;
    if (title == void 0) {
      return;
    }
    dv.header(1, title);
  },
  autoFieldAuthors(dv, fm) {
    const authors = fm.authors;
    if (authors === void 0 || authors.length === 0) {
      return;
    }
    dv.header(2, "Authors");
    dv.list(authors);
  },
  autoFieldTags(dv, fm) {
    const tags = fm.tags;
    if (tags == void 0 || tags.length === 0) {
      return;
    }
    tags.sort();
    dv.header(2, "Tags");
    let s = "";
    for (const tag of tags) {
      s += ` #${tag}`;
    }
    dv.paragraph(s);
  },
  literature(dv) {
    const current = dv.current();
    const fm = current.file.frontmatter;
    if (fm === void 0) {
      return;
    }
    if (Helper.nilCheck(fm.authors)) {
    } else {
      this.autoFieldTitle(dv, fm);
      this.autoFieldAuthors(dv, fm);
      this.autoFieldTags(dv, fm);
    }
  },
  goal(dv) {
    const current = dv.current();
    const fm = current.file.frontmatter;
    if (fm === void 0) {
      console.warn("fm is required");
      return;
    }
    const created_at = new Date(fm.created_at);
    const logEntries = dv.pages(`"${Paths.Logs}/${fm.uuid}"`).where((p) => p.type === 6).sort((k) => k.created_at, "desc");
    const buff = [];
    for (const entry of logEntries) {
      const fme = entry.file.frontmatter;
      const e = [];
      if (fme === void 0 || fme.created_at === void 0) {
        throw new Error(`Invalid frontmatter: ${fme.uuid}`);
      }
      const start = new Date(fme.created_at);
      e.push(start.toISOString().slice(0, 10));
      e.push(
        dv.sectionLink(
          fme.uuid,
          "## Content",
          false,
          fme.uuid.slice(0, 8)
        )
      );
      buff.push(e);
    }
    const before = new Date(fm.before);
    const timeframe = (before.getTime() - created_at.getTime()) / (1e3 * 3600 * 24);
    let timeframeText = "";
    dv.header(3, "Timeframe");
    if (timeframe > 0 && timeframe < 30) {
      timeframeText = "runaway";
    } else if (timeframe < 60) {
      timeframeText = "10,000 feet";
    } else if (timeframe < 360) {
      timeframeText = "20,000 feet";
    } else if (timeframe < 720) {
      timeframeText = "30,000 feet";
    } else if (timeframe < 1080) {
      timeframeText = "40,000 feet";
    } else {
      timeframeText = "50,000 feet";
    }
    dv.paragraph(timeframeText);
    if (buff.length > 0) {
      dv.header(2, "Reviews");
      dv.table(["reviewed_at", "uuid"], buff);
    }
  },
  daily(dv) {
    const current = dv.current().file.frontmatter;
    const currentAt = new Date(current.at);
    const currentAtShort = currentAt.toISOString().slice(0, 10);
    const gonext = app.plugins.plugins.obsidian_gonext;
    const noteHelper = new NoteHelper(gonext, dv, new Frontmatter(gonext));
    const pages = dv.pages(`"${Paths.Tasks}"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (current.uuid === fm.uuid) {
        return false;
      }
      if (fm.fm.status !== "todo" || fm.getProject() === "daily") {
        return false;
      }
      const now = currentAt;
      let fmAtShort = void 0;
      try {
        fmAtShort = fm.at.toISOString().slice(0, 10);
      } catch (e) {
        throw new Error(`${fm.uuid}`);
      }
      if (!noteHelper.isDoable(page, currentAt)) {
        return false;
      }
      if (page.file.frontmatter.at !== void 0 && fmAtShort === currentAtShort) {
        return true;
      }
      if (page.file.frontmatter.at !== void 0 && fm.at.getTime() < now.getTime()) {
        return true;
      }
      if (page.file.frontmatter.before !== void 0 && fm.before.getTime() > now.getTime()) {
        return true;
      }
      if (page.file.frontmatter.after !== void 0 && fm.after.getTime() < now.getTime()) {
        return true;
      }
      return false;
    }).sort((k) => k.at, "asc");
    if (pages.length === 0) {
      return;
    }
    const buff = [];
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      const h = String(fm.at.getHours()).padStart(2, "0");
      const m = String(fm.at.getMinutes()).padStart(2, "0");
      if (page.file.frontmatter.status === "done") {
        buff.push([
          `~~${Renderer.makeLinkShortUUID(dv, page.file, "Task")}~~`,
          `~~${h}:${m}~~`
        ]);
      } else {
        buff.push([
          `${Renderer.makeLinkShortUUID(dv, page.file, "Task")}`,
          `${h}:${m}`
        ]);
      }
    }
    dv.table(["uuid", "at"], buff);
    AutoField.dailyJoural(dv);
  },
  dailyJoural(dv) {
    const current = new FrontmatterJS(dv.current());
    const currentAtShort = current.at.toISOString().slice(0, 10);
    console.log(currentAtShort);
    const pages = dv.pages(`"Journal"`).where((page) => {
      const fm = new FrontmatterJS(page);
      const atShort = fm.createdAt.toISOString().slice(0, 10);
      if (atShort === currentAtShort) {
        return true;
      }
      return false;
    }).sort((k) => k.created_at, "asc");
    dv.header(2, "Journal");
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      if (page.file.frontmatter.alias !== void 0) {
        page.file.frontmatter.name = page.file.frontmatter.alias;
      } else if (fm.getProject() !== void 0) {
        page.file.frontmatter.name = fm.getProject();
      } else if (fm.getDomain() !== void 0) {
        page.file.frontmatter.name = fm.getDomain();
      }
      dv.paragraph(Renderer.makeLinkName(dv, page.file));
    }
  },
  dailyGoals(dv) {
    const current = dv.current().file.frontmatter;
    const currentAt = new Date(current.at);
    const pages = dv.pages(`"${Paths.Goals}"`).where((page) => {
      if (page.file.frontmatter.status !== "active") {
        return false;
      } else {
        return true;
      }
    }).sort((k) => k.at, "asc");
    if (pages.length === 0) {
      return;
    }
    for (const page of pages) {
      dv.paragraph(Renderer.makeLinkShortUUID(dv, page.file));
    }
  },
  task(dv) {
    const dvLib = new DvLib();
    dvLib.autoFieldTask(dv);
  },
  log(dv) {
    const dvLib = new DvLib();
    dvLib.autoFieldLog(dv);
  }
};
var Renderer = {
  makeLinkName(dv, f, anchor = "Content") {
    if (Helper.nilCheck(f.frontmatter.name)) {
      return Renderer.makeLinkShortUUID(dv, f, anchor);
    }
    return dv.sectionLink(f.path, anchor, false, `${f.frontmatter.name}`);
  },
  makeLinkAlias(dv, f, anchor = "Content") {
    if (Helper.nilCheck(f.frontmatter.alias)) {
      return Renderer.makeLinkShortUUID(dv, f, anchor);
    }
    return dv.sectionLink(f.path, anchor, false, `${f.frontmatter.alias}`);
  },
  makeLinkShortUUID(dv, f, anchor = "Content") {
    return dv.sectionLink(
      f.path,
      anchor,
      false,
      `${f.frontmatter.uuid.slice(0, 8)}`
    );
  },
  makeLink(dv, f, name = void 0, anchor = "Content") {
    return dv.sectionLink(f.path, anchor, false, name);
  },
  projectLogs(dv, data) {
    const cols = ["type", "task_id", "log_id", "took", "reviewed"];
    const buff = [];
    let totalTime = 0;
    for (const d of data) {
      const f = d.file;
      const fm = d.file.frontmatter;
      Assert.True(
        !Helper.nilCheck(fm.uuid),
        `"uuid" id not defined for: ${f.path}`
      );
      Assert.True(
        !Helper.nilCheck(fm.type),
        `"type" id not defined for: ${f.path}`
      );
      const createdAt = new Date(fm.created_at);
      const doneAt = new Date(fm.done_at);
      const delta = doneAt.getTime() - createdAt.getTime();
      totalTime += delta;
      const record = {
        taskId: "",
        logId: Renderer.makeLinkAlias(dv, f),
        took: Math.round(delta / (1e3 * 60 * 60) * 10) / 10,
        reviewed: Helper.nilCheck(fm.reviewed) ? 0 : fm.reviewed,
        type: void 0
      };
      const pages = dv.pages(`"${Paths.Tasks}/${fm.parent_id}"`).array();
      if (pages.length !== 1) {
        throw new Error(
          `parent task with id: "${fm.parent_id}" does not exists`
        );
      }
      const parent = pages[0];
      switch (parent.file.frontmatter.type) {
        case Types.Task:
          record.type = `<font color=8B0000>task</font>`;
          record.taskId = Renderer.makeLinkShortUUID(
            dv,
            parent.file,
            "Task"
          );
          break;
        case Types.Media:
          record.type = `<font color=00008B>media</font>`;
          record.taskId = Renderer.makeLinkShortUUID(
            dv,
            parent.file,
            "Content"
          );
          break;
        case Types.Praxis:
          record.type = `<font color=FF8C00>praxis</font>`;
          record.taskId = Renderer.makeLinkShortUUID(
            dv,
            parent.file,
            "Content"
          );
          break;
        case Types.Provision:
          record.type = `<font color=DC143C>provision</font>`;
          record.taskId = Renderer.makeLinkShortUUID(
            dv,
            parent.file,
            "Content"
          );
          break;
        default:
          throw new Error(
            `Renderer.projectLogs: type "${parent.file.frontmatter.type}" not implemented`
          );
      }
      buff.push([
        record.type,
        record.taskId,
        record.logId,
        record.took,
        record.reviewed
      ]);
    }
    dv.table(cols, buff);
  },
  goal(dv, data) {
    const buff = [];
    for (const fm of data) {
      const created_at = fm.createdAt;
      const logEntries = dv.pages(`"${Paths.Logs}/${fm.uuid}"`).where((p) => p.type === 6).sort((k) => k.created_at, "desc");
      const before = new Date(fm.fm.before);
      const timeframe = (before.getTime() - created_at.getTime()) / (1e3 * 3600 * 24);
      let timeframeText = "";
      if (timeframe > 0 && timeframe < 30) {
        timeframeText = "runaway";
      } else if (timeframe < 60) {
        timeframeText = "10,000 feet";
      } else if (timeframe < 360) {
        timeframeText = "20,000 feet";
      } else if (timeframe < 720) {
        timeframeText = "30,000 feet";
      } else if (timeframe < 1080) {
        timeframeText = "40,000 feet";
      } else {
        timeframeText = "50,000 feet";
      }
      buff.push([
        before.toISOString().slice(0, 10),
        dv.sectionLink(
          fm.uuid,
          "## Content",
          false,
          fm.uuid.slice(0, 8)
        ),
        fm.getDomain(),
        timeframeText
      ]);
    }
    dv.table(["deadline", "uuid", "domain", "timeframe"], buff);
  },
  inboxEntry(dv, data) {
    const cols = [
      "uuid",
      // "type",
      // "age",
      // "size",
      "name"
      // "project",
      // "domain",
      // "components",
    ];
    const buff = [];
    for (const d of data) {
      const f = d.file;
      const fm = d.file.frontmatter;
      Assert.True(
        !Helper.nilCheck(fm.uuid),
        `"uuid" id not defined for: ${f.path}`
      );
      Assert.True(
        !Helper.nilCheck(fm.type),
        `"type" id not defined for: ${f.path}`
      );
      const now = new Date();
      const delta = now.getTime() - fm.createdAt.getTime();
      const since = Helper.msecToStringDuration(delta);
      let name = "";
      if (fm.domain !== "domain/undefined") {
        name = fm.domain;
      } else if (fm.project !== void 0) {
        name = fm.project;
      } else {
        name = "\\-";
      }
      const record = {
        uuid: Helper.numberTypeToString(fm) === "fleeting" ? `&#128196 ${Renderer.makeLinkAlias(dv, f)}` : Renderer.makeLinkAlias(dv, f),
        // uuid: `&#9728 ${Renderer.makeLinkAlias(dv, f)}`,
        type: Helper.numberTypeToString(fm),
        since: `${since}`,
        size: f.size,
        project: fm.project === void 0 ? "\\-" : fm.project.slice(8),
        domain: fm.domain === void 0 ? "\\-" : fm.domain.slice(7),
        //Renderer.domainBase(dv, fm.domain),
        name
      };
      if (record.type === "log") {
        const pages = dv.pages(`"${Paths.Tasks}/${fm.parent_id}"`).array();
        if (pages.length !== 1) {
          throw new Error(`${fm.parent_id} ${fm.id}`);
        }
        const parent = pages[0];
        switch (parent.type) {
          case Types.Task:
            record.uuid = `&#128211 ${record.uuid}`;
            record.type = `<font color=8B0000>task</font>`;
            break;
          case Types.Praxis:
            record.uuid = `&#128188 ${record.uuid}`;
            record.type = `<font color=FF8C00>praxis</font>`;
            break;
          case Types.Media:
            record.uuid = `&#128191 ${record.uuid}`;
            record.type = `<font color=00008B>media</font>`;
            break;
          case Types.Provision:
            record.type = `<font color=DC143C>provision</font>`;
            break;
          default:
            break;
        }
      }
      buff.push([
        record.uuid,
        // record.type,
        // record.since,
        // record.size,
        record.name
        // record.project,
        // record.domain,
      ]);
    }
    dv.table(cols, buff);
  },
  resourceBase(dv, data) {
    const cols = ["uuid"];
    const buff = [];
    for (const d of data) {
      const f = d.file;
      const fm = d.file.frontmatter;
      Assert.True(
        !Helper.nilCheck(fm.uuid),
        `"uuid" id not defined for: ${f.path}`
      );
      buff.push([Renderer.makeLinkAlias(dv, f)]);
    }
    dv.table(cols, buff);
  },
  basicRelation(dv, data) {
    const cols = ["uuid", "name"];
    const buff = [];
    for (const d of data) {
      const f = d.file;
      const fm = d.file.frontmatter;
      Assert.True(
        !Helper.nilCheck(fm.uuid),
        `"uuid" id not defined for: ${f.path}`
      );
      buff.push([Renderer.makeLinkAlias(dv, f), fm.name]);
    }
    dv.table(cols, buff);
  },
  praxisBase(dv, data) {
    const buff = [];
    const cols = ["tasks", "uuid", "estimate"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      buff.push([
        dv.markdownTaskList(f.tasks),
        dv.fileLink(f.path, false, f.name.slice(0, 8)),
        fm.time_estimate
      ]);
    }
    dv.table(cols, buff);
  },
  waitingTask(dv, data) {
    const buff = [];
    const cols = ["tasks", "uuid", "estimate", "cause"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      buff.push([
        dv.markdownTaskList(f.tasks),
        dv.fileLink(f.path, false, f.name.slice(0, 8)),
        fm.time_estimate,
        fm.cause
      ]);
    }
    dv.table(cols, buff);
  },
  readyTask(dv, data) {
    const buff = [];
    const cols = ["uuid", "task", "estimate", "area"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      buff.push([
        Renderer.makeLinkAlias(dv, f, "Task"),
        dv.markdownTaskList(f.tasks),
        fm.time_estimate,
        Helper.getField(Helper.getArea(fm, true), "\\-")
      ]);
    }
    dv.table(cols, buff);
  },
  provisionBase(dv, data) {
    const buff = [];
    const cols = ["uuid", "supplier", "content", "estimate"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      buff.push([
        dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
        fm.supplier,
        dv.markdownTaskList(f.tasks),
        fm.time_estimate
      ]);
    }
    dv.table(cols, buff);
  },
  basicTaskJournal(dv, data) {
    const buff = [];
    const cols = ["uuid", "tasks", "estimate"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      const domain = Helper.getDomain(fm, true) === void 0 ? "\\-" : Helper.getDomain(fm);
      if (fm.ref_id === void 0) {
        buff.push([
          // journal.contains(fm.uuid) ? "->" : "\\-",
          dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
          dv.markdownTaskList(f.tasks),
          fm.time_estimate
        ]);
      } else {
        const ref = dv.pages(`"${Paths.Refs}/${fm.ref_id}"`).array();
        if (ref.length === 0) {
          throw new Error(
            `task: '${fm.uuid}' has an undefined ref_id: '${fm.ref_id}'`
          );
        } else {
          buff.push([
            dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
            Renderer.makeLinkAlias(dv, ref[0].file),
            fm.time_estimate,
            domain
          ]);
        }
      }
    }
    dv.table(cols, buff);
  },
  activeTask(dv, data) {
    const buff = [];
    const cols = ["uuid", "tasks", "session"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      const logs = dv.pages(`"${Paths.Logs}/${fm.uuid}"`).where((p) => p.type === 6).sort((k) => k.created_at, "desc");
      const last = logs[0];
      const createdAt = new Date(last.created_at);
      const now = new Date();
      buff.push([
        dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
        dv.markdownTaskList(f.tasks),
        ((t) => {
          return Math.round(t / (3600 * 1e3) * 10) / 10;
        })(now.getTime() - createdAt.getTime())
      ]);
    }
    dv.table(cols, buff);
  },
  basicTask(dv, data) {
    const buff = [];
    const cols = ["uuid", "tasks", "estimate", "domain"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      const domain = Helper.getDomain(fm, true) === void 0 ? "\\-" : Helper.getDomain(fm);
      if (fm.ref_id === void 0) {
        buff.push([
          dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
          dv.markdownTaskList(f.tasks),
          fm.time_estimate,
          domain
        ]);
      } else {
        const ref = dv.pages(`"${Paths.Refs}/${fm.ref_id}"`).array();
        if (ref.length === 0) {
          throw new Error(
            `task: '${fm.uuid}' has an undefined ref_id: '${fm.ref_id}'`
          );
        } else {
          buff.push([
            dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
            Renderer.makeLinkAlias(dv, ref[0].file),
            fm.time_estimate,
            domain
          ]);
        }
      }
    }
    dv.table(cols, buff);
  },
  logs(dv, entries) {
    const buff = [];
    let totalTime = 0;
    for (const entry of entries) {
      const fme = entry.file.frontmatter;
      const e = [];
      let start = 0;
      let stop = 0;
      if (fme === void 0 || fme.created_at === void 0) {
        throw new Error(`Invalid frontmatter: ${fme.uuid}`);
      }
      start = new Date(fme.created_at);
      e.push(start.toISOString().slice(0, 10));
      if (fme.done_at === void 0) {
        stop = Date.now();
      } else {
        stop = new Date(fme.done_at);
      }
      totalTime += stop - start;
      e.push(
        dv.sectionLink(
          fme.uuid,
          "## Content",
          false,
          fme.uuid.slice(0, 8)
        )
      );
      e.push(Math.round((stop - start) / (1e3 * 60 * 60) * 10) / 10);
      if (fme.reviewed === void 0 || fme.reviewed === 0) {
        e.push(0);
      } else {
        e.push(fme.reviewed);
      }
      buff.push(e);
    }
    if (buff.length > 0) {
      dv.header(2, "Logs");
      dv.table(["created_at", "uuid", "session", "reviewed"], buff);
      if (totalTime > 0) {
        dv.paragraph(
          `_totalTime (h):_ ${Math.round(totalTime / (1e3 * 60 * 60) * 10) / 10}`
        );
      }
    }
  },
  mediaWithLogs(dv, data) {
    const buff = [];
    const cols = ["uuid", "tasks", "estimate", "current", "domain"];
    for (const d of data) {
      const f = d.file;
      const fm = f.frontmatter;
      const ref = dv.pages(`"${Paths.Refs}/${fm.ref_id}"`).array();
      if (ref.length === 0) {
        throw new Error(
          `task: '${fm.uuid}' has an undefined ref_id: '${fm.ref_id}'`
        );
      }
      const domain = Helper.getDomain(fm, true) === void 0 ? "\\-" : Helper.getDomain(fm);
      const logEntries = dv.pages(`"${Paths.Logs}/${fm.uuid}"`).where((p) => p.type === Types.Log).sort((k) => k.created_at, "desc");
      let totalTime = 0;
      for (const entry of logEntries) {
        const fme = entry.file.frontmatter;
        const e = [];
        let start = 0;
        let stop = 0;
        if (fme === void 0 || fme.created_at === void 0) {
          throw new Error(`Invalid frontmatter: ${fme.uuid}`);
        }
        start = new Date(fme.created_at);
        try {
          e.push(start.toISOString().slice(0, 10));
        } catch (e2) {
          console.error(entry.uuid);
        }
        if (fme.done_at === void 0) {
          stop = Date.now();
        } else {
          stop = new Date(fme.done_at);
        }
        totalTime += stop - start;
      }
      buff.push([
        dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
        Renderer.makeLinkAlias(dv, ref[0].file),
        fm.time_estimate,
        `${Math.round(totalTime / (1e3 * 60 * 60) * 10) / 10}h`,
        domain
      ]);
    }
    dv.table(cols, buff);
  },
  taskDoneWithLogs(dv, data) {
    const buff = [];
    const cols = [
      "taskId",
      "logId",
      "createdAt",
      "doneAt",
      "timeEstimate",
      "took",
      "project"
    ];
    for (const d of data) {
      const f = d.file;
      const fm = d.file.frontmatter;
      const createdAt = new Date(fm.created_at);
      const doneAt = new Date(fm.done_at);
      const timeEstimate = "";
      const took = (doneAt - createdAt) / (1e3 * 3600);
      const pages = dv.pages(`"${Paths.Tasks}"`).where((page) => page.file.frontmatter.uuid === fm.parent_id);
      if (pages.length !== 1) {
        throw new Error();
      }
      const parent = pages[0];
      const parentFm = parent.file.frontmatter;
      const parentF = parent.file;
      buff.push([
        Renderer.makeLinkShortUUID(dv, parent.file, "Task"),
        Renderer.makeLinkShortUUID(dv, f),
        createdAt.toISOString().slice(0, 10),
        doneAt.toISOString().slice(0, 10),
        timeEstimate,
        ((t) => {
          return Math.round(t * 10) / 10;
        })(took),
        Helper.getProject(parentFm)
      ]);
    }
    dv.table(cols, buff);
  },
  projects(dv, pages) {
    const cols = ["name"];
    const buff = [];
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      buff.push([Renderer.makeLink(dv, page.file, fm.getName())]);
    }
    dv.table(cols, buff);
  },
  basicDoneTaskWithLogs(dv, data) {
    const cols = [
      "uuid",
      "createdAt",
      "doneAt",
      "timeEstimate",
      "took",
      "delta",
      "project",
      "area"
    ];
    dv.table(cols, data);
  },
  basicDoneTaskWithoutLogs(dv, data) {
    const cols = ["taskId", "createdAt", "project", "area"];
    dv.table(cols, data);
  },
  basicProgressedTaskWithLog(dv, data) {
    const cols = [
      "taskId",
      "logId",
      // "createdAt",
      // "doneAt",
      "took",
      // "tookAcc",
      "project"
      // "domain",
    ];
    dv.table(cols, data);
  },
  // dailyTask(dv, data) {
  // 	Renderer.makeLinkShortUUID(this.dv, page.file),
  // 	dv.
  // 				rs.push([
  // 					"paragraph",
  // 					Renderer.makeLinkShortUUID(this.dv, page.file),
  // 				]);
  // }
  do(dv, rs) {
    for (const row of rs) {
      switch (row[0]) {
        case "header":
          const [, level, heading] = row;
          dv.header(level, heading);
          break;
        case "paragraph":
          const [, text] = row;
          dv.paragraph(text);
          break;
        case "array":
          const [, renderer, data] = row;
          renderer(dv, data);
          break;
        case "stats":
          const [, name, unit, value] = row;
          dv.paragraph(`${name} (${unit}): ${value}`);
          break;
        default:
          throw new Error(`Unsuported opcode: "fuckoff"`);
      }
    }
  }
};
var Frontmatter = class {
  constructor(gonext) {
    this.gonext = gonext;
  }
  projectParseMeta(dv) {
    const current = dv.current();
    const projectName = current.file.folder.slice(
      Paths.Projects.length + 1
    );
    const projectDir = current.file.folder;
    if (projectName.contains("/")) {
      throw new Error(
        `projectDir: ${projectDir} folder: ${current.file.folder}`
      );
    }
    const pages = dv.pages(`"${projectDir}/meta"`).array();
    if (pages.length !== 1) {
      throw new Error(`len: ${pages.length}`);
    }
    const fm = pages[0].file.frontmatter;
    const uuid = fm.uuid;
    if (Helper.nilCheck(uuid)) {
      throw new Error(`project 'uuid' is not defined`);
    }
    const name = fm.name;
    if (Helper.nilCheck(name)) {
      throw new Error(`'name' is not defined`);
    }
    const domains = fm.domains;
    if (!Array.isArray(domains)) {
      throw new Error(`'domains' must be of array type`);
    }
    return {
      uuid,
      name,
      domains
    };
  }
  getCreatedAt(f) {
    return Helper.nilCheck(f.frontmatter.created_at) ? new Date(f.ctime.ts) : new Date(f.frontmatter.created_at);
  }
  getCurrentFrontmatter() {
    const file = this.gonext.workspace.getActiveFile();
    const fileContent = this.gonext.metadataCache.getFileCache(file);
    if (fileContent === void 0) {
      return void 0;
    }
    const fm = fileContent.frontmatter;
    if (fm === void 0) {
      return void 0;
    }
    return fm;
  }
  parseListByNamespace(fm) {
    const byAreas = fm.by_areas === void 0 ? [] : fm.by_areas;
    const byContexts = fm.by_contexts === void 0 ? [] : fm.by_contexts;
    const byLayers = fm.by_layers === void 0 ? [] : fm.by_layers;
    const byOrgs = fm.by_orgs === void 0 ? [] : fm.by_orgs;
    const byProjects = fm.by_projects === void 0 ? [] : fm.by_projects;
    return [byAreas, byContexts, byLayers, byOrgs, byProjects];
  }
  parseListBeforeAfter(fm) {
    const before = Helper.getDate(fm.before);
    const after = Helper.getDate(fm.after);
    return [before, after];
  }
  parseListFilterBy(fm) {
    if (fm === void 0) {
      return [];
    }
    const filterBy = fm.filter_by;
    if (!Array.isArray(filterBy)) {
      return [];
    }
    return filterBy;
  }
  parseListGroupBy(fm) {
    if (fm === void 0) {
      return "";
    }
    const groupBy = fm.group_by;
    if (!(typeof groupBy === "undefined") && !(typeof groupBy === "string")) {
      return "";
    }
    return groupBy;
  }
  parseAllProgressedTasks() {
    const fm = this.getCurrentFrontmatter();
    if (fm === void 0) {
      throw new Error(`Invalid frontmatter, cannot proceed`);
    }
    const groupBy = this.parseListGroupBy(fm);
    const filterBy = this.parseListFilterBy(fm);
    const [before, after] = this.parseListBeforeAfter(fm);
    return [groupBy, filterBy, before, after];
  }
  parseAllDoneTasks() {
    return this.parseAllProgressedTasks();
  }
  parseAllDoneTaskWithoutLog() {
    return this.parseAllProgressedTasks();
  }
  parseAllTodoAdHoc() {
    const fm = this.getCurrentFrontmatter();
    if (fm === void 0) {
      throw new Error(`Invalid frontmatter, cannot proceed`);
    }
    const groupBy = this.parseListGroupBy(fm);
    const filterBy = this.parseListFilterBy(fm);
    const [before, after] = this.parseListBeforeAfter(fm);
    const minPriority = Helper.getField(fm.min_priority, 0);
    return [groupBy, filterBy, before, after, minPriority];
  }
  parseInbox() {
    const fm = this.getCurrentFrontmatter();
    if (fm === void 0) {
      return [[], [], 0, 4294967295];
    }
    const source = Helper.nilCheck(fm.source) ? ["logs", "fleeting"] : fm.source;
    const groupBy = Helper.nilCheck(fm.group_by) ? "none" : fm.group_by;
    const filterBy = this.parseListFilterBy(fm);
    const minSize = Helper.nilCheck(fm.min_size) ? 0 : fm.min_size;
    const maxSize = Helper.nilCheck(fm.max_size) ? 4294967295 : fm.max_size;
    return [source, groupBy, filterBy, minSize, maxSize];
  }
  parseTodoList() {
    const fm = this.getCurrentFrontmatter();
    if (fm === void 0) {
      return [[], [], [], [], [], 0];
    }
    const [byAreas, byContexts, byLayers, byOrgs, byProjects] = this.parseListByNamespace(fm);
    const minPriority = Helper.getField(fm.min_priority, 0);
    return [byAreas, byContexts, byLayers, byOrgs, byProjects, minPriority];
  }
  parseDoneList() {
    const fm = this.getCurrentFrontmatter();
    if (fm === void 0) {
      return [[], [], [], [], [], [], []];
    }
    const [byAreas, byContexts, byLayers, byOrgs, byProjects] = this.parseListByNamespace(fm);
    const [before, after] = this.parseListBeforeAfter(fm);
    const fields = Helper.getField(fm.fields, []);
    const stats = Helper.getField(fm.stats, []);
    return [
      byAreas,
      byContexts,
      byLayers,
      byOrgs,
      byProjects,
      fields,
      stats,
      before,
      after
    ];
  }
};
var NoteHelper = class {
  constructor(gonext, dv, frontmatter) {
    this.gonext = gonext;
    this.dv = dv;
    this.frontmatter = frontmatter;
  }
  isDoable(task, at = void 0) {
    const fm = task.file.frontmatter;
    if (fm.status !== Status.Todo) {
      return false;
    }
    if (fm.after !== void 0) {
      const after = new Date(fm.after);
      if (Date.now() <= after.getTime()) {
        return false;
      }
    }
    if (at !== void 0) {
      const fmAt = new Date(fm.at);
      fmAt.setHours(0);
      fmAt.setMinutes(0);
      fmAt.setSeconds(0);
      if (at.getTime() < fmAt.getTime()) {
        return false;
      }
    } else {
      if (fm.at !== void 0) {
        const at2 = new Date(fm.at);
        if (Date.now() <= at2.getTime()) {
          return false;
        }
      }
    }
    const deps = fm.needs;
    if (deps === void 0 || deps.length === 0) {
      return true;
    }
    if (this.hasPendingDependencies(deps)) {
      return false;
    }
    return true;
  }
  hasPendingDependencies(deps) {
    for (const dep of deps) {
      const task = this.dv.pages(`"${Paths.Tasks}/${dep}"`).array();
      if (task.length === 0) {
        console.warn(
          `hasPendingDependencies: "${Paths.Tasks}/${dep}" task does not exists`
        );
        continue;
      }
      const fm = task[0].file.frontmatter;
      if (fm.type !== Types.Task && fm.type !== Types.Provision && fm.type !== Types.Praxis) {
        continue;
      }
      if (fm.status === Status.Todo) {
        return true;
      }
    }
    return false;
  }
  isChildTag(parent, child) {
    if (child.length <= parent.length + 1) {
      return false;
    } else if (child.slice(0, parent.length + 1) != `${parent}/`) {
      return false;
    }
    return true;
  }
  getNamespaceContent(ns) {
    const children = [];
    const pages = this.dv.pages(`#${ns}`);
    for (const p of pages) {
      const tags = p.file.frontmatter.tags;
      if (tags === void 0 || tags.length === 0) {
        continue;
      }
      for (const tag of tags) {
        if (this.isChildTag(ns, tag)) {
          const t = tag.slice(ns.length + 1);
          if (!children.contains(t)) {
            children.push(t);
          }
        }
      }
    }
    return children;
  }
  isLastRevision(page) {
    const revisionList = (dv, root, current) => {
      let head = current;
      while (true) {
        const pages = dv.pages(`"${root}"`).where(
          (page2) => page2.file.frontmatter.next === head.file.frontmatter.uuid
        );
        if (pages.length > 1) {
          throw new Error();
        } else if (pages.length === 0) {
          break;
        }
        head = pages[0];
      }
      const buff = [];
      let cur = head;
      while (true) {
        buff.push(cur);
        const fm2 = cur.file.frontmatter;
        if (fm2.next === void 0) {
          break;
        }
        const pages = dv.pages(`"${root}/${fm2.next}"`);
        if (pages.length === 0) {
          break;
        }
        cur = pages[0];
      }
      return buff;
    };
    const note = page;
    const fm = note.file.frontmatter;
    let revisions = [];
    switch (fm.type) {
      case Types.Permanent:
        revisions = revisionList(this.dv, Paths.Slipbox, note);
        break;
      case Types.Resource:
        revisions = revisionList(this.dv, Paths.Resources, note);
        break;
      default:
        throw new Error();
    }
    if (revisions.length <= 1) {
      return true;
    }
    return revisions[0].file.frontmatter.uuid === fm.uuid;
  }
};
var Generator = class {
  constructor(app2) {
    this.app = app2;
    this.dv = app2.dv;
    this.gonext = app2.gonext;
  }
  fleeting() {
    const dt = new Date();
    const note = {
      uuid: v4_default(),
      type: 13,
      version: "0.0.4",
      created_at: dt.toISOString(),
      path: "",
      data: ""
    };
    note.path = `800 Inbox/${note.uuid}.md`;
    note.data = `---
type: 13
uuid: "${note.uuid}"
created_at: "${note.created_at}"
version: "0.0.4"
---
## Content
`;
    const f = this.app.vault.create(note.path, note.data).then((f2) => {
      return f2;
    });
    const active = this.app.workspace.activeLeaf;
    const root = active.parent;
    this.app.workspace.createLeafInParent(root, root.children.length + 1);
    const leaf = root.children[root.children.length - 1];
    f.then((file) => {
      leaf.openFile(file, { active: true });
    });
  }
  journalEntry() {
    const dt = new Date();
    const note = {
      uuid: v4_default(),
      type: 20,
      version: "0.0.4",
      created_at: dt.toISOString(),
      path: "",
      data: ""
    };
    note.path = `Journal/${note.uuid}.md`;
    note.data = `---
type: 20
uuid: "${note.uuid}"
created_at: "${note.created_at}"
version: "0.0.4"
tags:
    - project/mission
---
## Content
### entry
`;
    return this.app.vault.create(note.path, note.data).then((f) => {
      return f;
    });
  }
};
var ListMaker = class {
  constructor(gonext, dv, frontmatter) {
    this.gonext = gonext;
    this.dv = dv;
    this.frontmatter = frontmatter;
    this.noteHelper = new NoteHelper(gonext, dv, frontmatter);
  }
  nameInNamespace(fm, ns) {
    let found = false;
    if (ns.length === 0) {
      return true;
    }
    for (const a of ns) {
      const root = a.split("/");
      Assert.True(root.length === 2, `Invalid tag: '${a}'`);
      const parent = root[0].slice(0, 1) === "!" ? root[0].slice(1) : root[0];
      const name = Helper.getTag(fm, parent);
      if (a.slice(0, 1) === "!") {
        if (name === a.slice(1)) {
          return false;
        } else {
          found = true;
        }
      } else {
        if (name === a) {
          found = true;
        } else {
          found = false;
        }
      }
    }
    return found;
  }
  myNameInNamespace(name, ns) {
    let found = false;
    if (ns.length === 0) {
      return true;
    }
    for (const a of ns) {
      if (a.slice(0, 1) === "!") {
        if (name === a.slice(1)) {
          return false;
        } else {
          found = true;
        }
      } else {
        if (name === a) {
          found = true;
        } else {
          found = false;
        }
      }
    }
    return found;
  }
  filterByNamespace(fm, byAreas, byContexts, byLayers, byOrgs, byProjects) {
    if (!this.myNameInNamespace(Helper.getArea(fm), byAreas)) {
      return false;
    }
    if (!this.myNameInNamespace(Helper.getContext(fm), byContexts)) {
      return false;
    }
    if (!this.myNameInNamespace(Helper.getLayer(fm), byLayers)) {
      return false;
    }
    if (!this.myNameInNamespace(Helper.getOrg(fm), byOrgs)) {
      return false;
    }
    if (!this.myNameInNamespace(Helper.getProject(fm), byProjects)) {
      return false;
    }
    return true;
  }
  filterByDate(dt, before, after) {
    if (before !== void 0 && dt.getTime() > before.getTime()) {
      return false;
    }
    if (after !== void 0 && dt.getTime() < after.getTime()) {
      return false;
    }
    return true;
  }
  goals() {
    const rs = [];
    const bins = {};
    bins[GoalStatus.Reframe] = [];
    bins[GoalStatus.Research] = [];
    bins[GoalStatus.Operationalize] = [];
    bins[GoalStatus.Planify] = [];
    bins[GoalStatus.Dependant] = [];
    bins[GoalStatus.Active] = [];
    bins[GoalStatus.Success] = [];
    bins[GoalStatus.Failed] = [];
    const pages = this.dv.pages(`"${Paths.Goals}"`).where((page) => {
      const fmp = page.file.frontmatter;
      if (bins[fmp.status] === void 0) {
        return true;
      } else {
        const fm = new FrontmatterJS(page);
        bins[fmp.status].push(fm);
        return false;
      }
    });
    const keys = Object.keys(bins);
    keys.sort();
    for (const k of keys) {
      const buff = bins[k];
      buff.sort((a, b) => {
        const dta = new Date(a.fm.before);
        const dtb = new Date(b.fm.before);
        return dta.getTime() - dtb.getTime();
      });
    }
    const displayGoals = (k, rs2) => {
      rs2.push(["header", 3, k]);
      const buff = bins[k];
      rs2.push(["array", Renderer.goal, buff]);
    };
    rs.push(["header", 2, "operational"]);
    displayGoals("active", rs);
    displayGoals("planify", rs);
    rs.push(["header", 2, "non-operational"]);
    displayGoals("reframe", rs);
    displayGoals("research", rs);
    displayGoals("operationalize", rs);
    rs.push(["header", 2, "done"]);
    displayGoals("success", rs);
    displayGoals("failed", rs);
    return rs;
  }
  projectTasksSheetRelationFrontmatter(dv) {
    const current = dv.current();
    const fm = new FrontmatterJS(current);
    return {
      name: fm.getName(),
      uuid: fm.uuid,
      active: fm.fm.active === void 0 || fm.fm.active === true ? true : false
    };
  }
  projectTasksSheetRelation(dv) {
    const project = this.projectTasksSheetRelationFrontmatter(dv);
    const rs = [];
    const bins = {
      nextAction: [],
      waitingFor: [],
      somedayMaybe: []
    };
    {
      const pages2 = dv.pages(`"Journal"`).where((page) => {
        const fm = new FrontmatterJS(page);
        return fm.getProject() === project.name;
      }).sort((k) => k.created_at, "desc");
      if (pages2.length > 0) {
        rs.push(["header", 2, `Journal (${pages2.length})`]);
        for (const page of pages2) {
          const fm = new FrontmatterJS(page);
          const text = Renderer.makeLink(
            dv,
            fm.f,
            `${fm.createdAt.toISOString().slice(0, 10)}`,
            "entry"
          );
          rs.push(["paragraph", text]);
        }
      }
    }
    const pages = dv.pages(`"${Paths.Tasks}"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (fm.fm.status === "done") {
        return false;
      }
      if (["daily", "weekly", "monthly"].contains(project.name)) {
        return false;
      } else if (project.name === "adhoc" && fm.getProject() === void 0) {
        page.file.frontmatter.project = "adhoc";
        return true;
      } else if (project.name === fm.getProject()) {
        return true;
      } else {
        return false;
      }
    });
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      if (this.noteHelper.isDoable(page)) {
        if (fm.fm.priority > 0) {
          bins.nextAction.push(page);
        } else {
          bins.somedayMaybe.push(page);
        }
      } else {
        bins.waitingFor.push(page);
      }
    }
    if (bins.nextAction.length > 0) {
      rs.push(["header", 2, `Next Actions (${bins.nextAction.length})`]);
      bins.nextAction.sort(Helper.sortByPriorityAndDurationAndAge);
      rs.push(["array", Renderer.basicTaskJournal, bins.nextAction]);
    }
    if (bins.waitingFor.length > 0) {
      rs.push(["header", 2, `Waiting (${bins.waitingFor.length})`]);
      bins.waitingFor.sort(Helper.sortByPriorityAndDurationAndAge);
      rs.push(["array", Renderer.basicTaskJournal, bins.waitingFor]);
    }
    if (bins.somedayMaybe.length > 0) {
      rs.push(["header", 2, `Maybe (${bins.somedayMaybe.length})`]);
      bins.somedayMaybe.sort(Helper.sortByPriorityAndDurationAndAge);
      rs.push(["array", Renderer.basicTaskJournal, bins.somedayMaybe]);
    }
    return rs;
  }
  projectLogsSheetRelation(dv) {
    const project = this.projectTasksSheetRelationFrontmatter(dv);
    const filterBy = [];
    const rs = [];
    rs.push(["header", 2, "Logs"]);
    const logs = this.dv.pages(`"${Paths.Logs}"`).where((page) => {
      if (page.type !== Types.Log) {
        return false;
      }
      if (page.file.frontmatter.reviewed > 0) {
        return false;
      }
      return true;
    });
    const buff = {};
    for (const e of logs) {
      const fm = e.file.frontmatter;
      if (filterBy.length > 0 && !this.nameInNamespace(fm, filterBy)) {
        continue;
      }
      fm.createdAt = this.frontmatter.getCreatedAt(e.file);
      Assert.True(
        !Helper.nilCheck(fm.parent_id),
        `Missing field "parent_id" from log: "${fm.uuid}"`
      );
      const parent = this.dv.pages(`"${Paths.Tasks}/${fm.parent_id}"`).array();
      if (parent.length !== 1) {
        continue;
      }
      Assert.True(
        parent.length === 1,
        `Parent: ${fm.parent_id} not found for log: "${fm.uuid}"`
      );
      fm.project = Helper.getProject(parent[0].file.frontmatter);
      fm.area = Helper.getArea(parent[0].file.frontmatter, true);
      if (fm.project !== `project/${project.name === "adhoc" ? "none" : project.name}`) {
        continue;
      }
      if (Helper.nilCheck(fm.done_at)) {
        continue;
      }
      const date = fm.done_at.slice(0, 10);
      if (buff[date] === void 0) {
        buff[date] = [e];
      } else {
        buff[date].push(e);
      }
    }
    const keys = Object.keys(buff);
    keys.sort();
    for (const date of keys) {
      buff[date].sort(
        (a, b) => b.file.frontmatter.createdAt.getTime() - a.file.frontmatter.createdAt.getTime()
      );
    }
    for (const date of keys.reverse()) {
      rs.push(["header", 3, date]);
      rs.push(["array", Renderer.projectLogs, buff[date]]);
    }
    return rs;
  }
  getProjectLogs(dv, project) {
    const logs = this.dv.pages(`"${Paths.Logs}"`).where((page) => {
      if (page.type !== Types.Log) {
        return false;
      }
      return true;
    });
    const buff = [];
    for (const e of logs) {
      const fm = e.file.frontmatter;
      Assert.True(
        !Helper.nilCheck(fm.parent_id),
        `Missing field "parent_id" from log: "${fm.uuid}"`
      );
      const parent = this.dv.pages(`"${Paths.Tasks}/${fm.parent_id}"`).array();
      if (parent.length !== 1) {
        continue;
      }
      fm.project = Helper.getProject(parent[0].file.frontmatter);
      fm.area = Helper.getArea(parent[0].file.frontmatter, true);
      if (fm.project !== `project/${project.name === "adhoc" ? "none" : project.name}`) {
        continue;
      }
      if (Helper.nilCheck(fm.done_at)) {
        continue;
      }
      buff.push(e);
    }
    return buff;
  }
  projectLogsSheet(dv) {
    const project = this.frontmatter.projectParseMeta(dv);
    const fml = this.frontmatter.getCurrentFrontmatter();
    if (fml === void 0) {
      throw new Error(`Invalid frontmatter, cannot proceed`);
    }
    const before = Helper.nilCheck(fml.before) ? new Date(0) : new Date(fml.before);
    const after = Helper.nilCheck(fml.after) ? new Date() : new Date(fml.after);
    const filterBy = this.frontmatter.parseListFilterBy(fml);
    const rs = [];
    let totalTime = 0;
    rs.push(["header", 1, project.name]);
    const logs = this.dv.pages(`"${Paths.Logs}"`).where((page) => {
      if (page.type !== Types.Log) {
        return false;
      }
      return true;
    });
    const buff = {};
    for (const e of logs) {
      const fm = e.file.frontmatter;
      if (filterBy.length > 0 && !this.nameInNamespace(fm, filterBy)) {
        continue;
      }
      fm.createdAt = this.frontmatter.getCreatedAt(e.file);
      Assert.True(
        !Helper.nilCheck(fm.parent_id),
        `Missing field "parent_id" from log: "${fm.uuid}"`
      );
      const parent = this.dv.pages(`"${Paths.Tasks}/${fm.parent_id}"`).array();
      if (parent.length !== 1) {
        continue;
      }
      fm.project = Helper.getProject(parent[0].file.frontmatter);
      fm.area = Helper.getArea(parent[0].file.frontmatter, true);
      if (fm.project !== `project/${project.name === "adhoc" ? "none" : project.name}`) {
        continue;
      }
      if (Helper.nilCheck(fm.done_at)) {
        continue;
      }
      const date = fm.done_at.slice(0, 10);
      const createdAt = new Date(fm.created_at);
      const doneAt = new Date(fm.done_at);
      if (createdAt > before) {
        continue;
      }
      if (createdAt < after) {
        continue;
      }
      if (buff[date] === void 0) {
        buff[date] = [e];
      } else {
        buff[date].push(e);
      }
      const delta = doneAt.getTime() - createdAt.getTime();
      totalTime += delta;
    }
    dv.paragraph(
      `_totalTime (h):_ ${Math.round(totalTime / (1e3 * 60 * 60) * 10) / 10}`
    );
    const keys = Object.keys(buff);
    keys.sort();
    for (const date of keys) {
      buff[date].sort(
        (a, b) => b.file.frontmatter.createdAt.getTime() - a.file.frontmatter.createdAt.getTime()
      );
    }
    for (const date of keys.reverse()) {
      rs.push(["header", 3, date]);
      rs.push(["array", Renderer.projectLogs, buff[date]]);
    }
    return rs;
  }
  logs() {
    const [groupBy, filterBy, before, after] = this.frontmatter.parseAllProgressedTasks();
    const tasks = this.dv.pages(`"${Paths.Tasks}"`).where((page) => page.file.frontmatter.status !== "doing");
    const buff = [];
    for (const task of tasks) {
      const fm = task.file.frontmatter;
      if (filterBy.length > 0 && !this.nameInNamespace(fm, filterBy)) {
        continue;
      }
      const timeEstimate = Helper.durationStringToSec(fm.time_estimate);
      if (timeEstimate === void 0 && fm.time_estimate !== void 0) {
        throw new Error(
          `Invalid value: "${fm.time_estimate}" for entry: "${fm.uuid}"`
        );
      } else {
        fm.timeEstimate = timeEstimate;
      }
      const logs = this.dv.pages(`"${Paths.Logs}/${fm.uuid}"`).where((page) => page.type === Types.Log).sort((k) => k.created_at, "asc");
      if (logs.length < 1) {
        continue;
      }
      fm.took = 0;
      const project = Helper.getField(Helper.getProject(fm, true), "");
      const area = Helper.getField(Helper.getArea(fm, true), "");
      for (const log of logs) {
        const fml = log.file.frontmatter;
        const entry = {
          alias: fm.alias,
          uuid: fm.uuid,
          logId: fml.uuid,
          estimate: fm.timeEstimate,
          project,
          area,
          domain: Helper.getField(Helper.getDomain(fm, true), ""),
          path: task.file.path,
          logPath: log.file.path,
          createdAt: void 0,
          doneAt: void 0,
          took: void 0,
          tookAcc: void 0,
          deltaAcc: void 0
        };
        if (fml.created_at === void 0) {
          console.error(log);
          throw new Error(
            `task: ${fm.uuid} last entry is missing 'created_at' field`
          );
        }
        if (fml.done_at === void 0) {
          console.error(log);
          throw new Error(
            `task: ${fm.uuid} last entry is missing 'done_at' field`
          );
        }
        entry.createdAt = new Date(fml.created_at);
        entry.doneAt = new Date(fml.done_at);
        if (!this.filterByDate(entry.doneAt, before, after)) {
          continue;
        }
        const took = (entry.doneAt.getTime() - entry.createdAt.getTime()) / 1e3;
        fm.took += took;
        entry.took = took;
        entry.tookAcc = fm.took;
        entry.deltaAcc = timeEstimate - fm.took;
        buff.push(entry);
      }
    }
    const keyGetter = Helper.getKey(groupBy);
    const bins = {};
    for (const entry of buff) {
      let d = void 0;
      try {
        d = keyGetter(entry);
      } catch (e) {
        throw new Error(entry);
      }
      if (bins[d] === void 0) {
        bins[d] = [entry];
      } else {
        bins[d].push(entry);
      }
    }
    const keys = Object.keys(bins);
    keys.sort();
    const rs = [];
    for (const key of keys.reverse()) {
      rs.push(["header", 2, key]);
      const arr = [];
      let totalTime = 0;
      for (const e of bins[key]) {
        const buff2 = [];
        buff2.push(
          Renderer.makeLinkShortUUID(
            this.dv,
            { path: e.path, frontmatter: { uuid: e.uuid } },
            "Task"
          )
        );
        buff2.push(
          Renderer.makeLinkShortUUID(
            this.dv,
            { path: e.logPath, frontmatter: { uuid: e.logId } },
            "Content"
          )
        );
        const convertSecondsToHours = (t) => {
          return Math.round(t / 3600 * 10) / 10;
        };
        buff2.push(`${convertSecondsToHours(e.took)}`);
        buff2.push(`${e.project}`);
        arr.push(buff2);
        totalTime += e.took;
      }
      totalTime = Math.round(totalTime / 3600 * 10) / 10;
      rs.push(["stats", "totalTime", "h", totalTime]);
      rs.push(["array", Renderer.basicProgressedTaskWithLog, arr]);
    }
    return rs;
  }
  inbox(dv) {
    const rs = [];
    const buff = [];
    const filterBy = [];
    const minSize = 0;
    const maxSize = 4294967295;
    const fleetings = this.dv.pages(`"${Paths.Inbox}"`).array();
    for (const e of fleetings) {
      const fm = e.file.frontmatter;
      e.file.frontmatter.createdAt = this.frontmatter.getCreatedAt(
        e.file
      );
      let fmjs = null;
      try {
        fmjs = new FrontmatterJS(e);
      } catch (ValidationError2) {
        console.log(e);
        dv.paragraph(Renderer.makeLink(dv, e.file));
        break;
      }
      fm.project = Helper.getProject(fm, true);
      fm.domain = `domain/${fmjs.getDomain()}`;
      fm.components = Helper.getComponents(fm);
      if (e.file.size < minSize) {
        continue;
      }
      if (e.file.size > maxSize) {
        continue;
      }
      buff.push(e);
    }
    const logs = [];
    for (const e of logs) {
      const fm = e.file.frontmatter;
      fm.createdAt = this.frontmatter.getCreatedAt(e.file);
      Assert.True(
        !Helper.nilCheck(fm.parent_id),
        `Missing field "parent_id" from log: "${fm.uuid}"`
      );
      const parent = this.dv.pages(`"${Paths.Tasks}/${fm.parent_id}"`).array();
      Assert.True(
        parent.length === 1,
        `Parent: ${fm.parent_id} not found for log: "${fm.uuid}"`
      );
      fm.project = Helper.getProject(parent[0].file.frontmatter, true);
      fm.domain = void 0;
      fm.components = [];
      if (e.file.size < minSize) {
        continue;
      }
      if (e.file.size > maxSize) {
        continue;
      }
      buff.push(e);
    }
    const sortBySizeThenDate = function(a, b) {
      const fA = a.file;
      const fB = b.file;
      if (fA.size !== fB.size) {
        return fB.size - fA.size;
      } else {
        return fA.frontmatter.createdAt.getTime() - fB.frontmatter.createdAt.getTime();
      }
    };
    const sortByAge = (a, b) => a.file.frontmatter.createdAt.getTime() - b.file.frontmatter.createdAt.getTime();
    buff.sort(sortByAge);
    rs.push(["array", Renderer.inboxEntry, buff]);
    return rs;
  }
  projects() {
    const rs = [];
    const bins = {
      active: [],
      inactive: []
    };
    const pages = this.dv.pages(`"Projects"`).sort((k) => k.name, "asc");
    for (const project of pages) {
      const fmProject = new FrontmatterJS(project);
      if (fmProject.fm.active === false) {
        bins.inactive.push(project);
        continue;
      } else if (fmProject.getName() === "adhoc") {
        bins.active.push(project);
        continue;
      } else if (["yearly", "monthly", "weekly", "daily"].contains(
        fmProject.getName()
      )) {
        continue;
      }
      const tasks = this.dv.pages(`#project/${fmProject.getName()}`).where((page) => {
        if (page.file.folder !== `${Paths.Tasks}`) {
          return false;
        }
        const fmTask = new FrontmatterJS(page);
        if (fmTask.fm.priority === 0) {
          return false;
        }
        if (["todo", "doing", "waiting"].contains(fmTask.fm.status)) {
          return true;
        }
        return false;
      });
      if (tasks.length > 0) {
        bins.active.push(project);
      } else {
        bins.inactive.push(project);
      }
    }
    rs.push(["header", 2, "Active"]);
    rs.push(["array", Renderer.projects, bins.active]);
    rs.push(["header", 2, "Inactive"]);
    rs.push(["array", Renderer.projects, bins.inactive]);
    return rs;
  }
  praxis() {
    const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
      if (page.file.frontmatter.type !== Types.Praxis) {
        return false;
      }
      if (page.file.frontmatter.status !== Status.Todo) {
        return false;
      }
      return true;
    }).array();
    const rs = [];
    rs.push(["header", 1, "Praxis"]);
    rs.push(["array", Renderer.basicTask, pages]);
    return rs;
  }
  planning(lastWeek = 2) {
    const rs = [];
    const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (fm.at === void 0) {
        return false;
      }
      if (fm.getProject() !== "daily") {
        return false;
      }
      return true;
    }).sort((page) => page.file.frontmatter.at, "desc");
    const bins = {};
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      let at = void 0;
      try {
        at = fm.at.toISOString().slice(0, 10);
      } catch (e) {
        throw new Error(`Invalid date: '${fm.fm.uuid}'`);
      }
      const weekNumber = this.getWeekNumber(fm.at);
      if (bins[weekNumber] === void 0) {
        bins[weekNumber] = [fm];
      } else {
        bins[weekNumber].push(fm);
      }
    }
    const now = new Date();
    const currentWeekNumber = this.getWeekNumber(now);
    for (const key of Object.keys(bins)) {
      const weekNumber = Number(key);
      if (weekNumber + lastWeek < currentWeekNumber) {
        continue;
      }
      if (weekNumber < currentWeekNumber) {
        rs.push(["header", 2, `~~week ${key}~~`]);
      } else if (weekNumber === currentWeekNumber) {
        rs.push(["header", 2, `*week ${key}*`]);
      } else {
        rs.push(["header", 2, `week ${key}`]);
      }
      bins[key].sort((a, b) => {
        return a.at.getTime() - b.at.getTime();
      });
      for (const task of bins[key]) {
        const day = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][task.at.getDay()];
        const text = Renderer.makeLink(
          this.dv,
          task.f,
          `${task.at.toISOString().slice(0, 10)}, ${day}`,
          "Task"
        );
        if (weekNumber < currentWeekNumber) {
          rs.push(["paragraph", `~~${text}~~`]);
        } else if (weekNumber === currentWeekNumber) {
          if (this.dayOfYear(task.at) < this.dayOfYear(now)) {
            rs.push(["paragraph", `~~${text}~~`]);
          } else {
            rs.push(["paragraph", `${text}`]);
          }
        } else {
          rs.push(["paragraph", `${text}`]);
        }
      }
    }
    return rs;
  }
  dayOfYear(dt) {
    const year = dt.getFullYear();
    const month = dt.getMonth() + 1;
    const day = dt.getDate();
    const N1 = Math.floor(275 * month / 9);
    const N2 = Math.floor((month + 9) / 12);
    const N3 = 1 + Math.floor((year - 4 * Math.floor(year / 4) + 2) / 3);
    return N1 - N2 * N3 + day - 30;
  }
  getWeekNumber(d) {
    d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
    d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));
    const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
    return Math.ceil(((d - yearStart) / 864e5 + 1) / 7);
  }
  getWeekNumber4(d) {
    d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
    const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
    const firstSunday = yearStart.getUTCDay() === 0 ? yearStart : new Date(
      Date.UTC(
        d.getUTCFullYear(),
        0,
        1 + (7 - yearStart.getUTCDay())
      )
    );
    const daysSinceFirstSunday = (d - firstSunday + 864e5) / 864e5;
    return Math.ceil(daysSinceFirstSunday / 7);
  }
  getMonth(year, weekNumber) {
    const firstDayOfYear = new Date(year, 0, 1);
    const firstDayOfWeek = firstDayOfYear.getDay();
    const daysToAdd = (weekNumber - 1) * 7 - firstDayOfWeek + (firstDayOfWeek === 0 ? 1 : 0);
    const weekStartDate = new Date(
      firstDayOfYear.setDate(firstDayOfYear.getDate() + daysToAdd)
    );
    if (weekStartDate.getDate() > 24) {
      weekStartDate.setDate(weekStartDate.getDate() + 7);
    }
    const monthNumber = weekStartDate.getMonth();
    return monthNumber + 1;
  }
  getMonthName(monthNumber) {
    const date = new Date(2e3, monthNumber - 1);
    return date.toLocaleString("default", { month: "long" });
  }
  energy(dv) {
    const current = dv.current();
    if (current.energy === void 0) {
      current.energy = 0;
    }
    let comp = void 0;
    switch (current.op) {
      case ">":
        comp = (a, b) => a > b;
        break;
      case ">=":
        comp = (a, b) => a >= b;
        break;
      case "<":
        comp = (a, b) => a < b;
        break;
      case "<=":
        comp = (a, b) => a <= b;
        break;
      default:
        comp = (a, b) => a === b;
        break;
    }
    const rs = [];
    const pages = dv.pages(`"${Paths.Tasks}"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (fm.getProject() === "daily") {
        return false;
      }
      if (fm.fm.status !== "todo") {
        return false;
      }
      return comp(fm.energy, current.energy);
    });
    rs.push([
      "array",
      (dv2, data) => {
        for (const entry of data) {
          console.log(entry);
          dv2.paragraph(
            Renderer.makeLinkAlias(dv2, entry.file, "## Task")
          );
        }
      },
      pages
    ]);
    return rs;
  }
  mandala(dv) {
    let mandalaLo = -1;
    let mandalaHi = -1;
    const now = new Date();
    {
      const weekNumber = this.getWeekNumber4(now);
      mandalaLo = weekNumber - 6;
      mandalaHi = weekNumber - 5;
      if (mandalaLo < 0 || mandalaHi < 0) {
        dv.paragraph(`weekNumber: ${weekNumber}`);
        dv.paragraph(`mandalaLo: ${mandalaLo}`);
        dv.paragraph(`mandalaHi: ${mandalaHi}`);
        return;
      }
      dv.paragraph(`weekNumber: ${weekNumber}`);
      dv.paragraph(`mandalaLo: ${mandalaLo}`);
      dv.paragraph(`mandalaHi: ${mandalaHi}`);
    }
    const rs = [];
    const bins = {};
    const suiviWeekly = {};
    const suiviMonthly = {};
    const suiviYearly = {};
    const pages = this.dv.pages(`"Journal"`).where((page) => {
      const fm = new FrontmatterJS(page);
      const weekNumber = this.getWeekNumber4(fm.createdAt);
      console.log(weekNumber);
      if (weekNumber >= mandalaLo && weekNumber <= mandalaHi && fm.createdAt.getFullYear() === now.getFullYear()) {
        return true;
      }
      return false;
    }).sort((page) => page.file.frontmatter.created_at, "desc");
    console.log(pages.length);
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      const weekNumber = this.getWeekNumber4(fm.createdAt);
      const year = fm.createdAt.getFullYear();
      const month = fm.createdAt.getMonth() + 1;
      let msg = "";
      msg += `createdAt: ${fm.createdAt.toISOString().slice(0, 10)}
`;
      msg += `weekNumber: ${weekNumber}
`;
      msg += `year: ${year}
`;
      msg += `month: ${month}
`;
      msg += `day: ${fm.createdAt.getDay()}
`;
      const day = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][fm.createdAt.getDay()];
      msg += `day: ${day}
`;
      console.log(msg);
      if (bins[year] === void 0) {
        bins[year] = {};
      }
      if (bins[year][weekNumber.toString()] === void 0) {
        bins[year][weekNumber.toString()] = {};
      }
      if (suiviMonthly[year] === void 0) {
        suiviMonthly[year] = {};
      }
      if (suiviWeekly[year] === void 0) {
        suiviWeekly[year] = {};
      }
      let tag = "";
      if (fm.getDomain() !== void 0) {
        tag = fm.getDomain();
      } else if (fm.getProject() !== void 0) {
        tag = fm.getProject();
      } else {
        tag = "adhoc";
      }
      if (tag == "weekly") {
        if (suiviWeekly[year][weekNumber] === void 0) {
          suiviWeekly[year][weekNumber] = [page];
        } else {
          suiviWeekly[year][weekNumber].push(page);
        }
        continue;
      } else if (tag === "monthly") {
        if (suiviMonthly[year][month] === void 0) {
          suiviMonthly[year][month] = [page];
        } else {
          suiviMonthly[year][month].push(page);
        }
        continue;
      } else if (tag === "yearly") {
        if (suiviYearly[year] === void 0) {
          suiviYearly[year] = [page];
        } else {
          suiviYearly[year].push(page);
        }
        continue;
      }
      if (bins[year][weekNumber][tag] === void 0) {
        bins[year][weekNumber][tag] = [page];
      } else {
        bins[year][weekNumber][tag].push(page);
      }
    }
    {
      const years = Object.keys(bins);
      let lastYear = 9999;
      let lastMonth = 13;
      years.sort().reverse();
      for (const year of years) {
        rs.push(["header", 2, year]);
        if (parseInt(year, 10) < lastYear) {
          lastMonth = 13;
          lastYear = parseInt(year, 10);
          if (suiviYearly[year] !== void 0) {
            for (const page of suiviYearly[year]) {
              const fm = new FrontmatterJS(page);
              rs.push([
                "paragraph",
                Renderer.makeLinkAlias(this.dv, fm.f)
              ]);
            }
          }
        }
        for (let week = 52; week > 0; week--) {
          const thisMonth = this.getMonth(year, week);
          if (suiviMonthly[year][thisMonth] !== void 0) {
            if (lastMonth !== thisMonth) {
              lastMonth = thisMonth;
              rs.push([
                "header",
                3,
                this.getMonthName(lastMonth)
              ]);
              if (suiviMonthly[year][thisMonth] !== void 0) {
                for (const page of suiviMonthly[year][thisMonth]) {
                  const fm = new FrontmatterJS(page);
                  rs.push([
                    "paragraph",
                    Renderer.makeLinkAlias(this.dv, fm.f)
                  ]);
                }
              }
            }
          }
          if (suiviWeekly[year][week] === void 0 && bins[year][week] === void 0) {
            continue;
          }
          rs.push(["header", 4, `week ${week.toString()}`]);
          if (suiviWeekly[year][week] !== void 0) {
            for (const page of suiviWeekly[year][week]) {
              const fm = new FrontmatterJS(page);
              rs.push([
                "paragraph",
                Renderer.makeLinkAlias(this.dv, fm.f)
              ]);
            }
          }
          if (bins[year][week] === void 0) {
            continue;
          }
          const tags = Object.keys(bins[year][week]);
          tags.sort();
          for (const tag of tags) {
            rs.push(["header", 5, tag]);
            bins[year][week][tag].sort((a, b) => {
              const fmA = new FrontmatterJS(a);
              const fmB = new FrontmatterJS(b);
              return fmB.createdAt.getTime() - fmA.createdAt.getTime();
            });
            for (const page of bins[year][week][tag]) {
              const fm = new FrontmatterJS(page);
              if (fm.type === 6) {
              } else {
                const d = fm.createdAt.toISOString().slice(0, 10);
                const day = [
                  "Sun",
                  "Mon",
                  "Tue",
                  "Wed",
                  "Thu",
                  "Fri",
                  "Sat"
                ][fm.createdAt.getDay()];
                const text = `${d}, ${day}`;
                rs.push([
                  "paragraph",
                  Renderer.makeLink(this.dv, fm.f, text)
                ]);
              }
            }
          }
        }
      }
    }
    return rs;
  }
  journal() {
    const rs = [];
    const bins = {};
    const suiviWeekly = {};
    const suiviMonthly = {};
    const suiviYearly = {};
    const pages = this.dv.pages(`"Journal"`).sort((page) => page.file.frontmatter.created_at, "desc");
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      const weekNumber = this.getWeekNumber4(fm.createdAt);
      const year = fm.createdAt.getFullYear();
      const month = fm.createdAt.getMonth() + 1;
      let msg = "";
      msg += `createdAt: ${fm.createdAt.toISOString().slice(0, 10)}
`;
      msg += `weekNumber: ${weekNumber}
`;
      msg += `year: ${year}
`;
      msg += `month: ${month}
`;
      msg += `day: ${fm.createdAt.getDay()}
`;
      const day = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][fm.createdAt.getDay()];
      msg += `day: ${day}
`;
      if (bins[year] === void 0) {
        bins[year] = {};
      }
      if (bins[year][weekNumber.toString()] === void 0) {
        bins[year][weekNumber.toString()] = {};
      }
      if (suiviMonthly[year] === void 0) {
        suiviMonthly[year] = {};
      }
      if (suiviWeekly[year] === void 0) {
        suiviWeekly[year] = {};
      }
      let tag = "";
      if (fm.getDomain() !== void 0) {
        tag = fm.getDomain();
      } else if (fm.getProject() !== void 0) {
        tag = fm.getProject();
      } else {
        tag = "adhoc";
      }
      if (tag == "weekly") {
        if (suiviWeekly[year][weekNumber] === void 0) {
          suiviWeekly[year][weekNumber] = [page];
        } else {
          suiviWeekly[year][weekNumber].push(page);
        }
        continue;
      } else if (tag === "monthly") {
        if (suiviMonthly[year][month] === void 0) {
          suiviMonthly[year][month] = [page];
        } else {
          suiviMonthly[year][month].push(page);
        }
        continue;
      } else if (tag === "yearly") {
        if (suiviYearly[year] === void 0) {
          suiviYearly[year] = [page];
        } else {
          suiviYearly[year].push(page);
        }
        continue;
      }
      if (bins[year][weekNumber][tag] === void 0) {
        bins[year][weekNumber][tag] = [page];
      } else {
        bins[year][weekNumber][tag].push(page);
      }
    }
    {
      const years = Object.keys(bins);
      let lastYear = 9999;
      let lastMonth = 13;
      years.sort().reverse();
      for (const year of years) {
        rs.push(["header", 2, year]);
        if (parseInt(year, 10) < lastYear) {
          lastMonth = 13;
          lastYear = parseInt(year, 10);
          if (suiviYearly[year] !== void 0) {
            for (const page of suiviYearly[year]) {
              const fm = new FrontmatterJS(page);
              rs.push([
                "paragraph",
                Renderer.makeLinkAlias(this.dv, fm.f)
              ]);
            }
          }
        }
        for (let week = 52; week > 0; week--) {
          const thisMonth = this.getMonth(year, week);
          if (suiviMonthly[year][thisMonth] !== void 0) {
            if (lastMonth !== thisMonth) {
              lastMonth = thisMonth;
              rs.push([
                "header",
                3,
                this.getMonthName(lastMonth)
              ]);
              if (suiviMonthly[year][thisMonth] !== void 0) {
                for (const page of suiviMonthly[year][thisMonth]) {
                  const fm = new FrontmatterJS(page);
                  rs.push([
                    "paragraph",
                    Renderer.makeLinkAlias(this.dv, fm.f)
                  ]);
                }
              }
            }
          }
          if (suiviWeekly[year][week] === void 0 && bins[year][week] === void 0) {
            continue;
          }
          rs.push(["header", 4, `week ${week.toString()}`]);
          if (suiviWeekly[year][week] !== void 0) {
            for (const page of suiviWeekly[year][week]) {
              const fm = new FrontmatterJS(page);
              rs.push([
                "paragraph",
                Renderer.makeLinkAlias(this.dv, fm.f)
              ]);
            }
          }
          if (bins[year][week] === void 0) {
            continue;
          }
          const tags = Object.keys(bins[year][week]);
          tags.sort();
          for (const tag of tags) {
            rs.push(["header", 5, tag]);
            bins[year][week][tag].sort((a, b) => {
              const fmA = new FrontmatterJS(a);
              const fmB = new FrontmatterJS(b);
              return fmB.createdAt.getTime() - fmA.createdAt.getTime();
            });
            for (const page of bins[year][week][tag]) {
              const fm = new FrontmatterJS(page);
              if (fm.type === 6) {
              } else {
                const d = fm.createdAt.toISOString().slice(0, 10);
                const day = [
                  "Sun",
                  "Mon",
                  "Tue",
                  "Wed",
                  "Thu",
                  "Fri",
                  "Sat"
                ][fm.createdAt.getDay()];
                const text = `${d}, ${day}`;
                rs.push([
                  "paragraph",
                  Renderer.makeLink(this.dv, fm.f, text)
                ]);
              }
            }
          }
        }
      }
    }
    return rs;
  }
  calendar() {
    const rs = [];
    const bins = {};
    const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (fm.fm.at === void 0 && fm.fm.before === void 0 && fm.fm.after === void 0) {
        return false;
      }
      if (fm.fm.status !== "todo") {
        return false;
      }
      if (fm.getProject() === "daily") {
        return false;
      }
      return true;
    });
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      let year = 0;
      let month = 0;
      let day = 0;
      if (fm.fm.before !== void 0) {
        year = fm.before.getFullYear();
        month = fm.before.getMonth();
        day = fm.before.getUTCDate();
      } else if (fm.fm.at !== void 0) {
        year = fm.at.getFullYear();
        month = fm.at.getMonth();
        day = fm.at.getUTCDate();
      } else if (fm.after !== void 0) {
        year = fm.after.getFullYear();
        month = fm.after.getMonth();
        day = fm.after.getUTCDate();
      } else {
        throw new Error();
      }
      if (bins[year] === void 0) {
        bins[year] = {};
      }
      if (bins[year][month] === void 0) {
        bins[year][month] = {};
      }
      if (bins[year][month][day] === void 0) {
        bins[year][month][day] = {};
      }
      if (bins[year][month][day]["at"] === void 0) {
        bins[year][month][day]["at"] = [];
      }
      if (bins[year][month][day]["before"] === void 0) {
        bins[year][month][day]["before"] = [];
      }
      if (bins[year][month][day]["after"] === void 0) {
        bins[year][month][day]["after"] = [];
      }
      if (fm.fm.before !== void 0) {
        bins[year][month][day]["before"].push(page);
      } else if (fm.fm.at !== void 0) {
        bins[year][month][day]["at"].push(page);
      } else {
        bins[year][month][day]["after"].push(page);
      }
    }
    {
      const years = Object.keys(bins);
      years.sort((a, b) => parseInt(a) - parseInt(b));
      for (const year of years) {
        rs.push(["header", 2, year]);
        const months = Object.keys(bins[year]);
        months.sort((a, b) => parseInt(a) - parseInt(b));
        for (const month of months) {
          rs.push([
            "header",
            3,
            `${["January", "Febuary", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][month]}`
          ]);
          const days = Object.keys(bins[year][month]);
          days.sort((a, b) => parseInt(a) - parseInt(b));
          for (const day of days) {
            const weeks = [
              "Sun",
              "Mon",
              "Tue",
              "Wed",
              "Thu",
              "Fri",
              "Sat"
            ];
            const before = bins[year][month][day]["before"];
            const at = bins[year][month][day]["at"];
            const after = bins[year][month][day]["after"];
            console.log(
              `year: ${year}
month: ${month}
day: ${day}`
            );
            if (before.length > 0) {
              for (const page of before) {
                console.log("--- before ---");
                console.log(page);
                console.log("------");
                const fm = new FrontmatterJS(page);
                const text = `before: ${weeks[fm.before.getDay()]} ${day} ${fm.at.toISOString().slice(11, 16)} | ${fm.getProject()}`;
                rs.push([
                  "paragraph",
                  Renderer.makeLink(
                    this.dv,
                    fm.f,
                    text,
                    "Task"
                  )
                ]);
              }
            }
            if (at.length > 0) {
              at.sort((a, b) => {
                const fmA = new FrontmatterJS(a);
                const fmB = new FrontmatterJS(b);
                return fmB.at.getTime() - fmA.at.getTime();
              });
              for (const page of at) {
                console.log("--- at ---");
                console.log(page);
                console.log("------");
                const fm = new FrontmatterJS(page);
                const text = `at: ${weeks[fm.at.getDay()]} ${day} ${fm.at.toISOString().slice(11, 16)} | ${fm.getProject()}`;
                rs.push([
                  "paragraph",
                  Renderer.makeLink(
                    this.dv,
                    fm.f,
                    text,
                    "Task"
                  )
                ]);
              }
            }
            if (after.length > 0) {
              for (const page of after) {
                console.log("--- after ---");
                console.log(page);
                console.log("------");
                const fm = new FrontmatterJS(page);
                const text = ` after: ${weeks[fm.after.getDay()]} ${day} ${fm.at.toISOString().slice(11, 16)} | ${fm.getProject()}`;
                rs.push([
                  "paragraph",
                  Renderer.makeLink(
                    this.dv,
                    fm.f,
                    text,
                    "Task"
                  )
                ]);
              }
            }
          }
        }
      }
    }
    return rs;
  }
  globalTaskList(pages) {
    const rs = [];
    const bins = {};
    for (const page of pages) {
      const fm = new FrontmatterJS(page);
      if (fm.getProject() === void 0) {
        fm.projects = ["adhoc"];
      }
      if (bins[fm.getProject()] === void 0) {
        bins[fm.getProject()] = [page];
      } else {
        bins[fm.getProject()].push(page);
      }
    }
    const projects = Object.keys(bins);
    projects.sort();
    for (const project of projects) {
      const tasks = bins[project];
      tasks.sort(Helper.sortByPriorityAndDurationAndAge);
      rs.push(["header", 2, `${project}`]);
      rs.push(["array", Renderer.basicTaskJournal, tasks]);
    }
    return rs;
  }
  nextActions(dv) {
    const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (["daily", "weekly", "monthly", "yearly"].contains(
        fm.getProject()
      )) {
        return false;
      }
      if (!this.projectIsActive(fm.getProject())) {
        return false;
      }
      if (!this.noteHelper.isDoable(page)) {
        return false;
      }
      if (fm.fm.priority === 0) {
        return false;
      }
      return true;
    });
    return this.globalTaskList(pages);
  }
  waitingFor(dv) {
    const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (["daily", "weekly", "monthly", "yearly"].contains(
        fm.getProject()
      )) {
        return false;
      }
      if (!["todo", "waiting"].contains(fm.fm.status)) {
        return false;
      }
      if (!this.projectIsActive(fm.getProject())) {
        return false;
      }
      if (this.noteHelper.isDoable(page) || fm.fm.priority === 0) {
        return false;
      }
      return true;
    });
    return this.globalTaskList(pages);
  }
  projectIsActive(name) {
    const project = this.dv.pages(`"Projects"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (fm.getName() !== name) {
        return false;
      }
      if (fm.fm.active === false) {
        return false;
      }
      return true;
    });
    return project.length > 0;
  }
  somedayMaybe(dv) {
    const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
      const fm = new FrontmatterJS(page);
      if (["daily", "weekly", "monthly", "yearly"].contains(
        fm.getProject()
      )) {
        return false;
      }
      if (!this.projectIsActive(fm.getProject())) {
        return false;
      }
      if (!this.noteHelper.isDoable(page) || fm.fm.priority > 0) {
        return false;
      }
      return true;
    });
    return this.globalTaskList(pages);
  }
};
var DvLib = class {
  constructor() {
    this.taskDir = "813 Tasks";
    this.inboxDir = "800 Inbox";
    this.refDir = "802 Refs";
    this.logDir = "600 Log";
    this.Task = {
      BASE: 3,
      DAILY: 4
    };
    this.Type = {
      TASK: 3,
      DAILY: 4,
      LOG: 6
    };
    this.Status = {
      TODO: "todo",
      DONE: "done",
      DOING: "doing",
      TRASH: "trash",
      MAYBE: "maybe",
      STANDBY: "standby"
    };
    this.Namespace = {
      AREA: "area",
      CONTEXT: "context",
      LAYER: "layer",
      ORG: "org",
      PROJECT: "project"
    };
    this.Default = {
      AREA: "none",
      CONTEXT: "any",
      LAYER: "none",
      ORG: "none",
      PROJECT: "none"
    };
    this._dv = "";
  }
  set dv(mod) {
    this._dv = mod;
  }
  get dv() {
    return this._dv;
  }
  isChildTag(parent, child) {
    if (child.length <= parent.length + 1) {
      return false;
    } else if (child.slice(0, parent.length + 1) != `${parent}/`) {
      return false;
    }
    return true;
  }
  stripTag(tag) {
    let t = "";
    if (tag.slice(-1) === "/") {
      t = tag.slice(0, -1);
    } else {
      t = tag;
    }
    if (t.slice(0, 1) === "#") {
      t = t.slice(1, t.length);
    }
    return t;
  }
  getTaskFromUUID(dv, uuid) {
    const n = dv.pages(`"${this.taskDir}/${uuid}"`);
    if (n.length === 0) {
      console.warn(`"${this.taskDir}/${uuid}" task does not exists`);
      return void 0;
    }
    return n[0];
  }
  hasValidFormat(task) {
    const fm = task.file.frontmatter;
    if (fm === void 0) {
      console.warn(
        `"${this.taskDir}/${task.uuid}" task does not have a frontmatter`
      );
      return false;
    }
    if (fm.type === void 0) {
      console.warn(
        `"${this.taskDir}/${task.uuid}" task does not have a \`type\` field`
      );
      return false;
    }
    if (fm.status === void 0) {
      console.warn(
        `"${this.taskDir}/${task.uuid}" task does not have a \`status\` field`
      );
      return false;
    }
    return true;
  }
  hasPendingDependencies(dv, deps) {
    for (const dep of deps) {
      const task = this.getTaskFromUUID(dv, dep);
      if (task === void 0) {
        continue;
      }
      if (!this.hasValidFormat(task)) {
        continue;
      }
      const fm = task.file.frontmatter;
      if (fm.type !== this.Task.BASE && fm.type !== this.Task.DAILY) {
        continue;
      }
      if (fm.status === this.Status.TODO) {
        return true;
      }
    }
    return false;
  }
  isDoable(dv, task) {
    const fm = task.file.frontmatter;
    if (fm.status !== this.Status.TODO) {
      return false;
    }
    if (fm.after !== void 0) {
      const after = new Date(fm.after);
      if (Date.now() <= after.getTime()) {
        return false;
      }
    }
    const deps = fm.needs;
    if (deps === void 0 || deps.length === 0) {
      return true;
    }
    if (this.hasPendingDependencies(dv, deps)) {
      return false;
    }
    return true;
  }
  getNamespaceContent(dv, ns) {
    const children = [];
    const resp = dv.pages(`#${ns}`);
    for (const f of resp) {
      const tags = f.tags;
      if (tags === void 0) {
        continue;
      }
      for (const tag of tags) {
        if (this.isChildTag(ns, tag)) {
          const t = tag.slice(ns.length + 1);
          if (!children.includes(t)) {
            children.push(t);
          }
        }
      }
    }
    return children;
  }
  isDone(dv, dep) {
    const task = this.getTaskFromUUID(dv, dep);
    if (task === void 0) {
      return false;
    }
    if (!this.hasValidFormat(task)) {
      return false;
    }
    const fm = task.file.frontmatter;
    if (fm.status === this.Status.DONE) {
      return true;
    }
    return false;
  }
  getTasks(dv, tag, taskType = [this.Task.BASE, this.Task.DAILY], status = this.Status.TODO) {
    const buff = [];
    const tasks = dv.pages(tag);
    for (const task of tasks) {
      const fm = task.file.frontmatter;
      if (fm === void 0) {
        continue;
      }
      if (fm.status === void 0 || fm.status !== status) {
        continue;
      }
      if (fm.type === void 0 || !taskType.contains(fm.type)) {
        continue;
      }
      buff.push(task);
    }
    return buff;
  }
  formatTask(dv, task) {
    return dv.fileLink(task.file.path);
  }
  formatTaskBis(dv, task) {
    const f = task.file;
    let ctx = "";
    for (const tag of f.tags) {
      if (tag.slice(0, 9) == "#context/") {
        ctx = tag.slice(9);
      }
    }
    return [
      dv.fileLink(f.path),
      dv.markdownTaskList(f.tasks),
      f.frontmatter.time_estimate,
      ctx
    ];
  }
  formatTaskBase(dv, task) {
    const f = task.file;
    const fm = f.frontmatter;
    const tags = fm.tags;
    const area = this.getArea(tags);
    return [
      dv.fileLink(f.path, false, fm.uuid.slice(0, 8)),
      dv.markdownTaskList(f.tasks),
      fm.time_estimate,
      area
    ];
  }
  formatTaskWaiting(dv, task) {
    const f = task.file;
    const fm = f.frontmatter;
    const deps = [];
    if (fm.needs !== void 0) {
      for (const dep of fm.needs) {
        deps.push(dv.fileLink(`${this.taskDir}/${dep}`));
      }
    }
  }
  formatTaskMaybe(dv, task) {
    const f = task.file;
    const fm = f.frontmatter;
    const deps = [];
    return [dv.fileLink(f.path)];
  }
  makeAsyncRequest(dv, uuid) {
    return dv.query(`LIST WHERE needs AND contains(needs, "${uuid}")`).then((value) => {
      return value;
    });
  }
  getDependantTasks(dv, task) {
    const buff = [];
    const uuid = task.file.name;
    if (task.file.frontmatter === void 0) {
      return buff;
    }
    const tasks = dv.pages(`"${this.taskDir}"`).where((p) => p.needs !== void 0 && p.needs.contains(uuid));
    for (const tk of tasks) {
      const t = dv.pages(`"${tk.file.path}"`);
      buff.push(t[0]);
    }
    return buff;
  }
  byDependencyAndPriorityAndCreatedAt(dv, a, b) {
    const ftA = a.file.frontmatter;
    const ftB = b.file.frontmatter;
    const prioA = ftA.priority;
    const prioB = ftB.priority;
    const depsA = this.getDependantTasks(dv, a);
    const depsB = this.getDependantTasks(dv, b);
    if (depsA.length - depsB.length !== 0) {
      return depsA.length - depsB.length;
    }
    if (prioA - prioB !== 0) {
      return prioA - prioB;
    }
    const dateA = new Date(ftA.created_at);
    const dateB = new Date(ftB.created_at);
    return (dateA.getTime() - dateB.getTime()) * -1;
  }
  formatTaskPlanningWaiting(dv, task) {
    const f = task.file;
    return [
      // ajouter alias sur le link
      dv.markdownTaskList(f.tasks),
      dv.fileLink(f.path, false, f.name.slice(0, 8)),
      f.frontmatter.time_estimate,
      f.frontmatter.cause
    ];
  }
  renderBaseAsArray(dv, tasks) {
    const arr = [];
    tasks.forEach((task) => {
      arr.push(this.formatTaskBase(dv, task));
    });
    dv.table(["uuid", "tasks", "estimate", "area"], arr);
  }
  renderPlanningWaiting(dv, tasks) {
    const arr = [];
    tasks.forEach((task) => {
      arr.push(this.formatTaskPlanningWaiting(dv, task));
    });
    dv.table(["tasks", "uuid", "estimate", "cause"], arr);
  }
  renderMaybeAsArray(dv, tasks) {
    const arr = [];
    tasks.forEach(({ ref, task }) => {
      if (task !== void 0) {
        arr.push(this.formatTaskMaybe(dv, task));
      }
    });
    dv.table(["uuid"], arr);
  }
  formatTaskDaily(dv, task) {
    const f = task.file;
    const fm = task.file.frontmatter;
    const tags = task.file.tags;
    const areas = [];
    for (const tag of tags) {
      if (tag.slice(0, 6) == "#area/") {
        areas.push(tag.slice(6));
      }
    }
    const links = [];
    for (const link of f.outlinks) {
      links.push(link);
    }
    const tasks = [];
    for (const t of f.tasks) {
      tasks.push(t);
    }
    return [
      dv.fileLink(f.path),
      links.length > 0 ? dv.markdownList(links) : dv.markdownTaskList(tasks),
      fm.time_allocated,
      areas.length > 0 ? dv.markdownList(areas) : ""
    ];
  }
  formatFleeting(dv, task) {
    const f = task.file;
    const fm = task.file.frontmatter;
    const tags = task.file.tags;
    const hours = 3600;
    const days = 86400;
    let dt = new Date();
    if (fm !== void 0 && fm.created_at !== void 0) {
      dt = new Date(fm.created_at);
    } else {
      dt = new Date(f.ctime.ts);
    }
    const now = new Date();
    const delta = (now.getTime() - dt.getTime()) / 1e3;
    let since = "";
    const toDt = (t) => {
      return String(Math.round(t * 10) / 10).padStart(2, "0");
    };
    if (delta >= days) {
      since = toDt(delta / days) + "d";
    } else {
      since = toDt(delta / hours) + "h";
    }
    if (fm.alias === void 0 || fm.alias === "") {
      return [dv.fileLink(`${f.path}`), since, f.size];
    } else {
      return [dv.fileLink(`${f.path}`, false, fm.alias), since, f.size];
    }
  }
  renderDailyAsArray(dv, tasks) {
    const arr = [];
    tasks.forEach((task) => {
      arr.push(this.formatTaskDaily(dv, task));
    });
    dv.table(["uuid", "content", "duration", "area"], arr);
  }
  renderFleetingAsArray(dv, tasks) {
    const arr = [];
    tasks.forEach((task) => {
      arr.push(this.formatFleeting(dv, task));
    });
    dv.table(["content", "age", "size"], arr);
  }
  autoFieldNeed(dv, fm) {
    if (fm.needs === void 0) {
      return;
    }
    const buff = [];
    for (const dep of fm.needs) {
      if (!this.isDone(dv, dep)) {
        buff.push(dv.fileLink(`${this.taskDir}/${dep}`));
      }
    }
    if (buff.length > 0) {
      dv.header(2, "Needs");
      dv.list(buff);
    }
  }
  autoFieldNeededBy(dv, current) {
    const tasks = this.getDependantTasks(dv, current);
    if (tasks.length === 0) {
      return;
    }
    const buff = [];
    for (const task of tasks) {
      if (!this.isDone(dv, task.uuid)) {
        buff.push(dv.fileLink(task.file.path));
      }
    }
    if (buff.length > 0) {
      dv.header(2, "NeededBy");
      dv.list(buff);
    }
  }
  autoFieldTags(dv, fm) {
    const tags = fm.tags;
    if (tags == void 0 || tags.length === 0) {
      return;
    }
    tags.sort();
    dv.header(2, "Tags");
    let s = "";
    for (const tag of tags) {
      s += ` #${tag}`;
    }
    dv.paragraph(s);
  }
  autoFieldTaskBase(dv) {
    const current = dv.current();
    const fm = current.file.frontmatter;
    if (fm === void 0) {
      console.warn("fm is required");
      return;
    }
    const projectName = Helper.getProject(fm);
    if (projectName !== void 0) {
      const projects = dv.pages(`"Projects"`).where((fmP) => {
        if (fmP.name === projectName.slice(8)) {
          return true;
        }
        return false;
      });
      if (projects.length) {
        dv.header(2, "Project");
        dv.paragraph(Renderer.makeLinkName(dv, projects[0].file));
      }
    }
    this.autoFieldNeed(dv, fm);
    this.autoFieldNeededBy(dv, current);
    const logEntries = dv.pages(`"${this.logDir}/${fm.uuid}"`).where((p) => p.type === 6).sort((k) => k.created_at, "desc");
    const buff = [];
    let totalTime = 0;
    for (const entry of logEntries) {
      const fme = entry.file.frontmatter;
      const e = [];
      let start = 0;
      let stop = 0;
      if (fme === void 0 || fme.created_at === void 0) {
        throw new Error(`Invalid frontmatter: ${fme.uuid}`);
      }
      start = new Date(fme.created_at);
      e.push(start.toISOString().slice(0, 10));
      if (fme.done_at === void 0) {
        stop = Date.now();
      } else {
        stop = new Date(fme.done_at);
      }
      totalTime += stop - start;
      e.push(
        dv.sectionLink(
          fme.uuid,
          "## Content",
          false,
          fme.uuid.slice(0, 8)
        )
      );
      e.push(Math.round((stop - start) / (1e3 * 60 * 60) * 10) / 10);
      if (fme.reviewed === void 0 || fme.reviewed === 0) {
        e.push(0);
      } else {
        e.push(fme.reviewed);
      }
      buff.push(e);
    }
    if (buff.length > 0) {
      dv.header(2, "Logs");
      dv.table(["created_at", "uuid", "session", "reviewed"], buff);
      if (totalTime > 0) {
        dv.paragraph(
          `_totalTime (h):_ ${Math.round(totalTime / (1e3 * 60 * 60) * 10) / 10}`
        );
      }
    }
  }
  autoFieldLog(dv) {
    const current = dv.current();
    const fm = current.file.frontmatter;
    if (fm === void 0) {
      return;
    }
    dv.header(2, "Parent");
    dv.paragraph(dv.fileLink(`${this.taskDir}/${fm.parent_id}`));
  }
  autoFieldAuthors(dv, fm) {
    const authors = fm.authors;
    if (authors === void 0 || authors.length === 0) {
      return;
    }
    dv.header(2, "Authors");
    dv.list(authors);
  }
  autoFieldTitle(dv, fm) {
    const title = fm.alias;
    if (title == void 0) {
      return;
    }
    dv.header(1, title);
  }
  autoFieldLiteratureNote(dv) {
    const current = dv.current();
    const fm = current.file.frontmatter;
    if (fm === void 0) {
      return;
    }
    this.autoFieldTitle(dv, fm);
    this.autoFieldAuthors(dv, fm);
    this.autoFieldTags(dv, fm);
  }
  autoFieldPermanent(dv) {
    const current = dv.current();
    const fm = current.file.frontmatter;
    if (fm === void 0) {
      return;
    }
    this.autoFieldTags(dv, fm);
  }
  autoFieldTask(dv) {
    return this.autoFieldTaskBase(dv);
  }
  autoFieldLiterature(dv) {
    return this.autoFieldLiteratureNote(dv);
  }
  autoFieldFleeting(dv) {
    return;
  }
  autoFieldSupply(dv) {
    return;
  }
  findTasksByProject(dv, name) {
    const buff = [];
    if (name !== "" && name !== "none") {
      const tasks = this.getTasks(dv, `${this.Namespace.PROJECT}/none`, [
        this.Task.BASE
      ]);
      for (const task of tasks) {
        const fm = task.file.frontmatter;
        if (this.isDoable(dv, task)) {
          buff.push(task);
        }
      }
    } else {
      const tasks = this.getTasks(dv, "", [this.Task.BASE]);
      for (const task of tasks) {
        const fm = task.file.frontmatter;
        const tags = fm.tags;
        if (fm.tags === void 0 && (name === "" || name === "none") || fm.tags.contains(`${this.Namespace.PROJECT}/none`)) {
          if (this.isDoable(dv, task)) {
            buff.push(task);
          }
        }
      }
    }
    buff.sort();
    return buff;
  }
  getTag(tags, type) {
    let name = "";
    let defaultValue = "";
    if (type === "area") {
      name = this.Namespace.AREA;
      defaultValue = this.Default.AREA;
    } else if (type === "context") {
      name = this.Namespace.CONTEXT;
      defaultValue = this.Default.CONTEXT;
    } else if (type === "layer") {
      name = this.Namespace.LAYER;
      defaultValue = this.Default.LAYER;
    } else if (type === "org") {
      name = this.Namespace.ORG;
      defaultValue = this.Default.ORG;
    } else if (type === "project") {
      name = this.Namespace.PROJECT;
      defaultValue = this.Default.PROJECT;
    } else {
      throw new Error(`getTag got unsuported type: ${type}`);
    }
    const len = name.length + 1;
    const defaultTag = `${name}/${defaultValue}`;
    if (tags === void 0) {
      return defaultTag;
    }
    for (const tag of tags) {
      if (tag.length > len && tag.slice(0, len) == `${name}/`) {
        return tag;
      }
    }
    return defaultTag;
  }
  getArea(tags) {
    return this.getTag(tags, "area");
  }
  getContext(tags) {
    return this.getTag(tags, "context");
  }
  getLayer(tags) {
    return this.getTag(tags, "layer");
  }
  getOrg(tags) {
    return this.getTag(tags, "org");
  }
  getProject(tags) {
    return this.getTag(tags, "project");
  }
  parseListFrontmatter(fm) {
    let minPriority = 0;
    if (fm.min_priority !== void 0) {
      minPriority = fm.min_priority;
    }
    let ignore = [];
    if (fm.ignore !== void 0) {
      ignore = fm.ignore;
    }
    let byAreas = [];
    if (fm.by_areas !== void 0) {
      byAreas = fm.by_areas;
    }
    let byProjects = [];
    if (fm.by_projects !== void 0) {
      byProjects = fm.by_projects;
    }
    return [minPriority, ignore, byAreas, byProjects];
  }
  renderNamespaceContent(dv) {
    const self = dv.current();
    const name = self.file.name.toLowerCase().slice(0, -1);
    dv.header(1, "Index");
    dv.header(2, `${self.file.name}`);
    const tags = this.getNamespaceContent(dv, name);
    tags.sort();
    for (const tag of tags) {
      dv.paragraph(`#${name}/${tag}`);
    }
  }
  renderUnprocessedLogs(dv) {
    const logs = dv.pages(`"${this.logDir}"`).where(
      (p) => p.type === this.Type.LOG && (p.reviewd === void 0 || p.reviewed < 1)
    ).sort((k) => k.created_at, "asc");
    const buff = [];
    const arr = [];
    logs.forEach((entry) => {
      const fm = entry.file.frontmatter;
      if (fm === void 0) {
        return;
      }
      const parentId = fm.parent_id;
      if (parentId === void 0) {
        throw new Error(`Invalid log entry: ${entry.file.path}`);
      }
      const parent = dv.pages(`"${this.taskDir}/${parentId}"`);
      const parentFm = parent.file.frontmatter;
      if (parentFm === void 0) {
        throw new Error(`Invalid task: ${parent.file.path}`);
      }
      let project = this.getProject(parentFm.tags);
      if (project === `${this.Namespace.PROJECT}/${this.Default.PROJECT}`) {
        project = "";
      }
      let area = this.getArea(parentFm.tags);
      if (area === `${this.Namespace.AREA}/${this.Default.AREA}`) {
        area = "";
      }
      const formated = [];
      formated.push(
        dv.sectionLink(
          entry.file.path,
          "Content",
          false,
          `${fm.uuid.slice(0, 8)}`
        )
      );
      const createdAt = new Date(fm.created_at);
      formated.push(createdAt.toISOString().slice(0, 10));
      formated.push(project);
      formated.push(area);
      arr.push(formated);
    });
    dv.table(["uuid", "created_at", "project", "area"], arr);
  }
  assertTaskDoneAt(dv, taskId) {
    const task = dv.pages(`"${this.taskDir}/${taskId}"`);
    if (task.length === 0) {
      throw new Error(`task: ${taskId} doest not exists`);
    }
    const fm = task.file.frontmatter;
    if (fm === void 0) {
      throw new Error(`task: ${taskId} does not have a frontmatter`);
    }
    const logs = dv.pages(`"${this.logDir}/${taskId}"`).sort((k) => k.created_at, "asc");
    if (logs.length < 1) {
      throw new Error(`task: ${taskId} has no Logs`);
    }
    const lastEntry = logs[logs.length - 1];
    if (lastEntry.file.frontmatter.done_at === void 0) {
      throw new Error(
        `task: ${taskId} last entry is missing 'done_at' field`
      );
    }
    const doneAt = new Date(lastEntry.file.frontmatter.done_at);
    return [
      dv.sectionLink(
        task.file.path,
        "Content",
        false,
        `${task.file.frontmatter.uuid.slice(0, 8)}`
      ),
      `${doneAt.toISOString().slice(0, 10)}`
    ];
  }
  getDoneTimeline(dv) {
    const tasks = dv.pages(`"${this.taskDir}"`).where((p) => p.status === "done");
    const buff = [];
    for (const task of tasks) {
      const fm = task.file.frontmatter;
      if (fm === void 0) {
        throw new Error(`task: ${fm.uuid} does not have a frontmatter`);
      }
      const logs = dv.pages(`"${this.logDir}/${fm.uuid}"`).sort((k) => k.created_at, "asc");
      if (logs.length < 1) {
        console.warn(`task: ${fm.uuid} has no Logs`);
      }
      const lastEntry = logs[logs.length - 1];
      if (lastEntry === void 0) {
        continue;
      }
      if (lastEntry.file.frontmatter.done_at === void 0) {
        throw new Error(
          `task: ${fm.uuid} last entry is missing 'done_at' field`
        );
      }
      fm.doneAt = new Date(lastEntry.file.frontmatter.done_at);
      buff.push(task);
    }
    buff.sort((a, b) => {
      const dateA = new Date(a.file.frontmatter.doneAt);
      const dateB = new Date(b.file.frontmatter.doneAt);
      return (dateA.getTime() - dateB.getTime()) * -1;
    });
    const arr = [];
    buff.forEach((e) => {
      arr.push([
        dv.sectionLink(
          e.file.path,
          "Content",
          false,
          `${e.file.frontmatter.uuid.slice(0, 8)}`
        ),
        `${e.file.frontmatter.doneAt.toISOString().slice(0, 16)}`
      ]);
    });
    dv.table(["uuid", "doneAt"], arr);
  }
  durationStringToSec(val) {
    const mult = val.slice(-1);
    let m = 0;
    if (mult === "h") {
      m = 60 * 60;
    } else if (mult === "m") {
      m = 60;
    } else if (mult === "d") {
      m = 24 * 60 * 60;
    } else {
      console.warn(`Unhandled case mult: ${mult}`);
    }
    return m * parseInt(val.slice(0, -1));
  }
  testDvFunc() {
    const dv = app.plugins.plugins.dataview.api;
    const tasks = dv.pages(`"${this.taskDir}"`).where((p) => p.status === "done");
    const buff = [];
    for (const task of tasks) {
      const fm = task.file.frontmatter;
      if (fm === void 0) {
        throw new Error(`task: ${fm.uuid} does not have a frontmatter`);
      }
      const logs = dv.pages(`"${this.logDir}/${fm.uuid}"`).sort((k) => k.created_at, "asc");
      if (logs.length < 1) {
        console.warn(`task: ${fm.uuid} has no Logs`);
      }
      const lastEntry = logs[logs.length - 1];
      if (lastEntry === void 0) {
        continue;
      }
      if (lastEntry.file.frontmatter.done_at === void 0) {
        throw new Error(
          `task: ${fm.uuid} last entry is missing 'done_at' field`
        );
      }
      fm.doneAt = new Date(lastEntry.file.frontmatter.done_at);
      buff.push(task);
    }
    buff.sort((a, b) => {
      const dateA = new Date(a.file.frontmatter.doneAt);
      const dateB = new Date(b.file.frontmatter.doneAt);
      return (dateA.getTime() - dateB.getTime()) * -1;
    });
    const arr = [];
    buff.forEach((e) => {
      arr.push([
        dv.sectionLink(
          e.file.path,
          "Content",
          false,
          `${e.file.frontmatter.uuid.slice(0, 8)}`
        ),
        `${e.file.frontmatter.doneAt.toISOString().slice(0, 16)}`
      ]);
    });
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var dayShort = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
var monthShort = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec"
];
var MyPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.vaultContent = [];
    this.vaultContentDict = {};
  }
  openInNewTabIfNotOpened(page) {
    const active = this.app.workspace.activeLeaf;
    const root = active.parent;
    let found = false;
    let node = void 0;
    const emptyTabs = [];
    for (const leaf of root.children) {
      const file = this.getFileCacheFromLeaf(leaf);
      if (file === void 0) {
        emptyTabs.push(leaf);
        continue;
      }
      if (file.frontmatter !== void 0 && file.frontmatter.uuid === page.file.frontmatter.uuid) {
        found = true;
        node = leaf;
        break;
      }
    }
    if (!found) {
      if (emptyTabs.length > 0) {
        node = emptyTabs[0];
      } else {
        this.app.workspace.createLeafInParent(
          root,
          root.children.length + 1
        );
        node = root.children[root.children.length - 1];
      }
    }
    node.openFile(this.app.vault.getAbstractFileByPath(page.file.path), {
      active: true
    });
  }
  getFileCacheFromLeaf(leaf) {
    let file = void 0;
    try {
      file = leaf.view.getSyncViewState().state.file;
    } catch (e) {
      return void 0;
    }
    const abstractPath = app.vault.getAbstractFileByPath(file);
    return app.metadataCache.getFileCache(abstractPath);
  }
  getFileFromLeaf(leaf) {
    let file = void 0;
    try {
      file = leaf.view.getSyncViewState().state.file;
    } catch (e) {
      return void 0;
    }
    return app.vault.getAbstractFileByPath(file);
  }
  extractUUIDFromLink(link) {
    Assert.True(
      link.length >= 36,
      `extractUUIDFromLink: Invalid parameter type: link: "${link}"`
    );
    Assert.True(
      Helper.isUUID(link.slice(0, 36)),
      `extractUUIDFromLink: Invalid parameter type: link: "${link}"`
    );
    if (link.length === 36) {
      return link;
    } else {
      return link.slice(0, 36);
    }
  }
  getFileFromUUID(_id) {
    return this.vaultContentDict[_id];
  }
  getFileCacheFromUUID(_id) {
    const f = this.vaultContentDict[_id];
    if (f === void 0) {
      return void 0;
    }
    return app.metadataCache.getFileCache(f);
  }
  generateJournalEntry() {
  }
  sneakyTabRenamer(app2) {
    const root = app2.workspace.activeLeaf.parent;
    for (const leaf of root.children) {
      let path = void 0;
      try {
        path = leaf.view.getSyncViewState().state.file;
      } catch (e) {
        continue;
      }
      const file = app2.vault.getAbstractFileByPath(path);
      const fm = (
        // @ts-ignore
        app2.metadataCache.getFileCache(file).frontmatter
      );
      if (fm === void 0) {
        continue;
      }
      let text = "";
      if (fm.type === 3 && Helper.getProject(fm) !== void 0) {
        if (Helper.getProject(fm) === "project/daily") {
          const at = new Date(fm.at);
          text = `(D) ${dayShort[at.getDay()]}. ${at.getDate()} ${monthShort[at.getMonth()]}`;
        } else {
          text = `(T) ${Helper.getProject(fm).slice(8)}`;
        }
      } else if (fm.type === 2) {
        if (!Helper.nilCheck(fm.alias)) {
          let buff = "";
          for (const alias of fm.alias) {
            if (buff.length === 0) {
              buff = alias;
            } else if (alias.length < buff.length) {
              buff = alias;
            }
          }
          const note = this.getFileCacheFromLeaf(leaf);
          text = `\u{1F4DC} ${buff}`;
          if (note.headings.length > 1) {
            for (const heading of note.headings) {
              if (heading.level === 3 && heading.heading === "index") {
                text = `(I) ${buff}`;
                break;
              }
            }
          }
        } else {
          const note = this.getFileCacheFromLeaf(leaf);
          if (note.headings.length < 1) {
            continue;
          }
          let found = false;
          for (const heading of note.headings) {
            if (heading.level === 3) {
              found = true;
              text = `\u{1F4DC} ${heading.heading}`;
              break;
            }
          }
          if (!found) {
            text = note.frontmatter.uuid;
          }
        }
      } else if (fm.type === 20) {
        const createdAt = new Date(fm.created_at);
        if (fm.alias !== void 0) {
          text = `(J) ${fm.alias}`;
        } else {
          text = `(J) ${dayShort[createdAt.getDay()]}. ${createdAt.getDate()} ${monthShort[createdAt.getMonth()]}`;
        }
      } else if (fm.type === 12) {
        if (fm.name !== void 0 && fm.name !== "") {
          text = `(P) ${fm.name}`;
        }
      } else if (fm.type === 13) {
        text = `(I) ${fm.uuid}`;
      } else {
        continue;
      }
      if (text !== "") {
        leaf.tabHeaderInnerTitleEl.innerText = text;
        leaf.tabHeaderInnerTitleEl.innerHTML = text;
      }
    }
  }
  async onload() {
    var _a, _b;
    console.log("gonext - onload()");
    await this.loadSettings();
    this.metadataCache = this.app.metadataCache;
    this.workspace = this.app.workspace;
    this.dv = this.app.plugins.plugins.dataview.api;
    this.frontmatter = new Frontmatter(this);
    this.listMaker = new ListMaker(this, this.dv, this.frontmatter);
    this.generate = new Generator(this.app);
    this.files = {};
    this.api = {
      getArea: Helper.getArea,
      getContext: Helper.getContext,
      getDomain: Helper.getDomain,
      getLayer: Helper.getLayer,
      getOrg: Helper.getOrg,
      getProject: Helper.getProject,
      durationStringToSec: Helper.durationStringToSec,
      paths: Paths,
      types: Types,
      status: Status,
      namespace: Namespace,
      default: Default,
      frontmatter: this.frontmatter,
      listMaker: this.listMaker,
      renderer: Renderer,
      autoField: AutoField,
      dvLib: new DvLib(),
      notify
    };
    window.gonext = {
      // @ts-ignore
      state: (_b = (_a = window.gonext) == null ? void 0 : _a.state) != null ? _b : {},
      // @ts-ignore
      app: this.app
    };
    (0, import_obsidian.addIcon)(
      "GoNextIcon",
      `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><path fill="currentColor" d="M20 12V2h2v10zm4 0V2h2v10zm4 0V2h2v10zm-12 8a3.912 3.912 0 0 1-4-4a3.912 3.912 0 0 1 4-4v-2a6 6 0 1 0 6 6h-2a3.912 3.912 0 0 1-4 4"></path><path fill="currentColor" d="M28.893 18.454L26.098 16l-1.318 1.504l2.792 2.452l-2.36 4.088l-3.427-1.16a9.032 9.032 0 0 1-2.714 1.565L18.36 28h-4.72l-.71-3.55a9.095 9.095 0 0 1-2.695-1.572l-3.447 1.166l-2.36-4.088l2.725-2.395a8.926 8.926 0 0 1-.007-3.128l-2.718-2.39l2.36-4.087l3.427 1.16A9.03 9.03 0 0 1 12.93 7.55L13.64 4H16V2h-2.36a2 2 0 0 0-1.961 1.608l-.504 2.519a10.967 10.967 0 0 0-1.327.753l-2.42-.819a1.998 1.998 0 0 0-2.372.895l-2.36 4.088a2 2 0 0 0 .411 2.502l1.931 1.697C5.021 15.495 5 15.745 5 16c0 .258.01.513.028.766l-1.92 1.688a2 2 0 0 0-.413 2.502l2.36 4.088a1.998 1.998 0 0 0 2.374.895l2.434-.824a10.974 10.974 0 0 0 1.312.759l.503 2.518A2 2 0 0 0 13.64 30h4.72a2 2 0 0 0 1.961-1.608l.504-2.519a10.967 10.967 0 0 0 1.327-.753l2.419.818a1.998 1.998 0 0 0 2.373-.894l2.36-4.088a2 2 0 0 0-.411-2.502"></path></svg>`
    );
    this.addRibbonIcon("GoNextIcon", "[g]o[n]ext", async () => {
      this.generate.fleeting();
    });
    this.app.workspace.on("active-leaf-change", () => {
      return this.sneakyTabRenamer(this.app);
    });
    this.app.workspace.on("quick-preview", () => {
      return this.sneakyTabRenamer(this.app);
    });
    this.app.workspace.on("resize", () => {
      return this.sneakyTabRenamer(this.app);
    });
    this.addCommand({
      id: "goto-active-task-logs",
      name: "Goto Active Tasks Logs'",
      // @ts-ignore
      callback: () => {
        const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
          if (page.file.frontmatter.status === "doing") {
            return true;
          }
          return false;
        });
        if (pages.length === 0) {
          return;
        }
        const tFm = new FrontmatterJS(pages[0]);
        const logs = this.dv.pages(`"${Paths.Logs}/${tFm.uuid}"`).sort((k) => k.created_at, "desc");
        if (logs.length === 0) {
          return;
        }
        this.openInNewTabIfNotOpened(logs[0]);
      }
    });
    this.addCommand({
      id: "goto-children",
      name: "Goto Child",
      // @ts-ignore
      callback: () => {
        const file = this.getFileFromLeaf(
          this.app.workspace.activeLeaf
        );
        if (file === void 0) {
          console.error("goto-children: File is undefined");
          return;
        }
        const cache = this.getFileCacheFromLeaf(
          this.app.workspace.activeLeaf
        );
        const fm = cache.frontmatter;
        if (fm === void 0) {
          console.error("goto-children: Invalid FrontMatter");
          return;
        }
        const active = this.app.workspace.activeLeaf;
        const dir = file.path.split("/")[0];
        if (dir === Paths.Tasks) {
          const page = { file: { frontmatter: fm, path: file.path } };
          const curFm = new FrontmatterJS(page);
          const curAt = curFm.at.toISOString().slice(0, 10);
          if (curFm.getProject() === "daily") {
            const pages = this.dv.pages(`"${Paths.Journal}"`).where((page2) => {
              const jFm = new FrontmatterJS(page2);
              if (jFm.getProject() !== "mission") {
                return false;
              }
              const jAt = jFm.createdAt.toISOString().slice(0, 10);
              if (curAt !== jAt) {
                return false;
              }
              return true;
            });
            if (pages.length === 0) {
              const note = this.generate.journalEntry();
              note.then((file2) => {
                active.openFile(file2, { active: true });
              });
              return;
            } else {
              const children = this.app.vault.getAbstractFileByPath(
                pages[0].file.path
              );
              Assert.True(
                !Helper.nilCheck(children),
                `goto-children: Unexpected undefined file: ${pages[0].file.path}`
              );
              active.openFile(children);
              return;
            }
          } else {
            const pages = this.dv.pages(`"${Paths.Logs}/${curFm.uuid}"`).sort((k) => k.created_at, "desc");
            if (pages.length === 0) {
              return;
            }
            const children = this.app.vault.getAbstractFileByPath(
              pages[0].file.path
            );
            Assert.True(
              !Helper.nilCheck(children),
              `goto-children: Unexpected undefined file: ${pages[0].file.path}`
            );
            active.openFile(children);
          }
        } else {
          console.error(
            "goto-children: Not Implemented outside Journal, Tasks"
          );
          return;
        }
      }
    });
    this.addCommand({
      id: "goto-parent",
      name: "Goto Parent",
      // @ts-ignore
      callback: () => {
        console.log("goto-parent:");
        const file = this.getFileFromLeaf(
          this.app.workspace.activeLeaf
        );
        if (file === void 0) {
          console.error("goto-parent: File is undefined");
          return;
        }
        const cache = this.getFileCacheFromLeaf(
          this.app.workspace.activeLeaf
        );
        const fm = cache.frontmatter;
        if (fm === void 0) {
          console.error("goto-parent: Invalid FrontMatter");
          return;
        }
        const active = this.app.workspace.activeLeaf;
        const dir = file.path.split("/")[0];
        if (dir === Paths.Slipbox) {
          const parent = this.findFirstParentInDomains(file, cache);
          if (parent !== void 0) {
            const file2 = this.getFileFromUUID(
              parent.frontmatter.uuid
            );
            active.openFile(file2);
          } else {
            active.openFile(
              this.app.vault.getAbstractFileByPath("Index.md")
            );
          }
        } else if (dir === Paths.Logs) {
          const taskId = file.path.split("/")[1];
          Assert.True(
            taskId !== void 0,
            `Invalid logDir: ${file.path}`
          );
          const task = this.app.vault.getAbstractFileByPath(
            `${Paths.Tasks}/${fm.parent_id}.md`
          );
          if (Helper.nilCheck(task)) {
            console.error(`Undefined Task: ${taskId}`);
          } else {
            active.openFile(task);
          }
        } else if (dir === Paths.Tasks) {
          const page = { file: { frontmatter: fm, path: file.path } };
          const curFm = new FrontmatterJS(page);
          const curAt = curFm.at.toISOString().slice(0, 10);
          if (curFm.getProject() === "daily") {
            const pages = this.dv.pages(`"${Paths.Journal}"`).where((page2) => {
              const jFm = new FrontmatterJS(page2);
              if (jFm.getProject() !== "mission") {
                return false;
              }
              const jAt = jFm.at.toISOString().slice(0, 10);
              if (curAt !== jAt) {
                return false;
              }
              return true;
            });
            if (pages.length === 0) {
              console.log("Must create journal entry first");
              return;
            } else {
              throw new Error("Not Implemented");
            }
          } else {
            console.error(
              "goto-parent: Not Implemented for non-daily Task"
            );
            return;
          }
        } else if (dir === Paths.Journal) {
          const page = { file: { frontmatter: fm, path: file.path } };
          const curFm = new FrontmatterJS(page);
          const curAt = curFm.createdAt.toISOString().slice(0, 10);
          if (curFm.getProject() === "mission") {
            const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page2) => {
              if (page2.file.frontmatter.at === void 0) {
                return false;
              }
              const tFm = new FrontmatterJS(page2);
              if (tFm.getProject() !== "daily") {
                return false;
              }
              const tAt = tFm.at.toISOString().slice(0, 10);
              if (curAt !== tAt) {
                return false;
              }
              return true;
            });
            Assert.True(
              pages.length === 1,
              `Non existant or non unique Task: ${pages.file.frontmatter.uuid}`
            );
            const f = this.app.vault.getAbstractFileByPath(
              pages[0].file.path
            );
            Assert.True(
              !Helper.nilCheck(f),
              `Unexpected non-existant Task: ${pages[0].file.path}`
            );
            active.openFile(f);
          } else {
            console.error(
              "goto-parent: Not Implemented for non-mission Journal Entry"
            );
            return;
          }
        } else {
          console.error(
            "goto-parent: Not Implemented outside Index, Logs"
          );
          return;
        }
      }
    });
    this.addCommand({
      id: "goto-active-task",
      name: "Goto Active Task",
      // @ts-ignore
      callback: () => {
        const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
          if (page.file.frontmatter.status === "doing") {
            return true;
          }
          return false;
        });
        console.log(`found ${pages.length} active task(s)`);
        if (pages.length === 0) {
          return;
        }
        this.openInNewTabIfNotOpened(pages[0]);
      }
    });
    this.addCommand({
      id: "open-todays-daily",
      name: "Open Today's Daily",
      // @ts-ignore
      callback: () => {
        const now = new Date();
        const nowIso = now.toISOString().slice(0, 10);
        const pages = this.dv.pages(`"${Paths.Tasks}"`).where((page) => {
          if (page.file.frontmatter.at === void 0) {
            return false;
          }
          const fm = new FrontmatterJS(page);
          if (fm.getProject() !== "daily") {
            return false;
          }
          let fmIso = void 0;
          try {
            fmIso = fm.at.toISOString().slice(0, 10);
          } catch (e) {
            console.warn(`possible invalid data in ${fm.uuid}`);
            return false;
          }
          if (fmIso === nowIso) {
            return true;
          }
          return false;
        });
        if (pages.length === 0) {
          return;
        }
        this.openInNewTabIfNotOpened(pages[0]);
      }
    });
    this.addCommand({
      id: "gonext-generate-fleeting",
      name: "Generate fleeting note",
      // @ts-ignore
      callback: () => {
        this.generate.fleeting();
      }
    });
    this.addCommand({
      id: "safe-delete",
      name: "Safe Delete",
      // @ts-ignore
      callback: () => {
        const file = app.workspace.getActiveFile();
        const fm = app.metadataCache.getFileCache(file).frontmatter;
        if (fm === void 0) {
          return;
        }
        const rootPath = [
          `${Paths.Journal}.md`,
          `${Paths.Inbox}.md`,
          "Ad Hoc.md",
          "allDoneTasks.md",
          "allDoneTasksWithoutLog.md",
          "allMedia.md",
          "allProgressedTasks.md",
          "noteLocator.md",
          "Praxis.md"
        ];
        for (const p of rootPath) {
          if (file.path === p) {
            return;
          }
        }
        if (
          // @ts-ignore
          file.path.split(0, Paths.Resources.length) === // @ts-ignore
          Paths.Resources
        ) {
          return;
        }
        console.log(`deleted file: ${file.path}`);
        app.vault.delete(file);
      }
    });
    this.addCommand({
      id: "display-modal",
      name: "Display modal",
      callback: () => {
        new ExampleModal(this.app).open();
      }
    });
    this.addCommand({
      id: "go-parent",
      name: "Go Parent",
      // @ts-ignore
      callback: () => {
        const file = app.workspace.getActiveFile();
        const fm = app.metadataCache.getFileCache(file).frontmatter;
        if (fm === void 0) {
          return;
        }
        if (fm.parent_id === void 0 && fm.ref_id === void 0) {
          console.warn(
            `parent_id: '${fm.parent_id}' ref_id: '${fm.ref_id}'`
          );
          return;
        }
        if (fm.type === void 0 || fm.type !== Types.Log && fm.type !== Types.Media && fm.type !== Types.Fleeting) {
          console.warn(
            `invalid type: '${fm.type}' for note: '${fm.uuid}'`
          );
          return;
        }
        const parent = fm.type === Types.Log ? `${Paths.Tasks}/${fm.parent_id}.md` : `${Paths.Refs}/${fm.ref_id}.md`;
        const page = app.vault.getAbstractFileByPath(parent);
        app.workspace.openLinkText(parent, "/", false);
      }
    });
    this.app.metadataCache.on(
      "changed",
      (file, data, cache) => {
        const fm = cache.frontmatter;
        if (fm.type === 2) {
          if (this.files[fm.uuid] !== void 0) {
            const [path, note] = this.files[fm.uuid];
            fm.alias = [path.join(" / ")];
          }
        }
      }
    );
    this.app.workspace.onLayoutReady(() => {
      console.log("workspace - layout-ready");
      for (const f of this.app.vault.getFiles()) {
        if (!Helper.isUUID(f.basename)) {
          continue;
        }
        this.vaultContentDict[f.basename] = f;
      }
      this.loadIndex();
    });
  }
  getIndexDomains() {
    const indexPath = this.app.vault.getAbstractFileByPath("Index.md");
    const index = this.app.metadataCache.getFileCache(indexPath);
    const domains = [];
    let start = void 0;
    let end = void 0;
    let found = false;
    for (const heading of index.headings) {
      if (heading.level === 2 && found) {
        end = heading.position.start.offset;
        break;
      } else if (heading.level === 2 && heading.heading === "domains") {
        start = heading.position.end.offset;
        found = true;
      }
    }
    for (const link of index.links) {
      const pos = link.position;
      if (pos.start.offset < start || pos.end.offset > end) {
        continue;
      }
      const indexContent = this.getFileCacheFromUUID(link.link);
      if (indexContent === void 0) {
        continue;
      }
      if (indexContent.headings.length < 2) {
        console.error(`Invalid Index: ${link.link}`);
        continue;
      }
      domains.push(indexContent);
    }
    return domains;
  }
  getDomainComponents(domains) {
    const components = {};
    for (const domain of domains) {
      const name = domain.headings[1].heading;
      const start = domain.headings[1].position.end.offset;
      let end = 0;
      if (domain.headings[2] !== void 0) {
        end = domain.headings[2].position.start.offset;
      } else {
        end = domain.sections[domain.sections.length - 1].position.end.offset;
      }
      for (const component of domain.links) {
        if (component.position.start.offset < start || component.position.end.offset > end) {
          continue;
        }
        if (components[name] === void 0) {
          components[name] = {};
        }
        const cache = this.getFileCacheFromUUID(
          this.extractUUIDFromLink(component.link)
        );
        const componentName = component.displayText;
        if (![
          "patterns",
          "concepts",
          "guidelines",
          "procedures",
          "material"
        ].contains(componentName)) {
          continue;
        }
        if (components[name][componentName] === void 0) {
          components[name][componentName] = [];
        }
        if (cache.links === void 0 || cache.links.length === 0) {
          continue;
        }
        for (const link of cache.links) {
          components[name][componentName].push(
            this.getFileCacheFromUUID(
              this.extractUUIDFromLink(link.link)
            )
          );
        }
      }
    }
    return components;
  }
  commonDataValidation(path, note) {
    const fm = note.frontmatter;
    Assert.True(
      fm !== void 0,
      `Invalid FrontMatter in: ${path.join("/")}`
    );
    Assert.True(note.headings !== void 0, `Blank resource: ${fm.uuid}`);
  }
  getContentBoundaries(note) {
    const fm = note.frontmatter;
    let found = false;
    let start = 0;
    let end = 0;
    for (const heading of note.headings) {
      if (heading.level === 2 && heading.heading.toLowerCase() === "content") {
        found = true;
        start = heading.position.end.offset;
        continue;
      }
      if (found && heading.level === 2 && heading.heading.toLowerCase() !== "content") {
        end = heading.position.start.offset;
      }
    }
    Assert.True(found, `Resource does not declares content: ${fm.uuid}`);
    if (end === 0) {
      end = note.sections[note.sections.length - 1].position.end.offset;
    }
    return [start, end];
  }
  getResourceName(note, start, end) {
    let resourceName = "";
    let lvl3HeadingCount = 0;
    const fm = note.frontmatter;
    for (const heading of note.headings) {
      if (heading.level === 3 && heading.position.start.offset > start && heading.position.end.offset < end) {
        resourceName = heading.heading;
        lvl3HeadingCount++;
      }
    }
    Assert.False(
      lvl3HeadingCount > 1,
      `Resource has multiple names: ${fm.uuid}`
    );
    return resourceName;
  }
  parseComponentConcepts(path, note, q, results) {
    this.commonDataValidation(path, note);
    const [start, end] = this.getContentBoundaries(note);
    const resourceName = this.getResourceName(note, start, end);
    const fm = note.frontmatter;
    results.push([[...path, resourceName], note]);
    if (note.links === void 0 || note.links.length === 0) {
      return;
    }
    for (const link of note.links) {
      if (link.position.start.offset > start && link.position.end.offset < end) {
        Assert.True(
          Helper.isUUID(link.link.slice(0, 36)),
          `Invalid link in resource: ${fm.uuid}`
        );
        if (!Helper.isUUID(link.link.slice(0, 36))) {
          continue;
        }
        const f = this.getFileCacheFromUUID(
          this.extractUUIDFromLink(link.link)
        );
        if (f === void 0 || f.frontmatter === void 0 || f.frontmatter.type !== 2) {
          continue;
        }
        q.push([[...path, resourceName], f]);
      }
    }
  }
  parseComponentPatterns(path, note, q, results) {
    this.commonDataValidation(path, note);
    const [start, end] = this.getContentBoundaries(note);
    const resourceName = this.getResourceName(note, start, end);
    if (this.isSequence(note)) {
      results.push([[...path, resourceName], note]);
      return;
    }
    if (note.links === void 0 || note.links.length === 0) {
      return;
    }
    for (const link of note.links) {
      if (link.position.start.offset < start || link.position.end.offset > end) {
        continue;
      }
      if (!Helper.isUUID(link.link.slice(0, 36))) {
        continue;
      }
      const f = this.getFileCacheFromUUID(
        this.extractUUIDFromLink(link.link)
      );
      if (f === void 0 || f.frontmatter === void 0 || f.frontmatter.type !== 2) {
        continue;
      }
      q.push([[...path, resourceName], f]);
    }
  }
  parseComponentTree(components, domainName, componentName) {
    const q = [];
    const results = [];
    if (components[domainName][componentName] === void 0) {
      return;
    }
    for (const pattern of components[domainName][componentName]) {
      q.push([[domainName, componentName], pattern]);
    }
    while (q.length > 0) {
      const [path, note] = q.shift();
      Assert.True(path.length >= 2, `Invalid component path: ${path}`);
      const componentName2 = path[1];
      switch (componentName2) {
        case "patterns":
          this.parseComponentPatterns(path, note, q, results);
          break;
        case "concepts":
          this.parseComponentConcepts(path, note, q, results);
          break;
        default:
          break;
      }
    }
    return results;
  }
  loadIndex() {
    console.log("gonext - loadIndex()");
    const domains = this.getIndexDomains();
    const components = this.getDomainComponents(domains);
    const renamed = {};
    for (const domain of Object.keys(components)) {
      for (const component of Object.keys(components[domain])) {
        const results = this.parseComponentTree(
          components,
          domain,
          component
        );
        if (results === void 0) {
          continue;
        }
        for (const [path, note] of results) {
          const fm = note.frontmatter;
          this.files[fm.uuid] = [path, note];
          if (renamed[fm.uuid] !== true && fm.type === 2) {
            if (fm.alias === void 0) {
              fm.alias = [path.join(" / ")];
            } else if (Array.isArray(fm.alias)) {
              fm.alias.push(path.join(" / "));
            } else {
              fm.alias = [fm.alias, path.join(" / ")];
            }
            renamed[fm.uuid] = true;
          }
        }
      }
    }
  }
  findFirstParentInDomains(file, resource) {
    const domains = this.getIndexDomains();
    const q = [];
    for (const domain of domains) {
      q.push(domain);
    }
    while (q.length > 0) {
      const cur = q.pop();
      if (cur === void 0) {
        continue;
        return void 0;
      }
      if (cur.links === void 0 || cur.links.length === 0) {
        continue;
      }
      if (cur.frontmatter === void 0) {
        continue;
      }
      const f = this.getFileFromUUID(cur.frontmatter.uuid);
      if (f === void 0) {
        continue;
      }
      if (f.parent.name !== Paths.Slipbox) {
        continue;
      }
      const [start, end] = this.getContentBoundaries(cur);
      for (const link of cur.links) {
        if (link.link.length !== 36) {
          continue;
        }
        const pos = link.position;
        if (pos.start.offset < start || pos.end.offset > end) {
          continue;
        }
        if (link.link === resource.frontmatter.uuid) {
          return cur;
        } else {
          q.push(this.getFileCacheFromUUID(link.link));
        }
      }
    }
    return void 0;
  }
  isSequence(note) {
    Assert.True(
      note.headings.length > 0,
      `isSequence: Invalid parameter: note: ${note.frontmatter.uuid}`
    );
    for (const heading of note.headings) {
      if (heading.level === 4 && heading.heading === "steps") {
        return true;
      }
    }
    return false;
  }
  onunload() {
    console.log("gonext - onunload()");
    delete window.gonext;
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ExampleModal = class extends import_obsidian.Modal {
  constructor(app2) {
    super(app2);
  }
  onOpen() {
    const { contentEl } = this;
    const dv = this.app.plugins.plugins.dataview.api;
    const tasks = dv.pages().array().slice(0, 10);
    let s = "";
    for (const task of tasks) {
      s += `${task.file.path}

`;
    }
    contentEl.setText(s);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
